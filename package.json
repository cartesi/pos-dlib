{
  "name": "@cartesi/pos",
  "version": "0.1.0-beta.7",
  "description": "CTSI Proof of Stake",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "@cartesi/token": "^1.1.0",
    "@cartesi/util": "^0.4.2",
    "@openzeppelin/contracts": "3.2.1-solc-0.7",
    "commander": "^6.1.0"
  },
  "devDependencies": {
    "@nodefactory/buidler-typechain": "^0.2.0",
    "@nomiclabs/buidler": "^1.4.7",
    "@nomiclabs/buidler-ethers": "^2.0.0",
    "@nomiclabs/buidler-waffle": "^2.0.0",
    "@typechain/ethers-v5": "^1.0.0",
    "@types/chai": "^4.2.11",
    "@types/commander": "^2.12.2",
    "@types/mocha": "^8.0.0",
    "@types/node": "^14.0.23",
    "buidler-deploy": "0.6.0-beta.21",
    "chai": "^4.2.0",
    "ethereum-waffle": "^3.1.0",
    "ethers": "^5.0.9",
    "mocha": "^8.1.3",
    "npm-run-all": "^4.1.5",
    "npm-scripts-info": "^0.3.9",
    "rimraf": "^3.0.2",
    "solc": "^0.7.1",
    "solidity-coverage": "^0.7.10",
    "ts-generator": "^0.0.8",
    "ts-node": "^9.0.0",
    "typechain": "^2.0.0",
    "typescript": "^4.0.2"
  },
  "scripts": {
    "info": "npm-scripts-info",
    "prepare": "buidler compile",
    "typechain": "typechain --target ethers-v5 --outDir src/contracts/pos './artifacts/*.json' && typechain --target ethers-v5 --outDir src/contracts/util './node_modules/@cartesi/util/artifacts/*.json' && typechain --target ethers-v5 --outDir src/contracts/token './node_modules/@cartesi/token/artifacts/*.json'",
    "pretest": "run-s prepare typechain",
    "test": "buidler test",
    "clean": "rimraf artifacts && rimraf cache && rimraf deployments/localhost && rimraf src/types/*",
    "deploy": "run-s deploy:development",
    "deploy:testnet": "run-s deploy:ropsten deploy:rinkeby deploy:kovan deploy:goerli deploy:matic_testnet deploy:bsc_testnet",
    "deploy:development": "buidler deploy --network localhost",
    "deploy:ropsten": "buidler deploy --network ropsten --export abi/ropsten.json",
    "deploy:rinkeby": "buidler deploy --network rinkeby --export abi/rinkeby.json",
    "deploy:kovan": "buidler deploy --network kovan --export abi/kovan.json",
    "deploy:goerli": "buidler deploy --network goerli --export abi/goerli.json",
    "deploy:matic_testnet": "buidler deploy --network matic_testnet --export abi/matic_testnet.json",
    "deploy:bsc_testnet": "buidler deploy --network bsc_testnet --export abi/bsc_testnet.json",
    "prepack": "run-s clean deploy:testnet",
    "start": "buidler node"
  },
  "scripts-info": {
    "info": "Displays information about the scripts.",
    "typechain": "Generate TypeScript code to interact with Smart Contracts, powered by TypeChain",
    "test": "Run unit tests",
    "clean": "Clean build artifacts, including contracts deployment information",
    "deploy": "Deploy contracts to local ganache. Requires ganache running on localhost:8545",
    "deploy:testnet": "Deploy contracts to all supported testnets. Requires two environment variables: PROJECT_ID and MNEMONIC.",
    "deploy:development": "Deploy contracts to local ganache. Requires ganache running on localhost:8545",
    "deploy:ropsten": "Deploy contracts to ropsten. Requires two environment variables: PROJECT_ID and MNEMONIC.",
    "deploy:rinkeby": "Deploy contracts to rinkeby. Requires two environment variables: PROJECT_ID and MNEMONIC.",
    "deploy:kovan": "Deploy contracts to kovan. Requires two environment variables: PROJECT_ID and MNEMONIC.",
    "deploy:goerli": "Deploy contracts to goerli. Requires two environment variables: PROJECT_ID and MNEMONIC.",
    "deploy:matic_testnet": "Deploy contracts to matic_testnet.",
    "deploy:bsc_testnet": "Deploy contracts to bsc_testnet."
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cartesi/pos-dlib.git"
  },
  "files": [
    "abi",
    "artifacts",
    "contracts",
    "deployments"
  ],
  "author": "Felipe Argento <felipe.argento@cartesi.io>",
  "bugs": {
    "url": "https://github.com/cartesi/pos-dlib/issues"
  },
  "homepage": "https://github.com/cartesi/pos-dlib#readme",
  "optionalDependencies": {
    "fsevents": "^2.1.3"
  }
}
