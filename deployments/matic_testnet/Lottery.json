{
  "address": "0x8921D7C9491A9921faC4cbbFc49c37c0fe597dF5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_roundCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_roundDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_difficulty",
          "type": "uint256"
        }
      ],
      "name": "RoundClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "canWin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "claimRound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "deactivate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getCurrentDrawStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getDesiredDrawInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getDifficultyAdjustmentParameter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getMicrosecondsSinceLastDraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getMinDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentNonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getRoundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "_uintValues",
          "type": "uint256[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSubInstances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDifficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialDifficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_difficultyAdjustmentParameter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_desiredDrawTimeInterval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_posManagerAddress",
          "type": "address"
        }
      ],
      "name": "instantiate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isConcerned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "log2ApproxTimes1M",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa0f93bc86443092f5c3aa134d47e98d32e2649744a5271cdb28c2739c9e81f1c",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x8921D7C9491A9921faC4cbbFc49c37c0fe597dF5",
    "transactionIndex": 0,
    "gasUsed": "3506751",
    "logsBloom": "0x
    "blockHash": "0xfe10b1ca515a678c791c9c773343279b817e2603c298f6b44f7db3be682518f5",
    "transactionHash": "0xa0f93bc86443092f5c3aa134d47e98d32e2649744a5271cdb28c2739c9e81f1c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6329529,
        "transactionHash": "0xa0f93bc86443092f5c3aa134d47e98d32e2649744a5271cdb28c2739c9e81f1c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c755f17abb600000000000000000000000000000000000000000000000000289eb5331eacc6000000000000000000000000000000000000000000000000000000a71150cae65000000000000000000000000000000000000000000000000028923fd407011000000000000000000000000000000000000000000000000000000d1c7068769c50",
        "logIndex": 0,
        "blockHash": "0xfe10b1ca515a678c791c9c773343279b817e2603c298f6b44f7db3be682518f5"
      }
    ],
    "blockNumber": 6329529,
    "cumulativeGasUsed": "3506751",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c31e23cc00625f198ce559960a373148",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_roundCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_roundDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_difficulty\",\"type\":\"uint256\"}],\"name\":\"RoundClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"canWin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"claimRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCurrentDrawStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDesiredDrawInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDifficultyAdjustmentParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMicrosecondsSinceLastDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMinDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRoundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_uintValues\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSubInstances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_difficultyAdjustmentParameter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_desiredDrawTimeInterval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_posManagerAddress\",\"type\":\"address\"}],\"name\":\"instantiate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConcerned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"log2ApproxTimes1M\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canWin(uint256,address,uint256)\":{\"params\":{\"_index\":\"the index of the instance of lottery you want to interact with\",\"_user\":\"the address that is gonna get checked\",\"_weight\":\"number that will weight the random number, most likely will be the number of staked tokens\"}},\"claimRound(uint256,address,uint256)\":{\"params\":{\"_index\":\"the index of the instance of lottery you want to interact with\",\"_user\":\"address that will win the lottery\",\"_weight\":\"number that will weight the random number, most likely will be the number of staked tokens\"}},\"getCurrentDrawStartTime(uint256)\":{\"params\":{\"_index\":\"the index of the instance of lottery to be interact with\"},\"returns\":{\"_0\":\"timestamp of when current draw was instantiated\"}},\"getDesiredDrawInterval(uint256)\":{\"params\":{\"_index\":\"the index of the instance of lottery to be interact with\"},\"returns\":{\"_0\":\"desired draw interval of this instance\"}},\"getDifficulty(uint256)\":{\"params\":{\"_index\":\"the index of the instance of lottery to be interact with\"},\"returns\":{\"_0\":\"difficulty of current draw\"}},\"getDifficultyAdjustmentParameter(uint256)\":{\"params\":{\"_index\":\"the index of the instance of lottery to be interact with\"},\"returns\":{\"_0\":\"difficulty adjustment parameter\"}},\"getMicrosecondsSinceLastDraw(uint256)\":{\"params\":{\"_index\":\"the index of the instance of lottery to be interact with\"},\"returns\":{\"_0\":\"microseconds passed since last draw started\"}},\"getMinDifficulty(uint256)\":{\"params\":{\"_index\":\"the index of the instance of lottery to be interact with\"},\"returns\":{\"_0\":\"min difficulty of instance\"}},\"getRoundCount(uint256)\":{\"params\":{\"_index\":\"the index of the instance of lottery to be interact with\"},\"returns\":{\"_0\":\"how many rounds have happened\"}},\"instantiate(uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_desiredDrawTimeInterval\":\"how often we want to elect a winner\",\"_difficultyAdjustmentParameter\":\"how quickly the difficulty gets updated according to the difference between time passed and desired draw time interval.\",\"_initialDifficulty\":\"starting difficulty\",\"_minDifficulty\":\"lower bound for difficulty parameter\",\"_posManagerAddress\":\"address of ProofOfStake that will use this instance\"}},\"log2ApproxTimes1M(uint256)\":{\"params\":{\"_num\":\"number to take log2 * 1M of\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canWin(uint256,address,uint256)\":{\"notice\":\"Check if address can win current round\"},\"claimRound(uint256,address,uint256)\":{\"notice\":\"Claim that _user won the round\"},\"getCurrentDrawStartTime(uint256)\":{\"notice\":\"Returns current draw time\"},\"getDesiredDrawInterval(uint256)\":{\"notice\":\"Returns desired draw interval\"},\"getDifficulty(uint256)\":{\"notice\":\"Returns current difficulty\"},\"getDifficultyAdjustmentParameter(uint256)\":{\"notice\":\"Returns difficulty adjustment parameter\"},\"getMicrosecondsSinceLastDraw(uint256)\":{\"notice\":\"Returns time since last draw started, in microseconds\"},\"getMinDifficulty(uint256)\":{\"notice\":\"Returns min difficulty\"},\"getRoundCount(uint256)\":{\"notice\":\"Returns the round count of this instance\"},\"instantiate(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Instantiates a Speed Bump structure\"},\"log2ApproxTimes1M(uint256)\":{\"notice\":\"Approximates log2 * 1M\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/CartesiMath.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title CartesiMath\\n/// @author Felipe Argento\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract CartesiMath {\\n    using SafeMath for uint256;\\n    mapping(uint256 => uint256) log2tableTimes1M;\\n\\n    constructor() {\\n        log2tableTimes1M[1] = 0;\\n        log2tableTimes1M[2] = 1000000;\\n        log2tableTimes1M[3] = 1584962;\\n        log2tableTimes1M[4] = 2000000;\\n        log2tableTimes1M[5] = 2321928;\\n        log2tableTimes1M[6] = 2584962;\\n        log2tableTimes1M[7] = 2807354;\\n        log2tableTimes1M[8] = 3000000;\\n        log2tableTimes1M[9] = 3169925;\\n        log2tableTimes1M[10] = 3321928;\\n        log2tableTimes1M[11] = 3459431;\\n        log2tableTimes1M[12] = 3584962;\\n        log2tableTimes1M[13] = 3700439;\\n        log2tableTimes1M[14] = 3807354;\\n        log2tableTimes1M[15] = 3906890;\\n        log2tableTimes1M[16] = 4000000;\\n        log2tableTimes1M[17] = 4087462;\\n        log2tableTimes1M[18] = 4169925;\\n        log2tableTimes1M[19] = 4247927;\\n        log2tableTimes1M[20] = 4321928;\\n        log2tableTimes1M[21] = 4392317;\\n        log2tableTimes1M[22] = 4459431;\\n        log2tableTimes1M[23] = 4523561;\\n        log2tableTimes1M[24] = 4584962;\\n        log2tableTimes1M[25] = 4643856;\\n        log2tableTimes1M[26] = 4700439;\\n        log2tableTimes1M[27] = 4754887;\\n        log2tableTimes1M[28] = 4807354;\\n        log2tableTimes1M[29] = 4857980;\\n        log2tableTimes1M[30] = 4906890;\\n        log2tableTimes1M[31] = 4954196;\\n        log2tableTimes1M[32] = 5000000;\\n        log2tableTimes1M[33] = 5044394;\\n        log2tableTimes1M[34] = 5087462;\\n        log2tableTimes1M[35] = 5129283;\\n        log2tableTimes1M[36] = 5169925;\\n        log2tableTimes1M[37] = 5209453;\\n        log2tableTimes1M[38] = 5247927;\\n        log2tableTimes1M[39] = 5285402;\\n        log2tableTimes1M[40] = 5321928;\\n        log2tableTimes1M[41] = 5357552;\\n        log2tableTimes1M[42] = 5392317;\\n        log2tableTimes1M[43] = 5426264;\\n        log2tableTimes1M[44] = 5459431;\\n        log2tableTimes1M[45] = 5491853;\\n        log2tableTimes1M[46] = 5523561;\\n        log2tableTimes1M[47] = 5554588;\\n        log2tableTimes1M[48] = 5584962;\\n        log2tableTimes1M[49] = 5614709;\\n        log2tableTimes1M[50] = 5643856;\\n        log2tableTimes1M[51] = 5672425;\\n        log2tableTimes1M[52] = 5700439;\\n        log2tableTimes1M[53] = 5727920;\\n        log2tableTimes1M[54] = 5754887;\\n        log2tableTimes1M[55] = 5781359;\\n        log2tableTimes1M[56] = 5807354;\\n        log2tableTimes1M[57] = 5832890;\\n        log2tableTimes1M[58] = 5857980;\\n        log2tableTimes1M[59] = 5882643;\\n        log2tableTimes1M[60] = 5906890;\\n        log2tableTimes1M[61] = 5930737;\\n        log2tableTimes1M[62] = 5954196;\\n        log2tableTimes1M[63] = 5977279;\\n        log2tableTimes1M[64] = 6000000;\\n        log2tableTimes1M[65] = 6022367;\\n        log2tableTimes1M[66] = 6044394;\\n        log2tableTimes1M[67] = 6066089;\\n        log2tableTimes1M[68] = 6087462;\\n        log2tableTimes1M[69] = 6108524;\\n        log2tableTimes1M[70] = 6129283;\\n        log2tableTimes1M[71] = 6149747;\\n        log2tableTimes1M[72] = 6169925;\\n        log2tableTimes1M[73] = 6189824;\\n        log2tableTimes1M[74] = 6209453;\\n        log2tableTimes1M[75] = 6228818;\\n        log2tableTimes1M[76] = 6247927;\\n        log2tableTimes1M[77] = 6266786;\\n        log2tableTimes1M[78] = 6285402;\\n        log2tableTimes1M[79] = 6303780;\\n        log2tableTimes1M[80] = 6321928;\\n        log2tableTimes1M[81] = 6339850;\\n        log2tableTimes1M[82] = 6357552;\\n        log2tableTimes1M[83] = 6375039;\\n        log2tableTimes1M[84] = 6392317;\\n        log2tableTimes1M[85] = 6409390;\\n        log2tableTimes1M[86] = 6426264;\\n        log2tableTimes1M[87] = 6442943;\\n        log2tableTimes1M[88] = 6459431;\\n        log2tableTimes1M[89] = 6475733;\\n        log2tableTimes1M[90] = 6491853;\\n        log2tableTimes1M[91] = 6507794;\\n        log2tableTimes1M[92] = 6523561;\\n        log2tableTimes1M[93] = 6539158;\\n        log2tableTimes1M[94] = 6554588;\\n        log2tableTimes1M[95] = 6569855;\\n        log2tableTimes1M[96] = 6584962;\\n        log2tableTimes1M[97] = 6599912;\\n        log2tableTimes1M[98] = 6614709;\\n        log2tableTimes1M[99] = 6629356;\\n        log2tableTimes1M[100] = 6643856;\\n        log2tableTimes1M[101] = 6658211;\\n        log2tableTimes1M[102] = 6672425;\\n        log2tableTimes1M[103] = 6686500;\\n        log2tableTimes1M[104] = 6700439;\\n        log2tableTimes1M[105] = 6714245;\\n        log2tableTimes1M[106] = 6727920;\\n        log2tableTimes1M[107] = 6741466;\\n        log2tableTimes1M[108] = 6754887;\\n        log2tableTimes1M[109] = 6768184;\\n        log2tableTimes1M[110] = 6781359;\\n        log2tableTimes1M[111] = 6794415;\\n        log2tableTimes1M[112] = 6807354;\\n        log2tableTimes1M[113] = 6820178;\\n        log2tableTimes1M[114] = 6832890;\\n        log2tableTimes1M[115] = 6845490;\\n        log2tableTimes1M[116] = 6857980;\\n        log2tableTimes1M[117] = 6870364;\\n        log2tableTimes1M[118] = 6882643;\\n        log2tableTimes1M[119] = 6894817;\\n        log2tableTimes1M[120] = 6906890;\\n        log2tableTimes1M[121] = 6918863;\\n        log2tableTimes1M[122] = 6930737;\\n        log2tableTimes1M[123] = 6942514;\\n        log2tableTimes1M[124] = 6954196;\\n        log2tableTimes1M[125] = 6965784;\\n        log2tableTimes1M[126] = 6977279;\\n        log2tableTimes1M[127] = 6988684;\\n        log2tableTimes1M[128] = 7000000;\\n    }\\n\\n    /// @notice Approximates log2 * 1M\\n    /// @param _num number to take log2 * 1M of\\n    function log2ApproxTimes1M(uint256 _num) public view returns (uint256) {\\n        require (_num > 0, \\\"Number cannot be zero\\\");\\n        uint256 leading = 0;\\n\\n        if (_num == 1) return 0;\\n\\n        while (log2tableTimes1M[_num] == 0) {\\n           _num = _num >> 1;\\n           leading += 1;\\n       }\\n       return (leading.mul(uint256(1000000))).add(log2tableTimes1M[_num]);\\n    }\\n}\\n\",\"keccak256\":\"0x317480c275275291fb5c6a5af205d6b84924f55d5d0f32d7688cb694b00783b9\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Decorated.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\n\\ncontract Decorated {\\n    // This contract defines several modifiers but does not use\\n    // them - they will be used in derived contracts.\\n    modifier onlyBy(address user) {\\n        require(msg.sender == user, \\\"Cannot be called by user\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfter(uint256 time) {\\n        require(block.timestamp > time, \\\"Cannot be called now\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdbba019b8f7f93b212a5bbae402ee988321c4fa82ed2b4c9e55b4d7ddf35dcc3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Instantiator.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\ninterface Instantiator {\\n\\n    modifier onlyInstantiated(uint256 _index) virtual;\\n\\n    modifier onlyActive(uint256 _index) virtual;\\n\\n    modifier increasesNonce(uint256 _index) virtual;\\n\\n    function isActive(uint256 _index) external view returns (bool);\\n\\n    function getNonce(uint256 _index) external view returns (uint256);\\n\\n    function isConcerned(uint256 _index, address _user) external view returns (bool);\\n\\n    function getSubInstances(uint256 _index, address) external view returns (address[] memory _addresses, uint256[] memory _indices);\\n\\n    function deactivate(uint256 _index) external;\\n}\\n\",\"keccak256\":\"0x084e3e769f423b3f32bd8faf119be132a478eeea8006bed69b527b2fdcfd45a1\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/InstantiatorImpl.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Instantiator.sol\\\";\\n\\nabstract contract InstantiatorImpl is Instantiator {\\n    uint256 public currentIndex = 0;\\n\\n    mapping(uint256 => bool) internal active;\\n    mapping(uint256 => uint256) internal nonce;\\n\\n    modifier onlyInstantiated(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        _;\\n    }\\n\\n    modifier onlyActive(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        require(isActive(_index), \\\"Index inactive\\\");\\n        _;\\n    }\\n\\n    modifier increasesNonce(uint256 _index) override {\\n        nonce[_index]++;\\n        _;\\n    }\\n\\n    function isActive(uint256 _index) public override view returns (bool) {\\n        return (active[_index]);\\n    }\\n\\n    function getNonce(uint256 _index)\\n        public\\n        override\\n        view\\n        onlyActive(_index)\\n        returns (uint256 currentNonce)\\n    {\\n        return nonce[_index];\\n    }\\n\\n    function deactivate(uint256 _index) public override {\\n        active[_index] = false;\\n        nonce[_index] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc1db237a28042f74224ae2d4398616fb670ce87709ffd8505c142cddedee6954\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n/// @title Lottery\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"@cartesi/util/contracts/CartesiMath.sol\\\";\\nimport \\\"@cartesi/util/contracts/InstantiatorImpl.sol\\\";\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\n\\ncontract Lottery is InstantiatorImpl, Decorated, CartesiMath {\\n    using SafeMath for uint256;\\n\\n    struct LotteryCtx {\\n        mapping(uint256 => address) roundWinner; // each rounds winner\\n        uint256 roundCount; // how many draw rounds happened\\n        uint256 currentDrawStartTime; // timestamp of when current draw started\\n        uint256 difficulty; // difficulty parameter defines how big the interval will be\\n        uint256 minDifficulty; // lower bound for difficulty\\n        uint256 difficultyAdjustmentParameter; // how fast the difficulty gets adjusted to reach the desired draw time, number * 1000000\\n        uint256 desiredDrawTimeInterval; // desired draw time interval, used to tune difficulty\\n        uint256 currentGoalBlockNumber; // block number which will decide current draw's goal\\n\\n        address posManagerAddress;\\n\\n    }\\n\\n    mapping(uint256 => LotteryCtx) internal instance;\\n\\n    event RoundClaimed(\\n        address _winner,\\n        uint256 _roundCount,\\n        uint256 _roundDuration,\\n        uint256 _difficulty\\n    );\\n\\n    /// @notice Instantiates a Speed Bump structure\\n    /// @param _minDifficulty lower bound for difficulty parameter\\n    /// @param _initialDifficulty starting difficulty\\n    /// @param _difficultyAdjustmentParameter how quickly the difficulty gets updated\\n    /// according to the difference between time passed and desired draw time interval.\\n    /// @param _desiredDrawTimeInterval how often we want to elect a winner\\n    /// @param _posManagerAddress address of ProofOfStake that will use this instance\\n    function instantiate(\\n        uint256 _minDifficulty,\\n        uint256 _initialDifficulty,\\n        uint256 _difficultyAdjustmentParameter,\\n        uint256 _desiredDrawTimeInterval,\\n        address _posManagerAddress\\n    ) public returns (uint256)\\n    {\\n        require(\\n            _desiredDrawTimeInterval > 30,\\n            \\\"Desired draw time interval has to be bigger than 30 seconds\\\"\\n        );\\n\\n        instance[currentIndex].minDifficulty = _minDifficulty;\\n        instance[currentIndex].difficulty = _initialDifficulty;\\n        instance[currentIndex].difficultyAdjustmentParameter = _difficultyAdjustmentParameter;\\n        instance[currentIndex].desiredDrawTimeInterval = _desiredDrawTimeInterval;\\n        instance[currentIndex].posManagerAddress = _posManagerAddress;\\n\\n        instance[currentIndex].currentGoalBlockNumber = block.number + 1; // goal has to be in the future, so miner cant manipulate (easily)\\n        instance[currentIndex].currentDrawStartTime = block.timestamp; // first draw starts when the instance is created\\n\\n        active[currentIndex] = true;\\n        return currentIndex++;\\n    }\\n\\n    /// @notice Calculates the log of the random number between the goal and callers address\\n    /// @param _index the index of the instance of lottery you want to interact with\\n    /// @param _user address to calculate log of random\\n    /// @return log of random number between goal and callers address * 1M\\n    function getLogOfRandom(uint256 _index, address _user) internal view returns (uint256) {\\n        bytes32 currentGoal = blockhash(instance[_index].currentGoalBlockNumber);\\n        bytes32 hashedAddress = keccak256(abi.encodePacked(_user));\\n        uint256 distance = uint256(keccak256(abi.encodePacked(hashedAddress, currentGoal)));\\n\\n        return CartesiMath.log2ApproxTimes1M(distance);\\n    }\\n\\n    /// @notice Claim that _user won the round\\n    /// @param _index the index of the instance of lottery you want to interact with\\n    /// @param _user address that will win the lottery\\n    /// @param _weight number that will weight the random number, most likely will be the number of staked tokens\\n    function claimRound(uint256 _index, address _user, uint256 _weight) public returns (bool) {\\n        LotteryCtx storage lot = instance[_index];\\n\\n        require(_weight > 0, \\\"Caller must have at least one staked token\\\");\\n        require(msg.sender == lot.posManagerAddress, \\\"Function can only be called by pos address\\\");\\n\\n        if (canWin(_index, _user, _weight)) {\\n            emit RoundClaimed(\\n                _user,\\n                lot.roundCount,\\n                getMicrosecondsSinceLastDraw(_index),\\n                lot.difficulty\\n            );\\n\\n            return _roundFinished(_index, _user);\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Check if address can win current round\\n    /// @param _index the index of the instance of lottery you want to interact with\\n    /// @param _user the address that is gonna get checked\\n    /// @param _weight number that will weight the random number, most likely will be the number of staked tokens\\n    function canWin(uint256 _index, address _user, uint256 _weight) public view returns (bool) {\\n        LotteryCtx storage lot = instance[_index];\\n\\n        // cannot win if lottery goal hasnt been decided yet\\n        if (block.number <= lot.currentGoalBlockNumber) {\\n            return false;\\n        }\\n\\n        uint256 time = getMicrosecondsSinceLastDraw(_index);\\n\\n        // cannot get hash of block if its older than 256, we set 220 to avoid edge cases\\n        // new goal cannot be in the past, otherwise user could \\\"choose it\\\"\\n        return (\\n            (block.number).sub(lot.currentGoalBlockNumber) > 220 ||\\n            (_weight.mul(time)) > lot.difficulty.mul((256000000 - getLogOfRandom(_index, _user)))\\n        );\\n    }\\n\\n    /// @notice Finish Round, declare winner and ajust difficulty\\n    /// @param _index the index of the instance of lottery you want to interact with\\n    /// @param _user address of user that won the round\\n    function _roundFinished(uint256 _index, address _user) private returns (bool) {\\n        LotteryCtx storage lot = instance[_index];\\n        // declare winner\\n        lot.roundWinner[lot.roundCount] = _user;\\n\\n        // adjust difficulty\\n        lot.difficulty = getNewDifficulty(\\n            lot.minDifficulty,\\n            lot.difficulty,\\n            (block.timestamp).sub(lot.currentDrawStartTime),\\n            lot.desiredDrawTimeInterval,\\n            lot.difficultyAdjustmentParameter\\n        );\\n\\n        _reset(_index);\\n        return true;\\n    }\\n\\n    /// @notice Reset instance, advancing round and choosing new goal\\n    /// @param _index the index of the instance of lottery you want to interact with\\n    function _reset(uint256 _index) private {\\n        LotteryCtx storage lot = instance[_index];\\n\\n        lot.roundCount++;\\n        lot.currentGoalBlockNumber = block.number + 1;\\n        lot.currentDrawStartTime = block.timestamp;\\n    }\\n\\n    /// @notice Calculates new difficulty parameter\\n    /// @param _minDiff minimum difficulty of instance\\n    /// @param _oldDiff is the difficulty of previous round\\n    /// @param _timePassed is how long the previous round took\\n    /// @param _desiredDrawTime is how long a round is supposed to take\\n    /// @param _adjustmentParam is how fast the difficulty gets adjusted,\\n    ///         should be number * 1000000\\n    function getNewDifficulty(\\n        uint256 _minDiff,\\n        uint256 _oldDiff,\\n        uint256 _timePassed,\\n        uint256 _desiredDrawTime,\\n        uint256 _adjustmentParam\\n    )\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        if (_timePassed < _desiredDrawTime) {\\n            return _oldDiff.add(_oldDiff.mul(_adjustmentParam).div(1000000) + 1);\\n        } else if (_timePassed > _desiredDrawTime) {\\n            uint256 newDiff = _oldDiff.sub(_oldDiff.mul(_adjustmentParam).div(1000000) + 1);\\n\\n            return newDiff > _minDiff ? newDiff : _minDiff;\\n        }\\n\\n        return _oldDiff;\\n    }\\n\\n    /// @notice Returns the round count of this instance\\n    /// @param _index the index of the instance of lottery to be interact with\\n    /// @return how many rounds have happened\\n    function getRoundCount(uint256 _index) public view returns (uint256) {\\n        return instance[_index].roundCount;\\n    }\\n\\n    /// @notice Returns current draw time\\n    /// @param _index the index of the instance of lottery to be interact with\\n    /// @return timestamp of when current draw was instantiated\\n    function getCurrentDrawStartTime(uint256 _index) public view returns (uint256) {\\n        return instance[_index].currentDrawStartTime;\\n    }\\n\\n    /// @notice Returns current difficulty\\n    /// @param _index the index of the instance of lottery to be interact with\\n    /// @return difficulty of current draw\\n    function getDifficulty(uint256 _index) public view returns (uint256) {\\n        return instance[_index].difficulty;\\n    }\\n\\n    /// @notice Returns min difficulty\\n    /// @param _index the index of the instance of lottery to be interact with\\n    /// @return min difficulty of instance\\n    function getMinDifficulty(uint256 _index) public view returns (uint256) {\\n        return instance[_index].minDifficulty;\\n    }\\n\\n    /// @notice Returns difficulty adjustment parameter\\n    /// @param _index the index of the instance of lottery to be interact with\\n    /// @return difficulty adjustment parameter\\n    function getDifficultyAdjustmentParameter(\\n        uint256 _index\\n    )\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        return instance[_index].difficultyAdjustmentParameter;\\n    }\\n\\n    /// @notice Returns desired draw interval\\n    /// @param _index the index of the instance of lottery to be interact with\\n    /// @return desired draw interval of this instance\\n    function getDesiredDrawInterval(uint256 _index) public view returns (uint256) {\\n        return instance[_index].desiredDrawTimeInterval;\\n    }\\n\\n    /// @notice Returns time since last draw started, in microseconds\\n    /// @param _index the index of the instance of lottery to be interact with\\n    /// @return microseconds passed since last draw started\\n    function getMicrosecondsSinceLastDraw(uint256 _index) public view returns (uint256) {\\n        LotteryCtx storage lot = instance[_index];\\n\\n        // time since draw started times 1e6 (microseconds)\\n        return ((block.timestamp).sub(lot.currentDrawStartTime)).mul(1000000);\\n    }\\n\\n    function getState(uint256 _index, address _user)\\n    public view returns (uint256[5] memory _uintValues) {\\n        LotteryCtx storage i = instance[_index];\\n\\n        uint256[5] memory uintValues = [\\n            block.number,\\n            i.currentGoalBlockNumber,\\n            i.difficulty,\\n            ((block.timestamp).sub(i.currentDrawStartTime)).mul(1000000), // time passed\\n            getLogOfRandom(_index, _user)\\n        ];\\n\\n        return uintValues;\\n    }\\n\\n    function isConcerned(uint256, address) public override pure returns (bool) {\\n        return false; // isConcerned is only for the main concern (PoS)\\n    }\\n\\n    function getSubInstances(uint256, address)\\n        public override pure returns (address[] memory _addresses,\\n            uint256[] memory _indices)\\n    {\\n        address[] memory a;\\n        uint256[] memory i;\\n\\n        a = new address[](0);\\n        i = new uint256[](0);\\n\\n        return (a, i);\\n    }\\n}\\n\",\"keccak256\":\"0xad65bf2a76ff3b356ea461d2ccb5d35f7ad816ce3d0cc3f306143731517ad2c5\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806382afd23b116100a2578063b12decb011610071578063b12decb014610327578063c526656c14610344578063de76c5b914610409578063e3581b6814610426578063f0d2a38c1461044357610116565b806382afd23b146102b157806383f6f5ca146102ce578063916b9bef146102eb578063983ef7251461030a57610116565b806345e653ca116100e957806345e653ca146101c45780634e58fdca146101e157806364e5dc2a146101fe57806373df16121461021b5780637fdd4b851461027f57610116565b806301ff62ab1461011b57806326987b601461015b5780632b52322c146101755780633d46b819146101a7575b600080fd5b6101476004803603604081101561013157600080fd5b50803590602001356001600160a01b0316610481565b604080519115158252519081900360200190f35b61016361048a565b60408051918252519081900360200190f35b6101476004803603606081101561018b57600080fd5b508035906001600160a01b036020820135169060400135610490565b610163600480360360208110156101bd57600080fd5b5035610516565b610163600480360360208110156101da57600080fd5b50356105c7565b610163600480360360208110156101f757600080fd5b50356105df565b6101636004803603602081101561021457600080fd5b50356105f4565b6102476004803603604081101561023157600080fd5b50803590602001356001600160a01b0316610609565b604051808260a080838360005b8381101561026c578181015183820152602001610254565b5050505090500191505060405180910390f35b6101476004803603606081101561029557600080fd5b508035906001600160a01b03602082013516906040013561068a565b610147600480360360208110156102c757600080fd5b50356107b0565b610163600480360360208110156102e457600080fd5b50356107c5565b6103086004803603602081101561030157600080fd5b50356107db565b005b6101636004803603602081101561032057600080fd5b50356107fe565b6101636004803603602081101561033d57600080fd5b5035610813565b6103706004803603604081101561035a57600080fd5b50803590602001356001600160a01b0316610828565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156103b457818101518382015260200161039c565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156103f35781810151838201526020016103db565b5050505090500194505050505060405180910390f35b6101636004803603602081101561041f57600080fd5b5035610875565b6101636004803603602081101561043c57600080fd5b503561089c565b610163600480360360a081101561045957600080fd5b50803590602081013590604081013590606081013590608001356001600160a01b0316610945565b60005b92915050565b60005481565b6000838152600460205260408120600781015443116104b357600091505061050f565b60006104be86610875565b905060dc6104d9836007015443610a3490919063ffffffff16565b118061050a57506104fe6104ed8787610a76565b600384015490630f42400003610afc565b6105088583610afc565b115b925050505b9392505050565b6000818060005411610568576040805162461bcd60e51b8152602060048201526016602482015275125b99195e081b9bdd081a5b9cdd185b9d1a585d195960521b604482015290519081900360640190fd5b610571816107b0565b6105b3576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b505060009081526002602052604090205490565b6000818152600460205260409020600601545b919050565b60009081526004602052604090206005015490565b60009081526004602052604090206002015490565b610611610e0e565b6000838152600460205260409020610627610e0e565b6040518060a001604052804381526020018360070154815260200183600301548152602001610670620f424061066a866002015442610a3490919063ffffffff16565b90610afc565b815260200161067f8787610a76565b905295945050505050565b6000838152600460205260408120826106d45760405162461bcd60e51b815260040180806020018281038252602a815260200180610eb3602a913960400191505060405180910390fd5b60088101546001600160a01b0316331461071f5760405162461bcd60e51b815260040180806020018281038252602a815260200180610e2d602a913960400191505060405180910390fd5b61072a858585610490565b156107a5577faf52b86a5d24cd265704bc55c6247be8d17819d1a6e274288e67c876d0f89a3d84826001015461075f88610875565b6003850154604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190a161079d8585610b55565b91505061050f565b506000949350505050565b60009081526001602052604090205460ff1690565b6000908152600460208190526040909120015490565b6000908152600160209081526040808320805460ff191690556002909152812055565b60009081526004602052604090206003015490565b60009081526004602052604090206001015490565b60608080806000604051908082528060200260200182016040528015610858578160200160208202803683370190505b506040805160008152602081019091529097909650945050505050565b6000818152600460205260408120600281015461050f90620f42409061066a904290610a34565b60008082116108ea576040805162461bcd60e51b81526020600482015260156024820152744e756d6265722063616e6e6f74206265207a65726f60581b604482015290519081900360640190fd5b600082600114156108ff5760009150506105da565b5b60008381526003602052604090205461091f57600192831c9201610900565b60008381526003602052604090205461050f9061093f83620f4240610afc565b90610bd2565b6000601e83116109865760405162461bcd60e51b815260040180806020018281038252603b815260200180610e57603b913960400191505060405180910390fd5b506000805481526004602081815260408084209092018890558254835281832060030187905582548352818320600501869055825483528183206006018590558254835281832060080180546001600160a01b0319166001600160a01b0386161790558254835281832043600190810160079092019190915583548452828420426002909101558354845290819052908220805460ff19168217905581549081019091555b95945050505050565b600061050f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610c2c565b60008281526004602090815260408083206007015481516bffffffffffffffffffffffff19606087901b16818501528251808203601401815260348201845280519085012060548201819052914060748083018290528451808403909101815260949092019093528051930192909220909190610af28161089c565b9695505050505050565b600082610b0b57506000610484565b82820282848281610b1857fe5b041461050f5760405162461bcd60e51b8152600401808060200182810382526021815260200180610e926021913960400191505060405180910390fd5b60008281526004602081815260408084206001810154855291829052832080546001600160a01b0319166001600160a01b0386161790559081015460038201546002830154610bba929190610bab904290610a34565b84600601548560050154610cc3565b6003820155610bc884610d43565b5060019392505050565b60008282018381101561050f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008184841115610cbb5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c80578181015183820152602001610c68565b50505050905090810190601f168015610cad5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082841015610cf857610cf1610ce7620f4240610ce18886610afc565b90610d6c565b8690600101610bd2565b9050610a2b565b82841115610d39576000610d20610d16620f4240610ce18987610afc565b8790600101610a34565b9050868111610d2f5786610d31565b805b915050610a2b565b5092949350505050565b600090815260046020526040902060018082018054820190554301600782015542600290910155565b600061050f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060008183610df85760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610c80578181015183820152602001610c68565b506000838581610e0457fe5b0495945050505050565b6040518060a00160405280600590602082028036833750919291505056fe46756e6374696f6e2063616e206f6e6c792062652063616c6c656420627920706f7320616464726573734465736972656420647261772074696d6520696e74657276616c2068617320746f20626520626967676572207468616e203330207365636f6e6473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743616c6c6572206d7573742068617665206174206c65617374206f6e65207374616b656420746f6b656ea26469706673582212206dfbd45c43e9035d2b9e202e217396b5e61fe3ab83ddb444c908e884d736659f64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canWin(uint256,address,uint256)": {
        "params": {
          "_index": "the index of the instance of lottery you want to interact with",
          "_user": "the address that is gonna get checked",
          "_weight": "number that will weight the random number, most likely will be the number of staked tokens"
        }
      },
      "claimRound(uint256,address,uint256)": {
        "params": {
          "_index": "the index of the instance of lottery you want to interact with",
          "_user": "address that will win the lottery",
          "_weight": "number that will weight the random number, most likely will be the number of staked tokens"
        }
      },
      "getCurrentDrawStartTime(uint256)": {
        "params": {
          "_index": "the index of the instance of lottery to be interact with"
        },
        "returns": {
          "_0": "timestamp of when current draw was instantiated"
        }
      },
      "getDesiredDrawInterval(uint256)": {
        "params": {
          "_index": "the index of the instance of lottery to be interact with"
        },
        "returns": {
          "_0": "desired draw interval of this instance"
        }
      },
      "getDifficulty(uint256)": {
        "params": {
          "_index": "the index of the instance of lottery to be interact with"
        },
        "returns": {
          "_0": "difficulty of current draw"
        }
      },
      "getDifficultyAdjustmentParameter(uint256)": {
        "params": {
          "_index": "the index of the instance of lottery to be interact with"
        },
        "returns": {
          "_0": "difficulty adjustment parameter"
        }
      },
      "getMicrosecondsSinceLastDraw(uint256)": {
        "params": {
          "_index": "the index of the instance of lottery to be interact with"
        },
        "returns": {
          "_0": "microseconds passed since last draw started"
        }
      },
      "getMinDifficulty(uint256)": {
        "params": {
          "_index": "the index of the instance of lottery to be interact with"
        },
        "returns": {
          "_0": "min difficulty of instance"
        }
      },
      "getRoundCount(uint256)": {
        "params": {
          "_index": "the index of the instance of lottery to be interact with"
        },
        "returns": {
          "_0": "how many rounds have happened"
        }
      },
      "instantiate(uint256,uint256,uint256,uint256,address)": {
        "params": {
          "_desiredDrawTimeInterval": "how often we want to elect a winner",
          "_difficultyAdjustmentParameter": "how quickly the difficulty gets updated according to the difference between time passed and desired draw time interval.",
          "_initialDifficulty": "starting difficulty",
          "_minDifficulty": "lower bound for difficulty parameter",
          "_posManagerAddress": "address of ProofOfStake that will use this instance"
        }
      },
      "log2ApproxTimes1M(uint256)": {
        "params": {
          "_num": "number to take log2 * 1M of"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canWin(uint256,address,uint256)": {
        "notice": "Check if address can win current round"
      },
      "claimRound(uint256,address,uint256)": {
        "notice": "Claim that _user won the round"
      },
      "getCurrentDrawStartTime(uint256)": {
        "notice": "Returns current draw time"
      },
      "getDesiredDrawInterval(uint256)": {
        "notice": "Returns desired draw interval"
      },
      "getDifficulty(uint256)": {
        "notice": "Returns current difficulty"
      },
      "getDifficultyAdjustmentParameter(uint256)": {
        "notice": "Returns difficulty adjustment parameter"
      },
      "getMicrosecondsSinceLastDraw(uint256)": {
        "notice": "Returns time since last draw started, in microseconds"
      },
      "getMinDifficulty(uint256)": {
        "notice": "Returns min difficulty"
      },
      "getRoundCount(uint256)": {
        "notice": "Returns the round count of this instance"
      },
      "instantiate(uint256,uint256,uint256,uint256,address)": {
        "notice": "Instantiates a Speed Bump structure"
      },
      "log2ApproxTimes1M(uint256)": {
        "notice": "Approximates log2 * 1M"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 934,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 938,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "active",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 942,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "log2tableTimes1M",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1602,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "instance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(LotteryCtx)1598_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(LotteryCtx)1598_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Lottery.LotteryCtx)",
        "numberOfBytes": "32",
        "value": "t_struct(LotteryCtx)1598_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LotteryCtx)1598_storage": {
        "encoding": "inplace",
        "label": "struct Lottery.LotteryCtx",
        "members": [
          {
            "astId": 1581,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "roundWinner",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 1583,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "roundCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1585,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "currentDrawStartTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1587,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "difficulty",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1589,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "minDifficulty",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1591,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "difficultyAdjustmentParameter",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1593,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "desiredDrawTimeInterval",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1595,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "currentGoalBlockNumber",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1597,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "posManagerAddress",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}