{
  "address": "0x2B58A366a8fe2bE06628B1F7E379A921A4c3C6cC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "split",
          "type": "uint256"
        }
      ],
      "name": "BeneficiaryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "beneficiaryReward",
          "type": "uint256"
        }
      ],
      "name": "Rewarded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_split",
          "type": "uint256"
        }
      ],
      "name": "addBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentNonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSubInstances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_blockSelectorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_workerAuthAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumDifficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialDifficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_difficultyAdjustmentParameter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetInterval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardManagerAddress",
          "type": "address"
        }
      ],
      "name": "instantiate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isConcerned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "produceBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8445c2c499d6ede9c9aa12c8efacc28e2fefa4b211a3258c560a24ac75b840d9",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x2B58A366a8fe2bE06628B1F7E379A921A4c3C6cC",
    "transactionIndex": 0,
    "gasUsed": "1326069",
    "logsBloom": "0x
    "blockHash": "0xd3d7af9d65308e570e3c15ff65c7001feacf3005b5def1149d1c5ffb339f989a",
    "transactionHash": "0x8445c2c499d6ede9c9aa12c8efacc28e2fefa4b211a3258c560a24ac75b840d9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7570038,
        "transactionHash": "0x8445c2c499d6ede9c9aa12c8efacc28e2fefa4b211a3258c560a24ac75b840d9",
        "address": "0x2B58A366a8fe2bE06628B1F7E379A921A4c3C6cC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd3d7af9d65308e570e3c15ff65c7001feacf3005b5def1149d1c5ffb339f989a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7570038,
        "transactionHash": "0x8445c2c499d6ede9c9aa12c8efacc28e2fefa4b211a3258c560a24ac75b840d9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000004b60d7fb1520000000000000000000000000000000000000000000000000025724e4d9ce43c0000000000000000000000000000000000000000000000005ccf962d7c956f8c95000000000000000000000000000000000000000000000000256d98401d32ea0000000000000000000000000000000000000000000000005ccf9ae38a1520de95",
        "logIndex": 1,
        "blockHash": "0xd3d7af9d65308e570e3c15ff65c7001feacf3005b5def1149d1c5ffb339f989a"
      }
    ],
    "blockNumber": 7570038,
    "cumulativeGasUsed": "1326069",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ba773a60123f2fe6dac6bfdc0faccc5c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beneficiaryReward\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_split\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSubInstances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockSelectorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_workerAuthAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_difficultyAdjustmentParameter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetInterval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardManagerAddress\",\"type\":\"address\"}],\"name\":\"instantiate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isConcerned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"produceBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getState(uint256,address)\":{\"params\":{\"_index\":\"index of instance\",\"_user\":\"address of user\"},\"returns\":{\"_0\":\"bool if user is eligible to produce next block\",\"_1\":\"address of user that was chosen to build the block\",\"_2\":\"current reward paid by the network for that block\",\"_3\":\"percentage of reward that goes to the user\"}},\"instantiate(address,address,address,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_blockSelectorAddress\":\"address of blockSelector contract\",\"_difficultyAdjustmentParameter\":\"how quickly the difficulty gets updated according to the difference between time passed and desired draw time interval.\",\"_rewardManagerAddress\":\"address containing the tokens that will be distributed\",\"_stakingAddress\":\"address of StakingInterface\",\"_targetInterval\":\"how often we want to elect a block producer\",\"_workerAuthAddress\":\"address of worker manager contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"produceBlock(uint256)\":{\"details\":\"this function can only be called by a worker, user never calls it directly\",\"params\":{\"_index\":\"the index of the instance of pos you want to interact with\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getState(uint256,address)\":{\"notice\":\"Get state of a particular instance\"},\"instantiate(address,address,address,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Instantiates a Proof of Stake\"},\"produceBlock(uint256)\":{\"notice\":\"Produce a block\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoS.sol\":\"PoS\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/CartesiMath.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title CartesiMath\\n/// @author Felipe Argento\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract CartesiMath {\\n    using SafeMath for uint256;\\n    mapping(uint256 => uint256) log2tableTimes1M;\\n\\n    constructor() {\\n        log2tableTimes1M[1] = 0;\\n        log2tableTimes1M[2] = 1000000;\\n        log2tableTimes1M[3] = 1584962;\\n        log2tableTimes1M[4] = 2000000;\\n        log2tableTimes1M[5] = 2321928;\\n        log2tableTimes1M[6] = 2584962;\\n        log2tableTimes1M[7] = 2807354;\\n        log2tableTimes1M[8] = 3000000;\\n        log2tableTimes1M[9] = 3169925;\\n        log2tableTimes1M[10] = 3321928;\\n        log2tableTimes1M[11] = 3459431;\\n        log2tableTimes1M[12] = 3584962;\\n        log2tableTimes1M[13] = 3700439;\\n        log2tableTimes1M[14] = 3807354;\\n        log2tableTimes1M[15] = 3906890;\\n        log2tableTimes1M[16] = 4000000;\\n        log2tableTimes1M[17] = 4087462;\\n        log2tableTimes1M[18] = 4169925;\\n        log2tableTimes1M[19] = 4247927;\\n        log2tableTimes1M[20] = 4321928;\\n        log2tableTimes1M[21] = 4392317;\\n        log2tableTimes1M[22] = 4459431;\\n        log2tableTimes1M[23] = 4523561;\\n        log2tableTimes1M[24] = 4584962;\\n        log2tableTimes1M[25] = 4643856;\\n        log2tableTimes1M[26] = 4700439;\\n        log2tableTimes1M[27] = 4754887;\\n        log2tableTimes1M[28] = 4807354;\\n        log2tableTimes1M[29] = 4857980;\\n        log2tableTimes1M[30] = 4906890;\\n        log2tableTimes1M[31] = 4954196;\\n        log2tableTimes1M[32] = 5000000;\\n        log2tableTimes1M[33] = 5044394;\\n        log2tableTimes1M[34] = 5087462;\\n        log2tableTimes1M[35] = 5129283;\\n        log2tableTimes1M[36] = 5169925;\\n        log2tableTimes1M[37] = 5209453;\\n        log2tableTimes1M[38] = 5247927;\\n        log2tableTimes1M[39] = 5285402;\\n        log2tableTimes1M[40] = 5321928;\\n        log2tableTimes1M[41] = 5357552;\\n        log2tableTimes1M[42] = 5392317;\\n        log2tableTimes1M[43] = 5426264;\\n        log2tableTimes1M[44] = 5459431;\\n        log2tableTimes1M[45] = 5491853;\\n        log2tableTimes1M[46] = 5523561;\\n        log2tableTimes1M[47] = 5554588;\\n        log2tableTimes1M[48] = 5584962;\\n        log2tableTimes1M[49] = 5614709;\\n        log2tableTimes1M[50] = 5643856;\\n        log2tableTimes1M[51] = 5672425;\\n        log2tableTimes1M[52] = 5700439;\\n        log2tableTimes1M[53] = 5727920;\\n        log2tableTimes1M[54] = 5754887;\\n        log2tableTimes1M[55] = 5781359;\\n        log2tableTimes1M[56] = 5807354;\\n        log2tableTimes1M[57] = 5832890;\\n        log2tableTimes1M[58] = 5857980;\\n        log2tableTimes1M[59] = 5882643;\\n        log2tableTimes1M[60] = 5906890;\\n        log2tableTimes1M[61] = 5930737;\\n        log2tableTimes1M[62] = 5954196;\\n        log2tableTimes1M[63] = 5977279;\\n        log2tableTimes1M[64] = 6000000;\\n        log2tableTimes1M[65] = 6022367;\\n        log2tableTimes1M[66] = 6044394;\\n        log2tableTimes1M[67] = 6066089;\\n        log2tableTimes1M[68] = 6087462;\\n        log2tableTimes1M[69] = 6108524;\\n        log2tableTimes1M[70] = 6129283;\\n        log2tableTimes1M[71] = 6149747;\\n        log2tableTimes1M[72] = 6169925;\\n        log2tableTimes1M[73] = 6189824;\\n        log2tableTimes1M[74] = 6209453;\\n        log2tableTimes1M[75] = 6228818;\\n        log2tableTimes1M[76] = 6247927;\\n        log2tableTimes1M[77] = 6266786;\\n        log2tableTimes1M[78] = 6285402;\\n        log2tableTimes1M[79] = 6303780;\\n        log2tableTimes1M[80] = 6321928;\\n        log2tableTimes1M[81] = 6339850;\\n        log2tableTimes1M[82] = 6357552;\\n        log2tableTimes1M[83] = 6375039;\\n        log2tableTimes1M[84] = 6392317;\\n        log2tableTimes1M[85] = 6409390;\\n        log2tableTimes1M[86] = 6426264;\\n        log2tableTimes1M[87] = 6442943;\\n        log2tableTimes1M[88] = 6459431;\\n        log2tableTimes1M[89] = 6475733;\\n        log2tableTimes1M[90] = 6491853;\\n        log2tableTimes1M[91] = 6507794;\\n        log2tableTimes1M[92] = 6523561;\\n        log2tableTimes1M[93] = 6539158;\\n        log2tableTimes1M[94] = 6554588;\\n        log2tableTimes1M[95] = 6569855;\\n        log2tableTimes1M[96] = 6584962;\\n        log2tableTimes1M[97] = 6599912;\\n        log2tableTimes1M[98] = 6614709;\\n        log2tableTimes1M[99] = 6629356;\\n        log2tableTimes1M[100] = 6643856;\\n        log2tableTimes1M[101] = 6658211;\\n        log2tableTimes1M[102] = 6672425;\\n        log2tableTimes1M[103] = 6686500;\\n        log2tableTimes1M[104] = 6700439;\\n        log2tableTimes1M[105] = 6714245;\\n        log2tableTimes1M[106] = 6727920;\\n        log2tableTimes1M[107] = 6741466;\\n        log2tableTimes1M[108] = 6754887;\\n        log2tableTimes1M[109] = 6768184;\\n        log2tableTimes1M[110] = 6781359;\\n        log2tableTimes1M[111] = 6794415;\\n        log2tableTimes1M[112] = 6807354;\\n        log2tableTimes1M[113] = 6820178;\\n        log2tableTimes1M[114] = 6832890;\\n        log2tableTimes1M[115] = 6845490;\\n        log2tableTimes1M[116] = 6857980;\\n        log2tableTimes1M[117] = 6870364;\\n        log2tableTimes1M[118] = 6882643;\\n        log2tableTimes1M[119] = 6894817;\\n        log2tableTimes1M[120] = 6906890;\\n        log2tableTimes1M[121] = 6918863;\\n        log2tableTimes1M[122] = 6930737;\\n        log2tableTimes1M[123] = 6942514;\\n        log2tableTimes1M[124] = 6954196;\\n        log2tableTimes1M[125] = 6965784;\\n        log2tableTimes1M[126] = 6977279;\\n        log2tableTimes1M[127] = 6988684;\\n        log2tableTimes1M[128] = 7000000;\\n    }\\n\\n    /// @notice Approximates log2 * 1M\\n    /// @param _num number to take log2 * 1M of\\n    function log2ApproxTimes1M(uint256 _num) public view returns (uint256) {\\n        require (_num > 0, \\\"Number cannot be zero\\\");\\n        uint256 leading = 0;\\n\\n        if (_num == 1) return 0;\\n\\n        while (_num > 128) {\\n           _num = _num >> 1;\\n           leading += 1;\\n       }\\n       return (leading.mul(uint256(1000000))).add(log2tableTimes1M[_num]);\\n    }\\n}\\n\",\"keccak256\":\"0x496a53dd1d169264fe58353fef5d283dfc8a78789757d32af69be41faaa97d6e\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Decorated.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\n\\ncontract Decorated {\\n    // This contract defines several modifiers but does not use\\n    // them - they will be used in derived contracts.\\n    modifier onlyBy(address user) {\\n        require(msg.sender == user, \\\"Cannot be called by user\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfter(uint256 time) {\\n        require(block.timestamp > time, \\\"Cannot be called now\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdbba019b8f7f93b212a5bbae402ee988321c4fa82ed2b4c9e55b4d7ddf35dcc3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Instantiator.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\ninterface Instantiator {\\n\\n    modifier onlyInstantiated(uint256 _index) virtual;\\n\\n    modifier onlyActive(uint256 _index) virtual;\\n\\n    modifier increasesNonce(uint256 _index) virtual;\\n\\n    function isActive(uint256 _index) external view returns (bool);\\n\\n    function getNonce(uint256 _index) external view returns (uint256);\\n\\n    function isConcerned(uint256 _index, address _user) external view returns (bool);\\n\\n    function getSubInstances(uint256 _index, address) external view returns (address[] memory _addresses, uint256[] memory _indices);\\n}\\n\",\"keccak256\":\"0x416e612dc09b10765de32ec06cf0a7ee4e050e16db8bf3b8ad832a6082b7dfd6\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/InstantiatorImpl.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Instantiator.sol\\\";\\n\\nabstract contract InstantiatorImpl is Instantiator {\\n    uint256 public currentIndex = 0;\\n\\n    mapping(uint256 => bool) internal active;\\n    mapping(uint256 => uint256) internal nonce;\\n\\n    modifier onlyInstantiated(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        _;\\n    }\\n\\n    modifier onlyActive(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        require(isActive(_index), \\\"Index inactive\\\");\\n        _;\\n    }\\n\\n    modifier increasesNonce(uint256 _index) override {\\n        nonce[_index]++;\\n        _;\\n    }\\n\\n    function isActive(uint256 _index) public override view returns (bool) {\\n        return (active[_index]);\\n    }\\n\\n    function getNonce(uint256 _index)\\n        public\\n        override\\n        view\\n        onlyActive(_index)\\n        returns (uint256 currentNonce)\\n    {\\n        return nonce[_index];\\n    }\\n\\n    function deactivate(uint256 _index) internal {\\n        active[_index] = false;\\n        nonce[_index] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8f8e29b807e5c55198206a370b4d8751cbd98a663e3f89faff274e2f9d7cae75\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/WorkerAuthManager.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title WorkerAuthManager\\n/// @author Danilo Tuler\\npragma solidity ^0.7.0;\\n\\ninterface WorkerAuthManager {\\n    /// @notice Gives worker permission to act on a DApp\\n    /// @param _workerAddress address of the worker node to given permission\\n    /// @param _dappAddress address of the dapp that permission will be given to\\n    function authorize(address _workerAddress, address _dappAddress) external;\\n\\n    /// @notice Removes worker's permission to act on a DApp\\n    /// @param _workerAddress address of the proxy that will lose permission\\n    /// @param _dappAddresses addresses of dapps that will lose permission\\n    function deauthorize(address _workerAddress, address _dappAddresses)\\n        external;\\n\\n    /// @notice Returns is the dapp is authorized to be called by that worker\\n    /// @param _workerAddress address of the worker\\n    /// @param _dappAddress address of the DApp\\n    function isAuthorized(address _workerAddress, address _dappAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Get the owner of the worker node\\n    /// @param workerAddress address of the worker node\\n    function getOwner(address workerAddress) external view returns (address);\\n\\n    /// @notice A DApp has been authorized by a user for a worker\\n    event Authorization(\\n        address indexed user,\\n        address indexed worker,\\n        address indexed dapp\\n    );\\n\\n    /// @notice A DApp has been deauthorized by a user for a worker\\n    event Deauthorization(\\n        address indexed user,\\n        address indexed worker,\\n        address indexed dapp\\n    );\\n}\\n\",\"keccak256\":\"0x90ce24f4e55dc98d22355f3929981a7b85ba39607becb7602f987d057c1d10b2\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/BlockSelector.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Block Selector\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"@cartesi/util/contracts/CartesiMath.sol\\\";\\nimport \\\"@cartesi/util/contracts/InstantiatorImpl.sol\\\";\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\n\\ncontract BlockSelector is InstantiatorImpl, Decorated, CartesiMath {\\n    using SafeMath for uint256;\\n\\n    struct BlockSelectorCtx {\\n        mapping(uint256 => address) blockProducer; // block index to block producer\\n        uint256 blockCount; // how many blocks have been created\\n        uint256 lastBlockTimestamp; // timestamp of when current selection started\\n        uint256 difficulty; // difficulty parameter defines how big the interval will be\\n        uint256 minDifficulty; // lower bound for difficulty\\n        uint256 difficultyAdjustmentParameter; // how fast the difficulty gets adjusted to reach the desired interval, number * 1000000\\n        uint256 targetInterval; // desired block selection interval, used to tune difficulty\\n        uint256 currentGoalBlockNumber; // main chain block number which will decide current random target\\n\\n        address posManagerAddress;\\n\\n    }\\n\\n    mapping(uint256 => BlockSelectorCtx) internal instance;\\n\\n    event BlockProduced(\\n        uint256 indexed index,\\n        address indexed producer,\\n        uint256 blockNumber,\\n        uint256 roundDuration,\\n        uint256 difficulty,\\n        uint256 targetInterval\\n    );\\n\\n    /// @notice Instantiates a BlockSelector structure\\n    /// @param _minDifficulty lower bound for difficulty parameter\\n    /// @param _initialDifficulty starting difficulty\\n    /// @param _difficultyAdjustmentParameter how quickly the difficulty gets updated\\n    /// according to the difference between time passed and target interval.\\n    /// @param _targetInterval how often we want produce blocks\\n    /// @param _posManagerAddress address of ProofOfStake that will use this instance\\n    function instantiate(\\n        uint256 _minDifficulty,\\n        uint256 _initialDifficulty,\\n        uint256 _difficultyAdjustmentParameter,\\n        uint256 _targetInterval,\\n        address _posManagerAddress\\n    ) public returns (uint256)\\n    {\\n        require(\\n            _targetInterval > 30,\\n            \\\"Target interval has to be bigger than 30 seconds\\\"\\n        );\\n\\n        instance[currentIndex].minDifficulty = _minDifficulty;\\n        instance[currentIndex].difficulty = _initialDifficulty;\\n        instance[currentIndex].difficultyAdjustmentParameter = _difficultyAdjustmentParameter;\\n        instance[currentIndex].targetInterval = _targetInterval;\\n        instance[currentIndex].posManagerAddress = _posManagerAddress;\\n\\n        instance[currentIndex].currentGoalBlockNumber = block.number + 1; // goal has to be in the future, so miner cant manipulate (easily)\\n        instance[currentIndex].lastBlockTimestamp = block.timestamp; // first selection starts when the instance is created\\n\\n        active[currentIndex] = true;\\n        return currentIndex++;\\n    }\\n\\n    /// @notice Calculates the log of the random number between the goal and callers address\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user address to calculate log of random\\n    /// @return log of random number between goal and callers address * 1M\\n    function getLogOfRandom(uint256 _index, address _user) internal view returns (uint256) {\\n        bytes32 currentGoal = blockhash(instance[_index].currentGoalBlockNumber);\\n        bytes32 hashedAddress = keccak256(abi.encodePacked(_user));\\n        uint256 distance = uint256(keccak256(abi.encodePacked(hashedAddress, currentGoal)));\\n\\n        return CartesiMath.log2ApproxTimes1M(distance);\\n    }\\n\\n    /// @notice Produces a block\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user address that has the right to produce block\\n    /// @param _weight number that will weight the random number, will be the number of staked tokens\\n    function produceBlock(uint256 _index, address _user, uint256 _weight) public returns (bool) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        require(_weight > 0, \\\"Caller can't have zero staked tokens\\\");\\n        require(msg.sender == bsc.posManagerAddress, \\\"Function can only be called by pos address\\\");\\n\\n        if (canProduceBlock(_index, _user, _weight)) {\\n            emit BlockProduced(\\n                _index,\\n                _user,\\n                bsc.blockCount,\\n                getMicrosecondsSinceLastBlock(_index),\\n                bsc.difficulty,\\n                bsc.targetInterval\\n            );\\n\\n            return _blockProduced(_index, _user);\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Check if address is allowed to produce block\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user the address that is gonna get checked\\n    /// @param _weight number that will weight the random number, most likely will be the number of staked tokens\\n    function canProduceBlock(uint256 _index, address _user, uint256 _weight) public view returns (bool) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        // cannot produce if block selector goal hasnt been decided yet\\n        if (block.number <= bsc.currentGoalBlockNumber) {\\n            return false;\\n        }\\n\\n        uint256 time = getMicrosecondsSinceLastBlock(_index);\\n\\n        // cannot get hash of block if its older than 256, we set 220 to avoid edge cases\\n        // new goal cannot be in the past, otherwise user could \\\"choose it\\\"\\n        return (\\n            (block.number).sub(bsc.currentGoalBlockNumber) > 220 ||\\n            (_weight.mul(time)) > bsc.difficulty.mul((256000000 - getLogOfRandom(_index, _user)))\\n        );\\n    }\\n\\n    /// @notice Block produced, declare producer and adjust difficulty\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user address of user that won the round\\n    function _blockProduced(uint256 _index, address _user) private returns (bool) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n        // declare producer\\n        bsc.blockProducer[bsc.blockCount] = _user;\\n\\n        // adjust difficulty\\n        bsc.difficulty = getNewDifficulty(\\n            bsc.minDifficulty,\\n            bsc.difficulty,\\n            (block.timestamp).sub(bsc.lastBlockTimestamp),\\n            bsc.targetInterval,\\n            bsc.difficultyAdjustmentParameter\\n        );\\n\\n        _reset(_index);\\n        return true;\\n    }\\n\\n    /// @notice Reset instance, advancing round and choosing new goal\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    function _reset(uint256 _index) private {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        bsc.blockCount++;\\n        bsc.currentGoalBlockNumber = block.number + 1;\\n        bsc.lastBlockTimestamp = block.timestamp;\\n    }\\n\\n    /// @notice Calculates new difficulty parameter\\n    /// @param _minDiff minimum difficulty of instance\\n    /// @param _oldDiff is the difficulty of previous round\\n    /// @param _timePassed is how long the previous round took\\n    /// @param _targetInterval is how long a round is supposed to take\\n    /// @param _adjustmentParam is how fast the difficulty gets adjusted,\\n    ///         should be number * 1000000\\n    function getNewDifficulty(\\n        uint256 _minDiff,\\n        uint256 _oldDiff,\\n        uint256 _timePassed,\\n        uint256 _targetInterval,\\n        uint256 _adjustmentParam\\n    )\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        if (_timePassed < _targetInterval) {\\n            return _oldDiff.add(_oldDiff.mul(_adjustmentParam).div(1000000) + 1);\\n        } else if (_timePassed > _targetInterval) {\\n            uint256 newDiff = _oldDiff.sub(_oldDiff.mul(_adjustmentParam).div(1000000) + 1);\\n\\n            return newDiff > _minDiff ? newDiff : _minDiff;\\n        }\\n\\n        return _oldDiff;\\n    }\\n\\n    /// @notice Returns the number of blocks\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return number of blocks\\n    function getBlockCount(uint256 _index) public view returns (uint256) {\\n        return instance[_index].blockCount;\\n    }\\n\\n    /// @notice Returns last block timestamp\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return timestamp of when last block was created\\n    function getLastBlockTimestamp(uint256 _index) public view returns (uint256) {\\n        return instance[_index].lastBlockTimestamp;\\n    }\\n\\n    /// @notice Returns current difficulty\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return difficulty of current selection\\n    function getDifficulty(uint256 _index) public view returns (uint256) {\\n        return instance[_index].difficulty;\\n    }\\n\\n    /// @notice Returns min difficulty\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return min difficulty of instance\\n    function getMinDifficulty(uint256 _index) public view returns (uint256) {\\n        return instance[_index].minDifficulty;\\n    }\\n\\n    /// @notice Returns difficulty adjustment parameter\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return difficulty adjustment parameter\\n    function getDifficultyAdjustmentParameter(\\n        uint256 _index\\n    )\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        return instance[_index].difficultyAdjustmentParameter;\\n    }\\n\\n    /// @notice Returns target interval\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return target interval\\n    function getTargetInterval(uint256 _index) public view returns (uint256) {\\n        return instance[_index].targetInterval;\\n    }\\n\\n    /// @notice Returns time since last selection started, in microseconds\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return microseconds passed since last selection started\\n    function getMicrosecondsSinceLastBlock(uint256 _index) public view returns (uint256) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        // time since selection started times 1e6 (microseconds)\\n        return ((block.timestamp).sub(bsc.lastBlockTimestamp)).mul(1000000);\\n    }\\n\\n    function getState(uint256 _index, address _user)\\n    public view returns (uint256[5] memory _uintValues) {\\n        BlockSelectorCtx storage i = instance[_index];\\n\\n        uint256[5] memory uintValues = [\\n            block.number,\\n            i.currentGoalBlockNumber,\\n            i.difficulty,\\n            ((block.timestamp).sub(i.lastBlockTimestamp)).mul(1000000), // time passed\\n            getLogOfRandom(_index, _user)\\n        ];\\n\\n        return uintValues;\\n    }\\n\\n    function isConcerned(uint256, address) public override pure returns (bool) {\\n        return false; // isConcerned is only for the main concern (PoS)\\n    }\\n\\n    function getSubInstances(uint256, address)\\n        public override pure returns (address[] memory _addresses,\\n            uint256[] memory _indices)\\n    {\\n        address[] memory a;\\n        uint256[] memory i;\\n\\n        a = new address[](0);\\n        i = new uint256[](0);\\n\\n        return (a, i);\\n    }\\n}\\n\",\"keccak256\":\"0x6f136c0eaec8d6ce712857f795236d7204ab91e1b77d3fdf601f81cc34ee2489\",\"license\":\"Apache-2.0\"},\"contracts/PoS.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Proof of Stake\\n/// @author Felipe Argento\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@cartesi/util/contracts/InstantiatorImpl.sol\\\";\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\nimport \\\"@cartesi/util/contracts/WorkerAuthManager.sol\\\";\\n\\nimport \\\"./Staking.sol\\\";\\nimport \\\"./BlockSelector.sol\\\";\\nimport \\\"./RewardManager.sol\\\";\\n\\ncontract PoS is Ownable, InstantiatorImpl, Decorated {\\n    using SafeMath for uint256;\\n\\n    uint256 constant SPLIT_BASE = 10000;\\n\\n    mapping(address => bool) usedRM; // RewardManagers have to be unique to each\\n                                     // instance.\\n\\n    struct PoSCtx {\\n        mapping(address => address) beneficiaryMap;\\n        mapping(address => uint256) splitMap;\\n        uint256 blockSelectorIndex;\\n        BlockSelector blockSelector;\\n        Staking staking;\\n        RewardManager rewardManager;\\n        WorkerAuthManager workerAuth;\\n    }\\n\\n    mapping(uint256 => PoSCtx) internal instance;\\n\\n    event Rewarded(\\n        uint256 indexed index,\\n        address indexed worker,\\n        address indexed user,\\n        address beneficiary,\\n        uint256 userReward,\\n        uint256 beneficiaryReward\\n    );\\n\\n    event BeneficiaryAdded(\\n        uint256 indexed index,\\n        address indexed user,\\n        address indexed beneficiary,\\n        uint256 split\\n    );\\n\\n    function addBeneficiary(\\n        uint256 _index,\\n        address _beneficiary,\\n        uint256 _split\\n    ) public {\\n        PoSCtx storage pos = instance[_index];\\n\\n        require(_split <= SPLIT_BASE, \\\"split has to be less than 100%\\\");\\n\\n        pos.beneficiaryMap[msg.sender] = _beneficiary;\\n        pos.splitMap[msg.sender] = SPLIT_BASE.sub(_split);\\n\\n        emit BeneficiaryAdded(_index, msg.sender, _beneficiary, _split);\\n    }\\n\\n    /// @notice Instantiates a Proof of Stake\\n    /// @param _stakingAddress address of StakingInterface\\n    /// @param _blockSelectorAddress address of blockSelector contract\\n    /// @param _workerAuthAddress address of worker manager contract\\n    /// @param _difficultyAdjustmentParameter how quickly the difficulty gets updated\\n    /// according to the difference between time passed and desired draw time interval.\\n    /// @param _targetInterval how often we want to elect a block producer\\n    /// @param _rewardManagerAddress address containing the tokens that will be distributed\\n    function instantiate(\\n        address _stakingAddress,\\n        address _blockSelectorAddress,\\n        address _workerAuthAddress,\\n        uint256 _minimumDifficulty,\\n        uint256 _initialDifficulty,\\n        uint256 _difficultyAdjustmentParameter,\\n        uint256 _targetInterval,\\n        address _rewardManagerAddress\\n    ) public onlyOwner() returns (uint256) {\\n\\n        require(\\n            !usedRM[_rewardManagerAddress],\\n            \\\"This RewardManager address has been used by another instance\\\"\\n        );\\n        usedRM[_rewardManagerAddress] = true;\\n\\n        // index is incremented at the beggining to stop reentrancy possibilities\\n        // TODO: study using ReentrancyGuard contract\\n        currentIndex++;\\n\\n        instance[currentIndex - 1].staking = Staking(_stakingAddress);\\n        instance[currentIndex - 1].blockSelector = BlockSelector(_blockSelectorAddress);\\n        instance[currentIndex - 1].rewardManager = RewardManager(\\n            _rewardManagerAddress\\n        );\\n        instance[currentIndex - 1].workerAuth = WorkerAuthManager(\\n            _workerAuthAddress\\n        );\\n\\n        active[currentIndex - 1] = true;\\n\\n        instance[currentIndex - 1].blockSelectorIndex = instance[currentIndex -1]\\n            .blockSelector\\n            .instantiate(\\n            _minimumDifficulty,\\n            _initialDifficulty,\\n            _difficultyAdjustmentParameter,\\n            _targetInterval,\\n            address(this)\\n        );\\n\\n        return currentIndex - 1;\\n    }\\n\\n    /// @notice Produce a block\\n    /// @param _index the index of the instance of pos you want to interact with\\n    /// @dev this function can only be called by a worker, user never calls it directly\\n    function produceBlock(uint256 _index) public returns (bool) {\\n        PoSCtx storage pos = instance[_index];\\n\\n        require(\\n            pos.workerAuth.isAuthorized(msg.sender, address(this)),\\n            \\\"msg.sender is not authorized to make this call\\\"\\n        );\\n\\n        address user = pos.workerAuth.getOwner(msg.sender);\\n        address beneficiary = pos.beneficiaryMap[user];\\n\\n        uint256 userSplit = pos.splitMap[user];\\n        uint256 beneficiarySplit = SPLIT_BASE.sub(userSplit);\\n\\n        require(\\n            pos.blockSelector.produceBlock(\\n                pos.blockSelectorIndex,\\n                user,\\n                pos.staking.getStakedBalance(user)\\n            ),\\n            \\\"User couldnt produce a block successfully\\\"\\n        );\\n\\n        uint256 currentReward = pos.rewardManager.getCurrentReward();\\n\\n        if (beneficiary == address(0) || userSplit == SPLIT_BASE) {\\n            pos.rewardManager.reward(user, currentReward);\\n            emit Rewarded(\\n                _index,\\n                msg.sender,\\n                user,\\n                beneficiary,\\n                currentReward,\\n                0\\n            );\\n        } else if (beneficiarySplit == SPLIT_BASE) {\\n            pos.rewardManager.reward(beneficiary, currentReward);\\n            emit Rewarded(\\n                _index,\\n                msg.sender,\\n                user,\\n                beneficiary,\\n                0,\\n                currentReward\\n            );\\n        } else {\\n            uint256 bSplit = currentReward.mul(beneficiarySplit).div(SPLIT_BASE);\\n            uint256 uSplit = currentReward.sub(bSplit);\\n\\n            pos.rewardManager.reward(beneficiary, bSplit);\\n            pos.rewardManager.reward(user, uSplit);\\n            emit Rewarded(\\n                _index,\\n                msg.sender,\\n                user,\\n                beneficiary,\\n                uSplit,\\n                bSplit\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Get state of a particular instance\\n    /// @param _index index of instance\\n    /// @param _user address of user\\n    /// @return bool if user is eligible to produce next block\\n    /// @return address of user that was chosen to build the block\\n    /// @return current reward paid by the network for that block\\n    /// @return percentage of reward that goes to the user\\n    function getState(uint256 _index, address _user)\\n        public\\n        view\\n        returns (\\n            bool,\\n            address,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        PoSCtx storage pos = instance[_index];\\n        return (\\n            pos.blockSelector.canProduceBlock(\\n                pos.blockSelectorIndex,\\n                _user,\\n                pos.staking.getStakedBalance(_user)\\n            ),\\n            _user,\\n            pos.rewardManager.getCurrentReward(),\\n            pos.splitMap[_user]\\n        );\\n    }\\n\\n    function isConcerned(uint256 _index, address _user)\\n        public\\n        override\\n        view\\n        returns (bool)\\n    {\\n        PoSCtx storage pos = instance[_index];\\n        return pos.staking.getStakedBalance(_user) > 0;\\n    }\\n\\n    function getSubInstances(uint256 _index, address)\\n        public\\n        override\\n        view\\n        returns (address[] memory _addresses, uint256[] memory _indices)\\n    {\\n        PoSCtx storage pos = instance[_index];\\n\\n        address[] memory a;\\n        uint256[] memory i;\\n\\n        a = new address[](1);\\n        i = new uint256[](1);\\n\\n        a[0] = address(pos.blockSelector);\\n        i[0] = pos.blockSelectorIndex;\\n        return (a, i);\\n    }\\n}\\n\",\"keccak256\":\"0x23e647e0335e091f1df2e51c3bedc336676c2b1ca709d8e1facdf7d08979c117\",\"license\":\"Apache-2.0\"},\"contracts/RewardManager.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title RewardManager\\n/// @author Felipe Argento\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract RewardManager {\\n    using SafeMath for uint256;\\n\\n    uint256 minReward;\\n    uint256 maxReward;\\n    uint256 distNumerator;\\n    uint256 distDenominator;\\n    address operator;\\n    IERC20 ctsi;\\n\\n    /// @notice Creates contract\\n    /// @param _operator address of the operator\\n    /// @param _ctsiAddress address of token instance being used\\n    /// @param _maxReward maximum reward that this contract pays\\n    /// @param _minReward minimum reward that this contract pays\\n    /// @param _distNumerator multiplier factor to define reward amount\\n    /// @param _distDenominator dividing factor to define reward amount\\n    constructor(\\n        address _operator,\\n        address _ctsiAddress,\\n        uint256 _maxReward,\\n        uint256 _minReward,\\n        uint256 _distNumerator,\\n        uint256 _distDenominator\\n    ) {\\n\\n        operator = _operator;\\n        ctsi = IERC20(_ctsiAddress);\\n\\n        minReward = _minReward;\\n        maxReward = _maxReward;\\n        distNumerator = _distNumerator;\\n        distDenominator = _distDenominator;\\n    }\\n\\n    /// @notice Rewards address\\n    /// @param _address address be rewarded\\n    /// @param _amount reward\\n    /// @dev only the pos contract can call this\\n    function reward(address _address, uint256 _amount) public {\\n        require(msg.sender == operator, \\\"Only the operator contract can call this function\\\");\\n\\n        ctsi.transfer(_address, _amount);\\n    }\\n\\n    /// @notice Get RewardManager's balance\\n    function getBalance() public view returns (uint256) {\\n        return ctsi.balanceOf(address(this));\\n    }\\n\\n    /// @notice Get current reward amount\\n    function getCurrentReward() public view returns (uint256) {\\n        uint256 cReward = (getBalance().mul(distNumerator)).div(distDenominator);\\n        cReward = cReward > minReward? cReward : minReward;\\n        cReward = cReward > maxReward? maxReward : cReward;\\n\\n        return cReward > getBalance()? getBalance() : cReward;\\n    }\\n}\\n\",\"keccak256\":\"0xd18bd6629a23e3250581adf261763c58bc82934b78ec817c58db1c01f7523819\",\"license\":\"Apache-2.0\"},\"contracts/Staking.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface staking contract\\npragma solidity ^0.7.0;\\n\\ninterface Staking {\\n\\n    /// @notice Returns total amount of tokens counted as stake\\n    /// @param _userAddress user to retrieve staked balance from\\n    /// @return finalized staked of _userAddress\\n    function getStakedBalance(\\n        address _userAddress) external view returns (uint256);\\n\\n    /// @notice Returns the timestamp when next deposit can be finalized\\n    /// @return timestamp of when finalizeStakes() is callable\\n    function getMaturingTimestamp(address _userAddress) external view returns (uint256);\\n\\n    /// @notice Returns the timestamp when next withdraw can be finalized\\n    /// @return timestamp of when finalizeWithdraw() is callable\\n    function getReleasingTimestamp(address _userAddress) external view returns (uint256);\\n\\n\\n    /// @notice Returns the balance waiting/ready to be matured\\n    /// @return amount that will get staked after finalization\\n    function getMaturingBalance(address _userAddress) external view  returns (uint256);\\n\\n    /// @notice Returns the balance waiting/ready to be released\\n    /// @return amount that will get withdrew after finalization\\n    function getReleasingBalance(address _userAddress) external view  returns (uint256);\\n\\n\\n    /// @notice Deposit CTSI to be staked. The money will turn into staked\\n    ///         balance after timeToStake days\\n    /// @param _amount The amount of tokens that are gonna be deposited.\\n    function stake(uint256 _amount) external;\\n\\n    /// @notice Remove tokens from staked balance. The money can\\n    ///         be released after timeToRelease seconds, if the\\n    ///         function withdraw is called.\\n    /// @param _amount The amount of tokens that are gonna be unstaked.\\n    function unstake(uint256 _amount) external;\\n\\n    /// @notice Transfer tokens to user's wallet.\\n    /// @param _amount The amount of tokens that are gonna be transferred.\\n    function withdraw(uint256 _amount) external;\\n\\n    // events\\n    /// @notice CTSI tokens were deposited, they count as stake after _maturationDate\\n    /// @param user address of msg.sender\\n    /// @param amount amount deposited for staking\\n    /// @param maturationDate date when the stake can be finalized\\n    event Stake(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 maturationDate\\n    );\\n\\n    /// @notice Unstake tokens, moving them to releasing structure\\n    /// @param user address of msg.sender\\n    /// @param amount amount of tokens to be released\\n    /// @param maturationDate date when the tokens can be withdrew\\n    event Unstake(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 maturationDate\\n    );\\n\\n    /// @notice Withdraw process was finalized\\n    /// @param user address of msg.sender\\n    /// @param amount amount of tokens withdrawn\\n    event Withdraw(\\n        address indexed user,\\n        uint256 amount\\n    );\\n}\\n\\n\",\"keccak256\":\"0x54a7b59b2be2d325bdf6d3885d1d2d7a8ec1c0dab07a37c8861c7814f384a6e2\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6080604052600060015534801561001557600080fd5b50600061002061006f565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610073565b3390565b611695806100826000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80637a32cf38116100715780637a32cf38146101ed57806382afd23b1461021f5780638da5cb5b1461023c578063a5a6cd0b14610260578063c526656c1461027d578063f2fde38b14610342576100b4565b806301ff62ab146100b957806326987b60146100f95780633d46b819146101135780636c9db77314610130578063715018a61461018757806373df161214610191575b600080fd5b6100e5600480360360408110156100cf57600080fd5b50803590602001356001600160a01b0316610368565b604080519115158252519081900360200190f35b610101610401565b60408051918252519081900360200190f35b6101016004803603602081101561012957600080fd5b5035610407565b610101600480360361010081101561014757600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359160808201359160a08101359160c08201359160e00135166104b8565b61018f6107ee565b005b6101bd600480360360408110156101a757600080fd5b50803590602001356001600160a01b03166108a2565b6040805194151585526001600160a01b039093166020850152838301919091526060830152519081900360800190f35b61018f6004803603606081101561020357600080fd5b508035906001600160a01b036020820135169060400135610a64565b6100e56004803603602081101561023557600080fd5b5035610b5b565b610244610b70565b604080516001600160a01b039092168252519081900360200190f35b6100e56004803603602081101561027657600080fd5b5035610b7f565b6102a96004803603604081101561029357600080fd5b50803590602001356001600160a01b03166111d8565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156102ed5781810151838201526020016102d5565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561032c578181015183820152602001610314565b5050505090500194505050505060405180910390f35b61018f6004803603602081101561035857600080fd5b50356001600160a01b0316611297565b60008281526005602090815260408083206004808201548351633a02a42d60e01b81526001600160a01b03888116938201939093529351929486949290911692633a02a42d926024808201939291829003018186803b1580156103ca57600080fd5b505afa1580156103de573d6000803e3d6000fd5b505050506040513d60208110156103f457600080fd5b5051119150505b92915050565b60015481565b6000818060015411610459576040805162461bcd60e51b8152602060048201526016602482015275125b99195e081b9bdd081a5b9cdd185b9d1a585d195960521b604482015290519081900360640190fd5b61046281610b5b565b6104a4576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b505060009081526003602052604090205490565b60006104c26113a1565b6000546001600160a01b03908116911614610524576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03821660009081526004602052604090205460ff161561057c5760405162461bcd60e51b815260040180806020018281038252603c8152602001806115ac603c913960400191505060405180910390fd5b600160046000846001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555088600560006001805403815260200190815260200160002060040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600560006001805403815260200190815260200160002060030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600560006001805403815260200190815260200160002060050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600560006001805403815260200190815260200160002060060160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001600260006001805403815260200190815260200160002060006101000a81548160ff021916908315150217905550600560006001805403815260200190815260200160002060030160009054906101000a90046001600160a01b03166001600160a01b031663f0d2a38c87878787306040518663ffffffff1660e01b815260040180868152602001858152602001848152602001838152602001826001600160a01b0316815260200195505050505050602060405180830381600087803b15801561079457600080fd5b505af11580156107a8573d6000803e3d6000fd5b505050506040513d60208110156107be57600080fd5b50516001805460001990810160009081526005602052604090206002019290925554019998505050505050505050565b6107f66113a1565b6000546001600160a01b03908116911614610858576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000828152600560209081526040808320600381015460028201546004808401548551633a02a42d60e01b81526001600160a01b038a8116938201939093529551889788978897968516956359dc826c9590948d94911692633a02a42d9260248082019391829003018186803b15801561091b57600080fd5b505afa15801561092f573d6000803e3d6000fd5b505050506040513d602081101561094557600080fd5b5051604080516001600160e01b031960e087901b16815260048101949094526001600160a01b0390921660248401526044830152516064808301926020929190829003018186803b15801561099957600080fd5b505afa1580156109ad573d6000803e3d6000fd5b505050506040513d60208110156109c357600080fd5b505160058201546040805163457642a160e11b8152905189926001600160a01b031691638aec8542916004808301926020929190829003018186803b158015610a0b57600080fd5b505afa158015610a1f573d6000803e3d6000fd5b505050506040513d6020811015610a3557600080fd5b50516001600160a01b039890981660009081526001939093016020526040909220549098919750945092505050565b6000838152600560205260409020612710821115610ac9576040805162461bcd60e51b815260206004820152601e60248201527f73706c69742068617320746f206265206c657373207468616e20313030250000604482015290519081900360640190fd5b33600090815260208290526040902080546001600160a01b0319166001600160a01b038516179055610afd612710836113a5565b33600081815260018401602090815260409182902093909355805185815290516001600160a01b0387169388927fa5b08588c71d0e642d3278b37062c16e87cffd2a616056a2cbd3ec5da2eba6f7929081900390910190a450505050565b60009081526002602052604090205460ff1690565b6000546001600160a01b031690565b6000818152600560209081526040808320600681015482516332f256cf60e11b8152336004820152306024820152925191936001600160a01b03909116926365e4ad9e9260448083019392829003018186803b158015610bde57600080fd5b505afa158015610bf2573d6000803e3d6000fd5b505050506040513d6020811015610c0857600080fd5b5051610c455760405162461bcd60e51b815260040180806020018281038252602e815260200180611609602e913960400191505060405180910390fd5b60068101546040805163fa54416160e01b815233600482015290516000926001600160a01b03169163fa544161916024808301926020929190829003018186803b158015610c9257600080fd5b505afa158015610ca6573d6000803e3d6000fd5b505050506040513d6020811015610cbc57600080fd5b50516001600160a01b0380821660009081526020858152604080832054600188019092528220549394509091169190610cf7612710836113a5565b6003860154600287015460048089015460408051633a02a42d60e01b81526001600160a01b038b811694820194909452905195965093821694635378014f948a9390921691633a02a42d916024808301926020929190829003018186803b158015610d6157600080fd5b505afa158015610d75573d6000803e3d6000fd5b505050506040513d6020811015610d8b57600080fd5b5051604080516001600160e01b031960e087901b16815260048101949094526001600160a01b03909216602484015260448301525160648083019260209291908290030181600087803b158015610de157600080fd5b505af1158015610df5573d6000803e3d6000fd5b505050506040513d6020811015610e0b57600080fd5b5051610e485760405162461bcd60e51b81526004018080602001828103825260298152602001806116376029913960400191505060405180910390fd5b60058501546040805163457642a160e11b815290516000926001600160a01b031691638aec8542916004808301926020929190829003018186803b158015610e8f57600080fd5b505afa158015610ea3573d6000803e3d6000fd5b505050506040513d6020811015610eb957600080fd5b505190506001600160a01b0384161580610ed4575061271083145b15610f9f576005860154604080516310b3879160e11b81526001600160a01b03888116600483015260248201859052915191909216916321670f2291604480830192600092919082900301818387803b158015610f3057600080fd5b505af1158015610f44573d6000803e3d6000fd5b5050604080516001600160a01b03888116825260208201869052600082840152915191891693503392508b917f9be4572c785840a37a06ca21b0ca3e30eb45de65547561091bf6f0eede483b909181900360600190a46111ca565b61271082141561106f576005860154604080516310b3879160e11b81526001600160a01b03878116600483015260248201859052915191909216916321670f2291604480830192600092919082900301818387803b15801561100057600080fd5b505af1158015611014573d6000803e3d6000fd5b5050604080516001600160a01b03888116825260006020830152818301869052915191891693503392508b917f9be4572c785840a37a06ca21b0ca3e30eb45de65547561091bf6f0eede483b909181900360600190a46111ca565b600061108761271061108184866113ee565b90611447565b9050600061109583836113a5565b6005890154604080516310b3879160e11b81526001600160a01b038a811660048301526024820187905291519394509116916321670f229160448082019260009290919082900301818387803b1580156110ee57600080fd5b505af1158015611102573d6000803e3d6000fd5b505050506005880154604080516310b3879160e11b81526001600160a01b038a8116600483015260248201859052915191909216916321670f2291604480830192600092919082900301818387803b15801561115d57600080fd5b505af1158015611171573d6000803e3d6000fd5b5050604080516001600160a01b038a81168252602082018690528183018790529151918b1693503392508d917f9be4572c785840a37a06ca21b0ca3e30eb45de65547561091bf6f0eede483b909181900360600190a450505b506001979650505050505050565b600082815260056020526040908190208151600180825281840190935260609283929183918291908160200160208202803683375050604080516001808252818301909252929450905060208083019080368337505050600384015483519192506001600160a01b031690839060009061124e57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505082600201548160008151811061128057fe5b602090810291909101015290969095509350505050565b61129f6113a1565b6000546001600160a01b03908116911614611301576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166113465760405162461bcd60e51b81526004018080602001828103825260268152602001806115866026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b60006113e783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611489565b9392505050565b6000826113fd575060006103fb565b8282028284828161140a57fe5b04146113e75760405162461bcd60e51b81526004018080602001828103825260218152602001806115e86021913960400191505060405180910390fd5b60006113e783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611520565b600081848411156115185760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114dd5781810151838201526020016114c5565b50505050905090810190601f16801561150a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000818361156f5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156114dd5781810151838201526020016114c5565b50600083858161157b57fe5b049594505050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737354686973205265776172644d616e61676572206164647265737320686173206265656e207573656420627920616e6f7468657220696e7374616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776d73672e73656e646572206973206e6f7420617574686f72697a656420746f206d616b6520746869732063616c6c5573657220636f756c646e742070726f64756365206120626c6f636b207375636365737366756c6c79a2646970667358221220d30673e6afbf4de2467521223d8dcdbb51e4ed45933bc2cfddd5ddd6e6ffd77864736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80637a32cf38116100715780637a32cf38146101ed57806382afd23b1461021f5780638da5cb5b1461023c578063a5a6cd0b14610260578063c526656c1461027d578063f2fde38b14610342576100b4565b806301ff62ab146100b957806326987b60146100f95780633d46b819146101135780636c9db77314610130578063715018a61461018757806373df161214610191575b600080fd5b6100e5600480360360408110156100cf57600080fd5b50803590602001356001600160a01b0316610368565b604080519115158252519081900360200190f35b610101610401565b60408051918252519081900360200190f35b6101016004803603602081101561012957600080fd5b5035610407565b610101600480360361010081101561014757600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359160808201359160a08101359160c08201359160e00135166104b8565b61018f6107ee565b005b6101bd600480360360408110156101a757600080fd5b50803590602001356001600160a01b03166108a2565b6040805194151585526001600160a01b039093166020850152838301919091526060830152519081900360800190f35b61018f6004803603606081101561020357600080fd5b508035906001600160a01b036020820135169060400135610a64565b6100e56004803603602081101561023557600080fd5b5035610b5b565b610244610b70565b604080516001600160a01b039092168252519081900360200190f35b6100e56004803603602081101561027657600080fd5b5035610b7f565b6102a96004803603604081101561029357600080fd5b50803590602001356001600160a01b03166111d8565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156102ed5781810151838201526020016102d5565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561032c578181015183820152602001610314565b5050505090500194505050505060405180910390f35b61018f6004803603602081101561035857600080fd5b50356001600160a01b0316611297565b60008281526005602090815260408083206004808201548351633a02a42d60e01b81526001600160a01b03888116938201939093529351929486949290911692633a02a42d926024808201939291829003018186803b1580156103ca57600080fd5b505afa1580156103de573d6000803e3d6000fd5b505050506040513d60208110156103f457600080fd5b5051119150505b92915050565b60015481565b6000818060015411610459576040805162461bcd60e51b8152602060048201526016602482015275125b99195e081b9bdd081a5b9cdd185b9d1a585d195960521b604482015290519081900360640190fd5b61046281610b5b565b6104a4576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b505060009081526003602052604090205490565b60006104c26113a1565b6000546001600160a01b03908116911614610524576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03821660009081526004602052604090205460ff161561057c5760405162461bcd60e51b815260040180806020018281038252603c8152602001806115ac603c913960400191505060405180910390fd5b600160046000846001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555088600560006001805403815260200190815260200160002060040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600560006001805403815260200190815260200160002060030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600560006001805403815260200190815260200160002060050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600560006001805403815260200190815260200160002060060160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001600260006001805403815260200190815260200160002060006101000a81548160ff021916908315150217905550600560006001805403815260200190815260200160002060030160009054906101000a90046001600160a01b03166001600160a01b031663f0d2a38c87878787306040518663ffffffff1660e01b815260040180868152602001858152602001848152602001838152602001826001600160a01b0316815260200195505050505050602060405180830381600087803b15801561079457600080fd5b505af11580156107a8573d6000803e3d6000fd5b505050506040513d60208110156107be57600080fd5b50516001805460001990810160009081526005602052604090206002019290925554019998505050505050505050565b6107f66113a1565b6000546001600160a01b03908116911614610858576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000828152600560209081526040808320600381015460028201546004808401548551633a02a42d60e01b81526001600160a01b038a8116938201939093529551889788978897968516956359dc826c9590948d94911692633a02a42d9260248082019391829003018186803b15801561091b57600080fd5b505afa15801561092f573d6000803e3d6000fd5b505050506040513d602081101561094557600080fd5b5051604080516001600160e01b031960e087901b16815260048101949094526001600160a01b0390921660248401526044830152516064808301926020929190829003018186803b15801561099957600080fd5b505afa1580156109ad573d6000803e3d6000fd5b505050506040513d60208110156109c357600080fd5b505160058201546040805163457642a160e11b8152905189926001600160a01b031691638aec8542916004808301926020929190829003018186803b158015610a0b57600080fd5b505afa158015610a1f573d6000803e3d6000fd5b505050506040513d6020811015610a3557600080fd5b50516001600160a01b039890981660009081526001939093016020526040909220549098919750945092505050565b6000838152600560205260409020612710821115610ac9576040805162461bcd60e51b815260206004820152601e60248201527f73706c69742068617320746f206265206c657373207468616e20313030250000604482015290519081900360640190fd5b33600090815260208290526040902080546001600160a01b0319166001600160a01b038516179055610afd612710836113a5565b33600081815260018401602090815260409182902093909355805185815290516001600160a01b0387169388927fa5b08588c71d0e642d3278b37062c16e87cffd2a616056a2cbd3ec5da2eba6f7929081900390910190a450505050565b60009081526002602052604090205460ff1690565b6000546001600160a01b031690565b6000818152600560209081526040808320600681015482516332f256cf60e11b8152336004820152306024820152925191936001600160a01b03909116926365e4ad9e9260448083019392829003018186803b158015610bde57600080fd5b505afa158015610bf2573d6000803e3d6000fd5b505050506040513d6020811015610c0857600080fd5b5051610c455760405162461bcd60e51b815260040180806020018281038252602e815260200180611609602e913960400191505060405180910390fd5b60068101546040805163fa54416160e01b815233600482015290516000926001600160a01b03169163fa544161916024808301926020929190829003018186803b158015610c9257600080fd5b505afa158015610ca6573d6000803e3d6000fd5b505050506040513d6020811015610cbc57600080fd5b50516001600160a01b0380821660009081526020858152604080832054600188019092528220549394509091169190610cf7612710836113a5565b6003860154600287015460048089015460408051633a02a42d60e01b81526001600160a01b038b811694820194909452905195965093821694635378014f948a9390921691633a02a42d916024808301926020929190829003018186803b158015610d6157600080fd5b505afa158015610d75573d6000803e3d6000fd5b505050506040513d6020811015610d8b57600080fd5b5051604080516001600160e01b031960e087901b16815260048101949094526001600160a01b03909216602484015260448301525160648083019260209291908290030181600087803b158015610de157600080fd5b505af1158015610df5573d6000803e3d6000fd5b505050506040513d6020811015610e0b57600080fd5b5051610e485760405162461bcd60e51b81526004018080602001828103825260298152602001806116376029913960400191505060405180910390fd5b60058501546040805163457642a160e11b815290516000926001600160a01b031691638aec8542916004808301926020929190829003018186803b158015610e8f57600080fd5b505afa158015610ea3573d6000803e3d6000fd5b505050506040513d6020811015610eb957600080fd5b505190506001600160a01b0384161580610ed4575061271083145b15610f9f576005860154604080516310b3879160e11b81526001600160a01b03888116600483015260248201859052915191909216916321670f2291604480830192600092919082900301818387803b158015610f3057600080fd5b505af1158015610f44573d6000803e3d6000fd5b5050604080516001600160a01b03888116825260208201869052600082840152915191891693503392508b917f9be4572c785840a37a06ca21b0ca3e30eb45de65547561091bf6f0eede483b909181900360600190a46111ca565b61271082141561106f576005860154604080516310b3879160e11b81526001600160a01b03878116600483015260248201859052915191909216916321670f2291604480830192600092919082900301818387803b15801561100057600080fd5b505af1158015611014573d6000803e3d6000fd5b5050604080516001600160a01b03888116825260006020830152818301869052915191891693503392508b917f9be4572c785840a37a06ca21b0ca3e30eb45de65547561091bf6f0eede483b909181900360600190a46111ca565b600061108761271061108184866113ee565b90611447565b9050600061109583836113a5565b6005890154604080516310b3879160e11b81526001600160a01b038a811660048301526024820187905291519394509116916321670f229160448082019260009290919082900301818387803b1580156110ee57600080fd5b505af1158015611102573d6000803e3d6000fd5b505050506005880154604080516310b3879160e11b81526001600160a01b038a8116600483015260248201859052915191909216916321670f2291604480830192600092919082900301818387803b15801561115d57600080fd5b505af1158015611171573d6000803e3d6000fd5b5050604080516001600160a01b038a81168252602082018690528183018790529151918b1693503392508d917f9be4572c785840a37a06ca21b0ca3e30eb45de65547561091bf6f0eede483b909181900360600190a450505b506001979650505050505050565b600082815260056020526040908190208151600180825281840190935260609283929183918291908160200160208202803683375050604080516001808252818301909252929450905060208083019080368337505050600384015483519192506001600160a01b031690839060009061124e57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505082600201548160008151811061128057fe5b602090810291909101015290969095509350505050565b61129f6113a1565b6000546001600160a01b03908116911614611301576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166113465760405162461bcd60e51b81526004018080602001828103825260268152602001806115866026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b60006113e783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611489565b9392505050565b6000826113fd575060006103fb565b8282028284828161140a57fe5b04146113e75760405162461bcd60e51b81526004018080602001828103825260218152602001806115e86021913960400191505060405180910390fd5b60006113e783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611520565b600081848411156115185760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114dd5781810151838201526020016114c5565b50505050905090810190601f16801561150a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000818361156f5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156114dd5781810151838201526020016114c5565b50600083858161157b57fe5b049594505050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737354686973205265776172644d616e61676572206164647265737320686173206265656e207573656420627920616e6f7468657220696e7374616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776d73672e73656e646572206973206e6f7420617574686f72697a656420746f206d616b6520746869732063616c6c5573657220636f756c646e742070726f64756365206120626c6f636b207375636365737366756c6c79a2646970667358221220d30673e6afbf4de2467521223d8dcdbb51e4ed45933bc2cfddd5ddd6e6ffd77864736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getState(uint256,address)": {
        "params": {
          "_index": "index of instance",
          "_user": "address of user"
        },
        "returns": {
          "_0": "bool if user is eligible to produce next block",
          "_1": "address of user that was chosen to build the block",
          "_2": "current reward paid by the network for that block",
          "_3": "percentage of reward that goes to the user"
        }
      },
      "instantiate(address,address,address,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "_blockSelectorAddress": "address of blockSelector contract",
          "_difficultyAdjustmentParameter": "how quickly the difficulty gets updated according to the difference between time passed and desired draw time interval.",
          "_rewardManagerAddress": "address containing the tokens that will be distributed",
          "_stakingAddress": "address of StakingInterface",
          "_targetInterval": "how often we want to elect a block producer",
          "_workerAuthAddress": "address of worker manager contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "produceBlock(uint256)": {
        "details": "this function can only be called by a worker, user never calls it directly",
        "params": {
          "_index": "the index of the instance of pos you want to interact with"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getState(uint256,address)": {
        "notice": "Get state of a particular instance"
      },
      "instantiate(address,address,address,uint256,uint256,uint256,uint256,address)": {
        "notice": "Instantiates a Proof of Stake"
      },
      "produceBlock(uint256)": {
        "notice": "Produce a block"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1117,
        "contract": "contracts/PoS.sol:PoS",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 927,
        "contract": "contracts/PoS.sol:PoS",
        "label": "currentIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 931,
        "contract": "contracts/PoS.sol:PoS",
        "label": "active",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 935,
        "contract": "contracts/PoS.sol:PoS",
        "label": "nonce",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2266,
        "contract": "contracts/PoS.sol:PoS",
        "label": "usedRM",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2289,
        "contract": "contracts/PoS.sol:PoS",
        "label": "instance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(PoSCtx)2285_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BlockSelector)2178": {
        "encoding": "inplace",
        "label": "contract BlockSelector",
        "numberOfBytes": "20"
      },
      "t_contract(RewardManager)2962": {
        "encoding": "inplace",
        "label": "contract RewardManager",
        "numberOfBytes": "20"
      },
      "t_contract(Staking)3048": {
        "encoding": "inplace",
        "label": "contract Staking",
        "numberOfBytes": "20"
      },
      "t_contract(WorkerAuthManager)1086": {
        "encoding": "inplace",
        "label": "contract WorkerAuthManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(PoSCtx)2285_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PoS.PoSCtx)",
        "numberOfBytes": "32",
        "value": "t_struct(PoSCtx)2285_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoSCtx)2285_storage": {
        "encoding": "inplace",
        "label": "struct PoS.PoSCtx",
        "members": [
          {
            "astId": 2270,
            "contract": "contracts/PoS.sol:PoS",
            "label": "beneficiaryMap",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 2274,
            "contract": "contracts/PoS.sol:PoS",
            "label": "splitMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2276,
            "contract": "contracts/PoS.sol:PoS",
            "label": "blockSelectorIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2278,
            "contract": "contracts/PoS.sol:PoS",
            "label": "blockSelector",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(BlockSelector)2178"
          },
          {
            "astId": 2280,
            "contract": "contracts/PoS.sol:PoS",
            "label": "staking",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(Staking)3048"
          },
          {
            "astId": 2282,
            "contract": "contracts/PoS.sol:PoS",
            "label": "rewardManager",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(RewardManager)2962"
          },
          {
            "astId": 2284,
            "contract": "contracts/PoS.sol:PoS",
            "label": "workerAuth",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(WorkerAuthManager)1086"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}