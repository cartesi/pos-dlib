{
  "address": "0xDC8Cc4d7C37eb99AbD34bdD265d4359B2A7a02e7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_difficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ethBlockStamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "whenCanProduceBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x332f6e32f319a0ae9407f242139b916503cd671be16aafce05e5ebaf3c0884fc",
  "receipt": {
    "to": null,
    "from": "0x0e28A8f88C6266dF0FE274c15c1d4b27f8B373C0",
    "contractAddress": "0xDC8Cc4d7C37eb99AbD34bdD265d4359B2A7a02e7",
    "transactionIndex": 137,
    "gasUsed": "282066",
    "logsBloom": "0x
    "blockHash": "0x09737801c0ebea39435596aa43ea7612f6c5720e4bb62892ab9402a394e6b191",
    "transactionHash": "0x332f6e32f319a0ae9407f242139b916503cd671be16aafce05e5ebaf3c0884fc",
    "logs": [],
    "blockNumber": 15922160,
    "cumulativeGasUsed": "12953794",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6670c41872ce7f396b312b3368907791",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_difficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethBlockStamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"whenCanProduceBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"whenCanProduceBlock(uint256,uint256,address,uint256)\":{\"params\":{\"_difficulty\":\"difficulty of current selection process\",\"_ethBlockStamp\":\"ethereum block number when current selection started\",\"_user\":\"the address that is gonna get checked\",\"_weight\":\"number that will weight the random number, most likely will be the number of staked tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"whenCanProduceBlock(uint256,uint256,address,uint256)\":{\"notice\":\"Check when address is allowed to produce block\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/Eligibility.sol\":\"Eligibility\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/UnrolledCordic.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n///@title UnrolledCordic.sol\\n///@author Gabriel Barros, Diego Nehab\\npragma solidity ^0.8.0;\\n\\nlibrary UnrolledCordic {\\n    uint256 constant one = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 constant log2_e = 0xb8aa3b295c17f0bbbe87fed0691d3e88eb577aa8dd695a588b25166cd1a13248;\\n\\n    uint64 constant N = 64;\\n    uint256 constant log2_ks0 = 0xb31fb7d64898b3e15c01a39fbd687a02934f0979a3715fd4ae00d1cfdeb43d0;\\n    uint256 constant log2_ks1 = 0xb84e236bd563ba016fe50b6ef0851802dcf2d0b85a453105aeb4dd63bf61cc;\\n    uint256 constant log2_ks2 = 0xb8a476150dfe4001713d62f7957c3002e24ca6e87e8a8005c3e0ffc29d593;\\n    uint256 constant log2_ks3 = 0xb8a9ded47c110001715305002e4b0002e2a32762fa6c0005c53ac47e94d9;\\n    uint256 constant log2_ks4 = 0xb8aa35640a80000171545f3d72b00002e2a8905062300005c55067f6e59;\\n    uint256 constant log2_ks5 = 0xb8aa3acd07000001715474e164000002e2a8e6e01f000005c551c2359a;\\n\\n    function log2m64(uint256 x) internal pure returns (uint256) {\\n        uint256 y = 0;\\n        uint256 t;\\n\\n        unchecked {\\n            // round(log_2(1+1/2^i)*2^64) for i = 1..4 packed into 64bits each\\n            t = x + (x >> 1);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks0 << 192;\\n            }\\n            t = x + (x >> 2);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 64) << 192;\\n            }\\n            t = x + (x >> 3);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 128) << 192;\\n            }\\n            t = x + (x >> 4);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 5..8 packed into 64bits each\\n            t = x + (x >> 5);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks1 << 192;\\n            }\\n            t = x + (x >> 6);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 64) << 192;\\n            }\\n            t = x + (x >> 7);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 128) << 192;\\n            }\\n            t = x + (x >> 8);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 9..12 packed into 64bits each\\n            t = x + (x >> 9);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks2 << 192;\\n            }\\n            t = x + (x >> 10);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 64) << 192;\\n            }\\n            t = x + (x >> 11);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 128) << 192;\\n            }\\n            t = x + (x >> 12);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 13..16 packed into 64bits each\\n            t = x + (x >> 13);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks3 << 192;\\n            }\\n            t = x + (x >> 14);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 64) << 192;\\n            }\\n            t = x + (x >> 15);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 128) << 192;\\n            }\\n            t = x + (x >> 16);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 17..20 packed into 64bits each\\n            t = x + (x >> 17);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks4 << 192;\\n            }\\n            t = x + (x >> 18);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 64) << 192;\\n            }\\n            t = x + (x >> 19);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 128) << 192;\\n            }\\n            t = x + (x >> 20);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 21..24 packed into 64bits each\\n            t = x + (x >> 21);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks5 << 192;\\n            }\\n            t = x + (x >> 22);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 64) << 192;\\n            }\\n            t = x + (x >> 23);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 128) << 192;\\n            }\\n            t = x + (x >> 24);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 192) << 192;\\n            }\\n\\n            uint256 r = one - x;\\n            y += mulhi128(log2_e, mulhi128(r, one + (r >> 1)) << 1) << 1;\\n            return y >> (255 - 64);\\n        }\\n    }\\n\\n    function log2Times1e18(uint256 val) external pure returns (uint256) {\\n        int256 il = ilog2(val);\\n        uint256 skewedRes;\\n        unchecked {\\n            if (il + 1 <= 255) {\\n                skewedRes = (uint256(il + 1) << N) - log2m64(val << (255 - uint256(il + 1)));\\n            } else {\\n                skewedRes = (uint256(il + 1) << N) - log2m64(val >> uint256((il + 1) - 255));\\n            }\\n            return (skewedRes * 1e18) >> N;\\n        }\\n    }\\n\\n    function mulhi128(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return (a >> 128) * (b >> 128);\\n        }\\n    }\\n\\n    function ilog2(uint256 val) internal pure returns (int256) {\\n        require(val > 0, \\\"must be greater than zero\\\");\\n        unchecked {\\n            return 255 - int256(clz(val));\\n        }\\n    }\\n\\n    /// @notice count leading zeros\\n    /// @param _num number you want the clz of\\n    /// @dev this a binary search implementation\\n    function clz(uint256 _num) internal pure returns (uint256) {\\n        if (_num == 0) return 256;\\n        unchecked {\\n            uint256 n = 0;\\n            if (_num & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 == 0) {\\n                n = n + 128;\\n                _num = _num << 128;\\n            }\\n            if (_num & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 64;\\n                _num = _num << 64;\\n            }\\n            if (_num & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 32;\\n                _num = _num << 32;\\n            }\\n            if (_num & 0xFFFF000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 16;\\n                _num = _num << 16;\\n            }\\n            if (_num & 0xFF00000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 8;\\n                _num = _num << 8;\\n            }\\n            if (_num & 0xF000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 4;\\n                _num = _num << 4;\\n            }\\n            if (_num & 0xC000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 2;\\n                _num = _num << 2;\\n            }\\n            if (_num & 0x8000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 1;\\n            }\\n\\n            return n;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdf677afbc4b061c8d5ca62ebd23565ae34a4b5a67a9c1d420ca0a5cf533caa60\",\"license\":\"Apache-2.0\"},\"contracts/v2/Eligibility.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Block Selector Library\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@cartesi/util/contracts/UnrolledCordic.sol\\\";\\n\\nlibrary Eligibility {\\n    uint256 constant C_40 = 40; // 40 blocks\\n    uint256 constant C_256 = 256; // 256 blocks\\n    uint256 constant DIFFICULTY_BASE_MULTIPLIER = 256 * 1e18; // 256 with 18 decimal places\\n    uint256 constant UINT256_MAX = 2 ** 256 - 1;\\n\\n    /// @notice Check when address is allowed to produce block\\n    /// @param _difficulty difficulty of current selection process\\n    /// @param _ethBlockStamp ethereum block number when current selection started\\n    /// @param _user the address that is gonna get checked\\n    /// @param _weight number that will weight the random number, most likely will be the number of staked tokens\\n    function whenCanProduceBlock(\\n        uint256 _difficulty,\\n        uint256 _ethBlockStamp,\\n        address _user,\\n        uint256 _weight\\n    ) external view returns (uint256) {\\n        // cannot produce if block selector goal hasnt been decided yet\\n        // goal is defined the block after selection was reset\\n        // cannot produce if weight is zero\\n        //slither-disable-next-line  incorrect-equality\\n        if (getSelectionBlocksPassed(_ethBlockStamp) == 0 || _weight == 0) {\\n            return UINT256_MAX;\\n        }\\n\\n        uint256 multiplier;\\n        // we want overflow and underflow on purpose\\n        unchecked {\\n            multiplier =\\n                DIFFICULTY_BASE_MULTIPLIER -\\n                getLogOfRandom(_user, _ethBlockStamp);\\n        }\\n\\n        uint256 blocksToWait = (_difficulty * multiplier) / (_weight * 1e12);\\n        // restore the multiple 256 based on current block number\\n        //slither-disable-next-line  divide-before-multiply\\n        uint256 cycleOf256 = C_256 *\\n            ((block.number - _ethBlockStamp - C_40 - 1) / C_256);\\n\\n        return blocksToWait + _ethBlockStamp + C_40 + cycleOf256;\\n    }\\n\\n    /// @notice Calculates the log of the random number between the goal and callers address\\n    /// @param _user address to calculate log of random\\n    /// @param _ethBlockStamp main chain block number of last sidechain block\\n    /// @return log of random number between goal and callers address * 1M\\n    function getLogOfRandom(\\n        address _user,\\n        uint256 _ethBlockStamp\\n    ) internal view returns (uint256) {\\n        // seed for goal takes a block in the future (+40) so it is harder to manipulate\\n        bytes32 currentGoal = blockhash(\\n            getSeed(_ethBlockStamp + C_40, block.number)\\n        );\\n        bytes32 hashedAddress = keccak256(abi.encodePacked(_user));\\n        uint256 distance = uint256(\\n            keccak256(abi.encodePacked(hashedAddress, currentGoal))\\n        );\\n\\n        return UnrolledCordic.log2Times1e18(distance);\\n    }\\n\\n    function getSeed(\\n        uint256 _previousTarget,\\n        uint256 _currentBlock\\n    ) internal pure returns (uint256) {\\n        uint256 diff = _currentBlock - _previousTarget;\\n        //slither-disable-next-line  divide-before-multiply\\n        uint256 res = diff / C_256;\\n\\n        // if difference is multiple of 256 (256, 512, 1024)\\n        // preserve old target\\n        //slither-disable-next-line  incorrect-equality\\n        if (diff % C_256 == 0) {\\n            return _previousTarget + ((res - 1) * C_256);\\n        }\\n\\n        //slither-disable-next-line  divide-before-multiply\\n        return _previousTarget + (res * C_256);\\n    }\\n\\n    /// @notice Returns the duration in blocks of current selection proccess\\n    /// @param _ethBlockStamp ethereum block number of last sidechain block\\n    /// @return number of ethereum blocks passed since last selection goal was defined\\n    /// @dev blocks passed resets when target resets\\n    function getSelectionBlocksPassed(\\n        uint256 _ethBlockStamp\\n    ) internal view returns (uint256) {\\n        unchecked {\\n            // new goal block is decided 40 blocks after sidechain block is created\\n            uint256 goalBlock = _ethBlockStamp + C_40;\\n\\n            // target hasnt been set\\n            if (goalBlock >= block.number) return 0;\\n\\n            uint256 blocksPassed = block.number - goalBlock;\\n\\n            // if blocksPassed is multiple of 256, 256 blocks have passed\\n            // this avoids blocksPassed going to zero right before target change\\n            //slither-disable-next-line  incorrect-equality\\n            if (blocksPassed % C_256 == 0) return C_256;\\n\\n            return blocksPassed % C_256;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce36a686ce38eb78e38bd885aeae353481b76cf0b95ca6f2d87bf4132fe0e524\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61042461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063261cb77a1461003a575b600080fd5b61004d6100483660046102e8565b61005f565b60405190815260200160405180910390f35b600061006a84610130565b1580610074575081155b156100825750600019610128565b600061008e848661016b565b680de0b6b3a76400000003905060006100ac8464e8d4a51000610349565b6100b68389610349565b6100c0919061037e565b90506000610100600160286100d58a43610392565b6100df9190610392565b6100e99190610392565b6100f3919061037e565b6100ff90610100610349565b905080602861010e89856103a9565b61011891906103a9565b61012291906103a9565b93505050505b949350505050565b6000602882014381106101465750600092915050565b43819003610100810660000361016157506101009392505050565b60ff169392505050565b60008061018261017c6028856103a9565b4361026c565b6040516bffffffffffffffffffffffff19606087901b1660208201529040915060009060340160408051601f198184030181528282528051602091820120908301819052908201849052915060009060600160408051808303601f1901815290829052805160209091012063c370ed0960e01b8252600482018190529150739d77bEAb6EA94A4d801Df94da947f4be2A16ed139063c370ed0990602401602060405180830381865af415801561023c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026091906103c1565b93505050505b92915050565b6000806102798484610392565b905060006102896101008361037e565b9050610297610100836103da565b6000036102c9576101006102ac600183610392565b6102b69190610349565b6102c090866103a9565b92505050610266565b6102d561010082610349565b6102df90866103a9565b95945050505050565b600080600080608085870312156102fe57600080fd5b843593506020850135925060408501356001600160a01b038116811461032357600080fd5b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561036357610363610333565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261038d5761038d610368565b500490565b6000828210156103a4576103a4610333565b500390565b600082198211156103bc576103bc610333565b500190565b6000602082840312156103d357600080fd5b5051919050565b6000826103e9576103e9610368565b50069056fea2646970667358221220da3e1594d233acaa94e77efb611bb7134654ec7f7589f994b5cc5edea1e2791864736f6c634300080e0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063261cb77a1461003a575b600080fd5b61004d6100483660046102e8565b61005f565b60405190815260200160405180910390f35b600061006a84610130565b1580610074575081155b156100825750600019610128565b600061008e848661016b565b680de0b6b3a76400000003905060006100ac8464e8d4a51000610349565b6100b68389610349565b6100c0919061037e565b90506000610100600160286100d58a43610392565b6100df9190610392565b6100e99190610392565b6100f3919061037e565b6100ff90610100610349565b905080602861010e89856103a9565b61011891906103a9565b61012291906103a9565b93505050505b949350505050565b6000602882014381106101465750600092915050565b43819003610100810660000361016157506101009392505050565b60ff169392505050565b60008061018261017c6028856103a9565b4361026c565b6040516bffffffffffffffffffffffff19606087901b1660208201529040915060009060340160408051601f198184030181528282528051602091820120908301819052908201849052915060009060600160408051808303601f1901815290829052805160209091012063c370ed0960e01b825260048201819052915073__$1cacf4970e0423274c39545237a099b14f$__9063c370ed0990602401602060405180830381865af415801561023c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026091906103c1565b93505050505b92915050565b6000806102798484610392565b905060006102896101008361037e565b9050610297610100836103da565b6000036102c9576101006102ac600183610392565b6102b69190610349565b6102c090866103a9565b92505050610266565b6102d561010082610349565b6102df90866103a9565b95945050505050565b600080600080608085870312156102fe57600080fd5b843593506020850135925060408501356001600160a01b038116811461032357600080fd5b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561036357610363610333565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261038d5761038d610368565b500490565b6000828210156103a4576103a4610333565b500390565b600082198211156103bc576103bc610333565b500190565b6000602082840312156103d357600080fd5b5051919050565b6000826103e9576103e9610368565b50069056fea2646970667358221220da3e1594d233acaa94e77efb611bb7134654ec7f7589f994b5cc5edea1e2791864736f6c634300080e0033",
  "libraries": {
    "UnrolledCordic": "0x9d77bEAb6EA94A4d801Df94da947f4be2A16ed13"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "whenCanProduceBlock(uint256,uint256,address,uint256)": {
        "params": {
          "_difficulty": "difficulty of current selection process",
          "_ethBlockStamp": "ethereum block number when current selection started",
          "_user": "the address that is gonna get checked",
          "_weight": "number that will weight the random number, most likely will be the number of staked tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "whenCanProduceBlock(uint256,uint256,address,uint256)": {
        "notice": "Check when address is allowed to produce block"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}