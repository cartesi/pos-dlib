{
  "address": "0x4D95d9d9206A5Ede945c1354C182E4F2F7965aFF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ctsiAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumPrize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_distNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_distDenominator",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "payWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x17a47e94bf0c093d6d3199ef6218a2a20966bf5659122317f0c1c791484cd3a5",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x4D95d9d9206A5Ede945c1354C182E4F2F7965aFF",
    "transactionIndex": 0,
    "gasUsed": "405505",
    "logsBloom": "0x
    "blockHash": "0xb294e05f1688ee4a4871eca550d3cef50e04d7cd4f185baf148cc051409dd94d",
    "transactionHash": "0x17a47e94bf0c093d6d3199ef6218a2a20966bf5659122317f0c1c791484cd3a5",
    "logs": [],
    "blockNumber": 21883180,
    "cumulativeGasUsed": "405505",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x428A35610BE92320b26a1A35db4d7C868a49D07F",
    "0xE33B0cd389D2DCAD374c4ddA3ae205A196E9FDA1",
    "1000000000000000000",
    "270000000000000000000",
    5,
    100000
  ],
  "solcInputHash": "c31e23cc00625f198ce559960a373148",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ctsiAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_ctsiAddress\":\"address of token instance being used\",\"_distDenominator\":\"dividing factor to define prize amount\",\"_distNumerator\":\"multiplier factor to define prize amount\",\"_maxPrize\":\"max prize that this contract pays\",\"_minimumPrize\":\"minimum prize that this contract pays\",\"_operator\":\"address of the operator\"}},\"payWinner(address,uint256)\":{\"details\":\"only the pos contract can call this\",\"params\":{\"_winner\":\"address of round winner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates contract\"},\"getBalance()\":{\"notice\":\"Get PrizeManager's balance\"},\"getCurrentPrize()\":{\"notice\":\"Get prize of next Lottery round\"},\"payWinner(address,uint256)\":{\"notice\":\"Transfers token to winner of Lottery\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrizeManager.sol\":\"PrizeManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/PrizeManager.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n/// @title PrizeManager\\n/// @author Felipe Argento\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract PrizeManager {\\n    using SafeMath for uint256;\\n\\n    uint256 minimumPrize;\\n    uint256 maxPrize;\\n    uint256 distNumerator;\\n    uint256 distDenominator;\\n    address operator;\\n    IERC20 ctsi;\\n\\n    /// @notice Creates contract\\n    /// @param _operator address of the operator\\n    /// @param _ctsiAddress address of token instance being used\\n    /// @param _maxPrize max prize that this contract pays\\n    /// @param _minimumPrize minimum prize that this contract pays\\n    /// @param _distNumerator multiplier factor to define prize amount\\n    /// @param _distDenominator dividing factor to define prize amount\\n    constructor(\\n        address _operator,\\n        address _ctsiAddress,\\n        uint256 _maxPrize,\\n        uint256 _minimumPrize,\\n        uint256 _distNumerator,\\n        uint256 _distDenominator\\n    ) {\\n\\n        operator = _operator;\\n        ctsi = IERC20(_ctsiAddress);\\n\\n        minimumPrize = _minimumPrize;\\n        maxPrize = _maxPrize;\\n        distNumerator = _distNumerator;\\n        distDenominator = _distDenominator;\\n    }\\n\\n    /// @notice Transfers token to winner of Lottery\\n    /// @param _winner address of round winner\\n    /// @dev only the pos contract can call this\\n    function payWinner(address _winner, uint256 _amount) public {\\n        require(msg.sender == operator, \\\"Only the operator contract can call this function\\\");\\n\\n        ctsi.transfer(_winner, _amount);\\n    }\\n\\n    /// @notice Get PrizeManager's balance\\n    function getBalance() public view returns (uint256) {\\n        return ctsi.balanceOf(address(this));\\n    }\\n\\n    /// @notice Get prize of next Lottery round\\n    function getCurrentPrize() public view returns (uint256) {\\n        uint256 prize = (getBalance().mul(distNumerator)).div(distDenominator);\\n        prize = prize > minimumPrize? prize : minimumPrize;\\n        prize = prize > maxPrize? maxPrize : prize;\\n\\n        return prize > getBalance()? getBalance() : prize;\\n    }\\n}\\n\",\"keccak256\":\"0xf3aa590c7f9a61caec90893e25705f0dfbaa12ef0a35ccb4044ba1507eb25ceb\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516104bc3803806104bc833981810160405260c081101561003357600080fd5b508051602082015160408301516060840151608085015160a090950151600480546001600160a01b039687166001600160a01b031991821617909155600580549690951695169490941790925560009190915560015560029190915560035561041b806100a16000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806312065fe01461004657806340338433146100605780634e958d0514610068575b600080fd5b61004e610096565b60408051918252519081900360200190f35b61004e610112565b6100946004803603604081101561007e57600080fd5b506001600160a01b038135169060200135610183565b005b600554604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156100e157600080fd5b505afa1580156100f5573d6000803e3d6000fd5b505050506040513d602081101561010b57600080fd5b5051905090565b60008061013560035461012f600254610129610096565b90610252565b906102b4565b905060005481116101485760005461014a565b805b9050600154811161015b578061015f565b6001545b9050610169610096565b8111610175578061017d565b61017d610096565b91505090565b6004546001600160a01b031633146101cc5760405162461bcd60e51b81526004018080602001828103825260318152602001806103946031913960400191505060405180910390fd5b6005546040805163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561022257600080fd5b505af1158015610236573d6000803e3d6000fd5b505050506040513d602081101561024c57600080fd5b50505050565b600082610261575060006102ae565b8282028284828161026e57fe5b04146102ab5760405162461bcd60e51b81526004018080602001828103825260218152602001806103c56021913960400191505060405180910390fd5b90505b92915050565b60006102ab83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506000818361037d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561034257818101518382015260200161032a565b50505050905090810190601f16801561036f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161038957fe5b049594505050505056fe4f6e6c7920746865206f70657261746f7220636f6e74726163742063616e2063616c6c20746869732066756e6374696f6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122064e1b579a9199c06fe1ee9ebe0a2c051ed5ac95e71fb20d31c2bbe01336d4b3d64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806312065fe01461004657806340338433146100605780634e958d0514610068575b600080fd5b61004e610096565b60408051918252519081900360200190f35b61004e610112565b6100946004803603604081101561007e57600080fd5b506001600160a01b038135169060200135610183565b005b600554604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156100e157600080fd5b505afa1580156100f5573d6000803e3d6000fd5b505050506040513d602081101561010b57600080fd5b5051905090565b60008061013560035461012f600254610129610096565b90610252565b906102b4565b905060005481116101485760005461014a565b805b9050600154811161015b578061015f565b6001545b9050610169610096565b8111610175578061017d565b61017d610096565b91505090565b6004546001600160a01b031633146101cc5760405162461bcd60e51b81526004018080602001828103825260318152602001806103946031913960400191505060405180910390fd5b6005546040805163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561022257600080fd5b505af1158015610236573d6000803e3d6000fd5b505050506040513d602081101561024c57600080fd5b50505050565b600082610261575060006102ae565b8282028284828161026e57fe5b04146102ab5760405162461bcd60e51b81526004018080602001828103825260218152602001806103c56021913960400191505060405180910390fd5b90505b92915050565b60006102ab83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506000818361037d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561034257818101518382015260200161032a565b50505050905090810190601f16801561036f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161038957fe5b049594505050505056fe4f6e6c7920746865206f70657261746f7220636f6e74726163742063616e2063616c6c20746869732066756e6374696f6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122064e1b579a9199c06fe1ee9ebe0a2c051ed5ac95e71fb20d31c2bbe01336d4b3d64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_ctsiAddress": "address of token instance being used",
          "_distDenominator": "dividing factor to define prize amount",
          "_distNumerator": "multiplier factor to define prize amount",
          "_maxPrize": "max prize that this contract pays",
          "_minimumPrize": "minimum prize that this contract pays",
          "_operator": "address of the operator"
        }
      },
      "payWinner(address,uint256)": {
        "details": "only the pos contract can call this",
        "params": {
          "_winner": "address of round winner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates contract"
      },
      "getBalance()": {
        "notice": "Get PrizeManager's balance"
      },
      "getCurrentPrize()": {
        "notice": "Get prize of next Lottery round"
      },
      "payWinner(address,uint256)": {
        "notice": "Transfers token to winner of Lottery"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2788,
        "contract": "contracts/PrizeManager.sol:PrizeManager",
        "label": "minimumPrize",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2790,
        "contract": "contracts/PrizeManager.sol:PrizeManager",
        "label": "maxPrize",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2792,
        "contract": "contracts/PrizeManager.sol:PrizeManager",
        "label": "distNumerator",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2794,
        "contract": "contracts/PrizeManager.sol:PrizeManager",
        "label": "distDenominator",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2796,
        "contract": "contracts/PrizeManager.sol:PrizeManager",
        "label": "operator",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2798,
        "contract": "contracts/PrizeManager.sol:PrizeManager",
        "label": "ctsi",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)1500"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1500": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}