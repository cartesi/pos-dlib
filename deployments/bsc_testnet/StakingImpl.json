{
  "address": "0x1F19cC26D10e5Eb3AC8ABc21f83f3886026Ca62D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ctsiAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timeToStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeToRelease",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_maturationDate",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_maturationDate",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getMaturingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getMaturingTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getReleasingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getReleasingTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getStakedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9e4f1b7f960dfc5fd84d9993b0754e21d957f457799dcefb140fef0f7d796e9",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "618865",
    "logsBloom": "0x
    "blockHash": "0x9b4194babd4477631a66173f6ff8c21ae761469633c1c753d1f1ea0398f373ae",
    "transactionHash": "0xf9e4f1b7f960dfc5fd84d9993b0754e21d957f457799dcefb140fef0f7d796e9",
    "logs": [],
    "blockNumber": 3229020,
    "cumulativeGasUsed": "618865",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x52BE964c9a9fd9Ebc2295979F9F8362551413cb5",
    7200,
    7200
  ],
  "solcInputHash": "86b4c2812e7f92c88b027a8b5c65e6ff",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ctsiAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeToStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToRelease\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_maturationDate\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_maturationDate\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getMaturingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getMaturingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getReleasingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getReleasingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_ctsiAddress\":\"address of compatible ERC20\",\"_timeToRelease\":\"time it takes from unstake to tokens being unlocked.\",\"_timeToStake\":\"time it takes for deposited tokens to become staked.\"}},\"getMaturingBalance(address)\":{\"returns\":{\"_0\":\"amount that will get staked after finalization\"}},\"getMaturingTimestamp(address)\":{\"returns\":{\"_0\":\"timestamp of when finalizeStakes() is callable\"}},\"getReleasingBalance(address)\":{\"returns\":{\"_0\":\"amount that will get withdrew after finalization\"}},\"getReleasingTimestamp(address)\":{\"returns\":{\"_0\":\"timestamp of when finalizeWithdraw() is callable\"}},\"getStakedBalance(address)\":{\"params\":{\"_userAddress\":\"user to retrieve staked balance from\"},\"returns\":{\"_0\":\"finalized staked of _userAddress\"}},\"stake(uint256)\":{\"params\":{\"_amount\":\"The amount of tokens that are gonna be deposited.\"}},\"unstake(uint256)\":{\"params\":{\"_amount\":\"The amount of tokens that are gonna be unstaked.\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount of tokens that are gonna be transferred.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Stake(uint256,address,uint256)\":{\"notice\":\"CTSI tokens were deposited, they count as stake after _maturationDate\"},\"Unstake(uint256,address,uint256)\":{\"notice\":\"Unstake tokens, moving them to releasing structure\"},\"Withdraw(uint256,address)\":{\"notice\":\"Withdraw process was finalized\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"constructor\"},\"getMaturingBalance(address)\":{\"notice\":\"Returns the balance waiting/ready to be matured\"},\"getMaturingTimestamp(address)\":{\"notice\":\"Returns the timestamp when next deposit can be finalized\"},\"getReleasingBalance(address)\":{\"notice\":\"Returns the balance waiting/ready to be released\"},\"getReleasingTimestamp(address)\":{\"notice\":\"Returns the timestamp when next withdraw can be finalized\"},\"getStakedBalance(address)\":{\"notice\":\"Returns total amount of tokens counted as stake\"},\"stake(uint256)\":{\"notice\":\"Deposit CTSI to be staked. The money will turn into staked         balance after timeToStake days\"},\"unstake(uint256)\":{\"notice\":\"Remove tokens from staked balance. The money can         be released after timeToRelease seconds, if the         function withdraw is called.\"},\"withdraw(uint256)\":{\"notice\":\"Transfer tokens to user's wallet.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingImpl.sol\":\"StakingImpl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title Interface staking contract\\npragma solidity ^0.7.0;\\n\\ninterface Staking {\\n\\n    /// @notice Returns total amount of tokens counted as stake\\n    /// @param _userAddress user to retrieve staked balance from\\n    /// @return finalized staked of _userAddress\\n    function getStakedBalance(\\n        address _userAddress) external view returns (uint256);\\n\\n    /// @notice Returns the timestamp when next deposit can be finalized\\n    /// @return timestamp of when finalizeStakes() is callable\\n    function getMaturingTimestamp(address _userAddress) external view returns (uint256);\\n\\n    /// @notice Returns the timestamp when next withdraw can be finalized\\n    /// @return timestamp of when finalizeWithdraw() is callable\\n    function getReleasingTimestamp(address _userAddress) external view returns (uint256);\\n\\n\\n    /// @notice Returns the balance waiting/ready to be matured\\n    /// @return amount that will get staked after finalization\\n    function getMaturingBalance(address _userAddress) external view  returns (uint256);\\n\\n    /// @notice Returns the balance waiting/ready to be released\\n    /// @return amount that will get withdrew after finalization\\n    function getReleasingBalance(address _userAddress) external view  returns (uint256);\\n\\n\\n    /// @notice Deposit CTSI to be staked. The money will turn into staked\\n    ///         balance after timeToStake days\\n    /// @param _amount The amount of tokens that are gonna be deposited.\\n    function stake(uint256 _amount) external;\\n\\n    /// @notice Remove tokens from staked balance. The money can\\n    ///         be released after timeToRelease seconds, if the\\n    ///         function withdraw is called.\\n    /// @param _amount The amount of tokens that are gonna be unstaked.\\n    function unstake(uint256 _amount) external;\\n\\n    /// @notice Transfer tokens to user's wallet.\\n    /// @param _amount The amount of tokens that are gonna be transferred.\\n    function withdraw(uint256 _amount) external;\\n\\n    // events\\n    /// @notice CTSI tokens were deposited, they count as stake after _maturationDate\\n    /// @param _amount amount deposited for staking\\n    /// @param _address address of msg.sender\\n    /// @param _maturationDate date when the stake can be finalized\\n    event Stake(\\n        uint256 indexed _amount,\\n        address indexed _address,\\n        uint256 indexed _maturationDate\\n    );\\n\\n    /// @notice Unstake tokens, moving them to releasing structure\\n    /// @param _amount amount of tokens to be released\\n    /// @param _address address of msg.sender\\n    /// @param _maturationDate date when the tokens can be withdrew\\n    event Unstake(\\n        uint256 indexed _amount,\\n        address indexed _address,\\n        uint256 indexed _maturationDate\\n    );\\n\\n    /// @notice Withdraw process was finalized\\n    /// @param _amount amount of tokens withdrawn\\n    /// @param _address address of msg.sender\\n    event Withdraw(\\n        uint256 indexed _amount,\\n        address indexed _address\\n    );\\n}\\n\\n\",\"keccak256\":\"0xa529cf07b94bfafbdc989f8baff440fe4e858dc44c88b169b2013b7c6c7d465a\",\"license\":\"GPL-3.0-only\"},\"contracts/StakingImpl.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title Cartesi Staking\\n/// @author Felipe Argento\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./Staking.sol\\\";\\n\\ncontract StakingImpl is Staking {\\n    using SafeMath for uint256;\\n    IERC20 private ctsi;\\n\\n    uint256 timeToStake; // time it takes for deposited tokens to become staked.\\n    uint256 timeToRelease; // time it takes from witdraw signal to tokens to be unlocked.\\n\\n    mapping(address => uint256) staked; // amount of money being staked.\\n    mapping(address => MaturationStruct) maturing; // deposits waiting to be staked.\\n    mapping(address => MaturationStruct) releasing; // money waiting for withdraw.\\n\\n    struct MaturationStruct {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    /// @notice constructor\\n    /// @param _ctsiAddress address of compatible ERC20\\n    /// @param _timeToStake time it takes for deposited tokens to become staked.\\n    /// @param _timeToRelease time it takes from unstake to tokens being unlocked.\\n    constructor(\\n        address _ctsiAddress,\\n        uint256 _timeToStake,\\n        uint256 _timeToRelease\\n    ) {\\n        ctsi = IERC20(_ctsiAddress);\\n        timeToStake = _timeToStake;\\n        timeToRelease = _timeToRelease;\\n    }\\n\\n    function stake(uint256 _amount) public override {\\n        require(_amount > 0, \\\"amount cant be zero\\\");\\n\\n        // pointers to releasing/maturing structs\\n        MaturationStruct storage r = releasing[msg.sender];\\n        MaturationStruct storage m = maturing[msg.sender];\\n\\n        // check if there are mature coins to be staked\\n        if (m.timestamp.add(timeToStake) <= block.timestamp) {\\n            staked[msg.sender] = staked[msg.sender].add(m.amount);\\n            m.amount = 0;\\n        }\\n\\n        // first move tokens from releasing pool to maturing\\n        // then transfer from wallet\\n        if (r.amount >= _amount) {\\n            r.amount = (r.amount).sub(_amount);\\n        } else {\\n            // transfer stake to contract\\n            // from: msg.sender\\n            // to: this contract\\n            // value: _amount - releasing[msg.sender].amount\\n            ctsi.transferFrom(msg.sender, address(this), _amount.sub(r.amount));\\n            r.amount = 0;\\n\\n        }\\n\\n        m.amount = (m.amount).add(_amount);\\n        m.timestamp = block.timestamp;\\n\\n        emit Stake(\\n            m.amount,\\n            msg.sender,\\n            block.timestamp.add(timeToStake)\\n        );\\n    }\\n\\n    function unstake(uint256 _amount) public override {\\n        require(_amount > 0, \\\"amount cant be zero\\\");\\n\\n        // pointers to releasing/maturing structs\\n        MaturationStruct storage r = releasing[msg.sender];\\n        MaturationStruct storage m = maturing[msg.sender];\\n\\n        if (m.amount >= _amount) {\\n            m.amount = (m.amount).sub(_amount);\\n        } else {\\n            // safemath.sub guarantees that _amount <= m.amount + staked amount\\n            staked[msg.sender] = staked[msg.sender].sub(_amount.sub(m.amount));\\n            m.amount = 0;\\n        }\\n        // update releasing amount\\n        r.amount = (r.amount).add(_amount);\\n        r.timestamp = block.timestamp;\\n\\n        emit Unstake(\\n            r.amount,\\n            msg.sender,\\n            block.timestamp.add(timeToRelease)\\n        );\\n    }\\n\\n    function withdraw(uint256 _amount) public override {\\n        // pointer to releasing struct\\n        MaturationStruct storage r = releasing[msg.sender];\\n\\n        require(_amount > 0, \\\"amount cant be zero\\\");\\n        require(\\n            r.timestamp.add(timeToRelease) <= block.timestamp,\\n            \\\"tokens are not yet ready to be released\\\"\\n        );\\n\\n        r.amount = (r.amount).sub(_amount, \\\"not enough tokens waiting to be released;\\\");\\n\\n        // withdraw tokens\\n        // from: this contract\\n        // to: msg.sender\\n        // value: bet total withdraw value on toWithdraw\\n        ctsi.transfer(msg.sender, _amount);\\n        emit Withdraw(_amount, msg.sender);\\n    }\\n\\n    // getters\\n    function getMaturingTimestamp(\\n        address _userAddress\\n    )\\n    public\\n    view override\\n    returns (uint256)\\n    {\\n        return maturing[_userAddress].timestamp.add(timeToStake);\\n    }\\n\\n    function getMaturingBalance(\\n        address _userAddress\\n    )\\n    public\\n    view override\\n    returns (uint256)\\n    {\\n        MaturationStruct storage m = maturing[_userAddress];\\n\\n        if (m.timestamp.add(timeToStake) <= block.timestamp) {\\n            return 0;\\n        }\\n\\n        return m.amount;\\n    }\\n\\n    function getReleasingBalance(\\n        address _userAddress\\n    )\\n    public\\n    view override\\n    returns (uint256)\\n    {\\n        return releasing[_userAddress].amount;\\n    }\\n\\n    function getReleasingTimestamp(\\n        address _userAddress\\n    )\\n    public\\n    view override\\n    returns (uint256)\\n    {\\n        return releasing[_userAddress].timestamp.add(timeToRelease);\\n    }\\n\\n    function getStakedBalance(address _userAddress)\\n    public\\n    view override\\n    returns (uint256)\\n    {\\n        MaturationStruct storage m = maturing[_userAddress];\\n\\n        // if there are mature deposits, treat them as staked\\n        if (m.timestamp.add(timeToStake) <= block.timestamp) {\\n            return staked[_userAddress].add(m.amount);\\n        }\\n\\n        return staked[_userAddress];\\n    }\\n}\\n\",\"keccak256\":\"0x8de882daea14f6c7b51fbe3a547569298734830792a5bc2e693108369366a195\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161098d38038061098d8339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b039093166001600160a01b0319909316929092179091556001919091556002556109128061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806367ba9b911161005b57806367ba9b91146101275780638e9f04b51461014d5780639a05154514610173578063a694fc3a1461019957610088565b80632e17de781461008d5780632e1a7d4d146100ac5780633a02a42d146100c9578063419be62414610101575b600080fd5b6100aa600480360360208110156100a357600080fd5b50356101b6565b005b6100aa600480360360208110156100c257600080fd5b50356102c9565b6100ef600480360360208110156100df57600080fd5b50356001600160a01b0316610451565b60408051918252519081900360200190f35b6100ef6004803603602081101561011757600080fd5b50356001600160a01b03166104cf565b6100ef6004803603602081101561013d57600080fd5b50356001600160a01b0316610511565b6100ef6004803603602081101561016357600080fd5b50356001600160a01b0316610542565b6100ef6004803603602081101561018957600080fd5b50356001600160a01b031661055d565b6100aa600480360360208110156101af57600080fd5b5035610586565b60008111610201576040805162461bcd60e51b8152602060048201526013602482015272616d6f756e742063616e74206265207a65726f60681b604482015290519081900360640190fd5b33600090815260056020908152604080832060049092529091208054831161023657805461022f9084610752565b8155610273565b805461025d90610247908590610752565b3360009081526003602052604090205490610752565b3360009081526003602052604081209190915581555b815461027f908461079b565b82554260018301819055600254610296919061079b565b82546040513391907f15e1b1e6a67db05b5e4e898cc13f87b8485df622bfebf03d1508efa026a2e15c90600090a4505050565b33600090815260056020526040902081610320576040805162461bcd60e51b8152602060048201526013602482015272616d6f756e742063616e74206265207a65726f60681b604482015290519081900360640190fd5b4261033a600254836001015461079b90919063ffffffff16565b11156103775760405162461bcd60e51b815260040180806020018281038252602781526020018061088d6027913960400191505060405180910390fd5b61039d826040518060600160405280602981526020016108b460299139835491906107f5565b8155600080546040805163a9059cbb60e01b81523360048201526024810186905290516001600160a01b039092169263a9059cbb926044808401936020939083900390910190829087803b1580156103f457600080fd5b505af1158015610408573d6000803e3d6000fd5b505050506040513d602081101561041e57600080fd5b5050604051339083907f8353ffcac0876ad14e226d9783c04540bfebf13871e868157d2a391cad98e91890600090a35050565b6001600160a01b03811660009081526004602052604081206001805490820154429161047d919061079b565b116104ae5780546001600160a01b0384166000908152600360205260409020546104a69161079b565b9150506104ca565b50506001600160a01b0381166000908152600360205260409020545b919050565b6001600160a01b0381166000908152600460205260408120600180549082015442916104fb919061079b565b1161050a5760009150506104ca565b5492915050565b6002546001600160a01b038216600090815260056020526040812060010154909161053c919061079b565b92915050565b6001600160a01b031660009081526005602052604090205490565b600180546001600160a01b03831660009081526004602052604081209092015461053c9161079b565b600081116105d1576040805162461bcd60e51b8152602060048201526013602482015272616d6f756e742063616e74206265207a65726f60681b604482015290519081900360640190fd5b3360009081526005602090815260408083206004909252909120600180549082015442916105ff919061079b565b116106355780543360009081526003602052604090205461061f9161079b565b3360009081526003602052604081209190915581555b815483116106505781546106499084610752565b82556106fd565b60005482546001600160a01b03909116906323b872dd9033903090610676908890610752565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156106cc57600080fd5b505af11580156106e0573d6000803e3d6000fd5b505050506040513d60208110156106f657600080fd5b5050600082555b8054610709908461079b565b81554260018083018290555461071f919061079b565b81546040513391907f02567b2553aeb44e4ddd5d68462774dc3de158cb0f2c2da1740e729b22086aff90600090a4505050565b600061079483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506107f5565b9392505050565b600082820183811015610794576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081848411156108845760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610849578181015183820152602001610831565b50505050905090810190601f1680156108765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe746f6b656e7320617265206e6f742079657420726561647920746f2062652072656c65617365646e6f7420656e6f75676820746f6b656e732077616974696e6720746f2062652072656c65617365643ba2646970667358221220423c3ed83b9901fe571ec61dc76354e3a0a0c32f47f76c9e3978cfe3f0ac2e6064736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806367ba9b911161005b57806367ba9b91146101275780638e9f04b51461014d5780639a05154514610173578063a694fc3a1461019957610088565b80632e17de781461008d5780632e1a7d4d146100ac5780633a02a42d146100c9578063419be62414610101575b600080fd5b6100aa600480360360208110156100a357600080fd5b50356101b6565b005b6100aa600480360360208110156100c257600080fd5b50356102c9565b6100ef600480360360208110156100df57600080fd5b50356001600160a01b0316610451565b60408051918252519081900360200190f35b6100ef6004803603602081101561011757600080fd5b50356001600160a01b03166104cf565b6100ef6004803603602081101561013d57600080fd5b50356001600160a01b0316610511565b6100ef6004803603602081101561016357600080fd5b50356001600160a01b0316610542565b6100ef6004803603602081101561018957600080fd5b50356001600160a01b031661055d565b6100aa600480360360208110156101af57600080fd5b5035610586565b60008111610201576040805162461bcd60e51b8152602060048201526013602482015272616d6f756e742063616e74206265207a65726f60681b604482015290519081900360640190fd5b33600090815260056020908152604080832060049092529091208054831161023657805461022f9084610752565b8155610273565b805461025d90610247908590610752565b3360009081526003602052604090205490610752565b3360009081526003602052604081209190915581555b815461027f908461079b565b82554260018301819055600254610296919061079b565b82546040513391907f15e1b1e6a67db05b5e4e898cc13f87b8485df622bfebf03d1508efa026a2e15c90600090a4505050565b33600090815260056020526040902081610320576040805162461bcd60e51b8152602060048201526013602482015272616d6f756e742063616e74206265207a65726f60681b604482015290519081900360640190fd5b4261033a600254836001015461079b90919063ffffffff16565b11156103775760405162461bcd60e51b815260040180806020018281038252602781526020018061088d6027913960400191505060405180910390fd5b61039d826040518060600160405280602981526020016108b460299139835491906107f5565b8155600080546040805163a9059cbb60e01b81523360048201526024810186905290516001600160a01b039092169263a9059cbb926044808401936020939083900390910190829087803b1580156103f457600080fd5b505af1158015610408573d6000803e3d6000fd5b505050506040513d602081101561041e57600080fd5b5050604051339083907f8353ffcac0876ad14e226d9783c04540bfebf13871e868157d2a391cad98e91890600090a35050565b6001600160a01b03811660009081526004602052604081206001805490820154429161047d919061079b565b116104ae5780546001600160a01b0384166000908152600360205260409020546104a69161079b565b9150506104ca565b50506001600160a01b0381166000908152600360205260409020545b919050565b6001600160a01b0381166000908152600460205260408120600180549082015442916104fb919061079b565b1161050a5760009150506104ca565b5492915050565b6002546001600160a01b038216600090815260056020526040812060010154909161053c919061079b565b92915050565b6001600160a01b031660009081526005602052604090205490565b600180546001600160a01b03831660009081526004602052604081209092015461053c9161079b565b600081116105d1576040805162461bcd60e51b8152602060048201526013602482015272616d6f756e742063616e74206265207a65726f60681b604482015290519081900360640190fd5b3360009081526005602090815260408083206004909252909120600180549082015442916105ff919061079b565b116106355780543360009081526003602052604090205461061f9161079b565b3360009081526003602052604081209190915581555b815483116106505781546106499084610752565b82556106fd565b60005482546001600160a01b03909116906323b872dd9033903090610676908890610752565b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156106cc57600080fd5b505af11580156106e0573d6000803e3d6000fd5b505050506040513d60208110156106f657600080fd5b5050600082555b8054610709908461079b565b81554260018083018290555461071f919061079b565b81546040513391907f02567b2553aeb44e4ddd5d68462774dc3de158cb0f2c2da1740e729b22086aff90600090a4505050565b600061079483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506107f5565b9392505050565b600082820183811015610794576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081848411156108845760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610849578181015183820152602001610831565b50505050905090810190601f1680156108765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe746f6b656e7320617265206e6f742079657420726561647920746f2062652072656c65617365646e6f7420656e6f75676820746f6b656e732077616974696e6720746f2062652072656c65617365643ba2646970667358221220423c3ed83b9901fe571ec61dc76354e3a0a0c32f47f76c9e3978cfe3f0ac2e6064736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_ctsiAddress": "address of compatible ERC20",
          "_timeToRelease": "time it takes from unstake to tokens being unlocked.",
          "_timeToStake": "time it takes for deposited tokens to become staked."
        }
      },
      "getMaturingBalance(address)": {
        "returns": {
          "_0": "amount that will get staked after finalization"
        }
      },
      "getMaturingTimestamp(address)": {
        "returns": {
          "_0": "timestamp of when finalizeStakes() is callable"
        }
      },
      "getReleasingBalance(address)": {
        "returns": {
          "_0": "amount that will get withdrew after finalization"
        }
      },
      "getReleasingTimestamp(address)": {
        "returns": {
          "_0": "timestamp of when finalizeWithdraw() is callable"
        }
      },
      "getStakedBalance(address)": {
        "params": {
          "_userAddress": "user to retrieve staked balance from"
        },
        "returns": {
          "_0": "finalized staked of _userAddress"
        }
      },
      "stake(uint256)": {
        "params": {
          "_amount": "The amount of tokens that are gonna be deposited."
        }
      },
      "unstake(uint256)": {
        "params": {
          "_amount": "The amount of tokens that are gonna be unstaked."
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount of tokens that are gonna be transferred."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Stake(uint256,address,uint256)": {
        "notice": "CTSI tokens were deposited, they count as stake after _maturationDate"
      },
      "Unstake(uint256,address,uint256)": {
        "notice": "Unstake tokens, moving them to releasing structure"
      },
      "Withdraw(uint256,address)": {
        "notice": "Withdraw process was finalized"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "constructor"
      },
      "getMaturingBalance(address)": {
        "notice": "Returns the balance waiting/ready to be matured"
      },
      "getMaturingTimestamp(address)": {
        "notice": "Returns the timestamp when next deposit can be finalized"
      },
      "getReleasingBalance(address)": {
        "notice": "Returns the balance waiting/ready to be released"
      },
      "getReleasingTimestamp(address)": {
        "notice": "Returns the timestamp when next withdraw can be finalized"
      },
      "getStakedBalance(address)": {
        "notice": "Returns total amount of tokens counted as stake"
      },
      "stake(uint256)": {
        "notice": "Deposit CTSI to be staked. The money will turn into staked         balance after timeToStake days"
      },
      "unstake(uint256)": {
        "notice": "Remove tokens from staked balance. The money can         be released after timeToRelease seconds, if the         function withdraw is called."
      },
      "withdraw(uint256)": {
        "notice": "Transfer tokens to user's wallet."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3028,
        "contract": "contracts/StakingImpl.sol:StakingImpl",
        "label": "ctsi",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)1500"
      },
      {
        "astId": 3030,
        "contract": "contracts/StakingImpl.sol:StakingImpl",
        "label": "timeToStake",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3032,
        "contract": "contracts/StakingImpl.sol:StakingImpl",
        "label": "timeToRelease",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3036,
        "contract": "contracts/StakingImpl.sol:StakingImpl",
        "label": "staked",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3040,
        "contract": "contracts/StakingImpl.sol:StakingImpl",
        "label": "maturing",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(MaturationStruct)3049_storage)"
      },
      {
        "astId": 3044,
        "contract": "contracts/StakingImpl.sol:StakingImpl",
        "label": "releasing",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(MaturationStruct)3049_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1500": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(MaturationStruct)3049_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingImpl.MaturationStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(MaturationStruct)3049_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MaturationStruct)3049_storage": {
        "encoding": "inplace",
        "label": "struct StakingImpl.MaturationStruct",
        "members": [
          {
            "astId": 3046,
            "contract": "contracts/StakingImpl.sol:StakingImpl",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3048,
            "contract": "contracts/StakingImpl.sol:StakingImpl",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}