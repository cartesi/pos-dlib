{
  "address": "0x168c31E8A09AB01457Ac3c7dfab034599C57eb86",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_difficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ethBlockStamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "whenCanProduceBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a8f5f9d46e2428999569340c24f3c5e35e31d8e9d88d914337e3a49bf266510",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x168c31E8A09AB01457Ac3c7dfab034599C57eb86",
    "transactionIndex": 45,
    "gasUsed": "255089",
    "logsBloom": "0x
    "blockHash": "0x8c21f5187b42325beabeb3e11e3045fe350f61e244738b47ee5da6022cf38f7e",
    "transactionHash": "0x0a8f5f9d46e2428999569340c24f3c5e35e31d8e9d88d914337e3a49bf266510",
    "logs": [],
    "blockNumber": 7425672,
    "cumulativeGasUsed": "6432123",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f1974c6906bc5c057a1d6d58e9bdeddb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_difficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethBlockStamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"whenCanProduceBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"whenCanProduceBlock(uint256,uint256,address,uint256)\":{\"params\":{\"_difficulty\":\"ethereum block number when current selection started\",\"_ethBlockStamp\":\"ethereum block number when current selection started\",\"_user\":\"the address that is gonna get checked\",\"_weight\":\"number that will weight the random number, most likely will be the number of staked tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"whenCanProduceBlock(uint256,uint256,address,uint256)\":{\"notice\":\"Check when address is allowed to produce block\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/Eligibility.sol\":\"Eligibility\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/UnrolledCordic.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n///@title UnrolledCordic.sol\\n///@author Gabriel Barros, Diego Nehab\\npragma solidity ^0.8.0;\\n\\nlibrary UnrolledCordic {\\n    uint256 constant one = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 constant log2_e = 0xb8aa3b295c17f0bbbe87fed0691d3e88eb577aa8dd695a588b25166cd1a13248;\\n\\n    uint64 constant N = 64;\\n    uint256 constant log2_ks0 = 0xb31fb7d64898b3e15c01a39fbd687a02934f0979a3715fd4ae00d1cfdeb43d0;\\n    uint256 constant log2_ks1 = 0xb84e236bd563ba016fe50b6ef0851802dcf2d0b85a453105aeb4dd63bf61cc;\\n    uint256 constant log2_ks2 = 0xb8a476150dfe4001713d62f7957c3002e24ca6e87e8a8005c3e0ffc29d593;\\n    uint256 constant log2_ks3 = 0xb8a9ded47c110001715305002e4b0002e2a32762fa6c0005c53ac47e94d9;\\n    uint256 constant log2_ks4 = 0xb8aa35640a80000171545f3d72b00002e2a8905062300005c55067f6e59;\\n    uint256 constant log2_ks5 = 0xb8aa3acd07000001715474e164000002e2a8e6e01f000005c551c2359a;\\n\\n    function log2m64(uint256 x) internal pure returns (uint256) {\\n        uint256 y = 0;\\n        uint256 t;\\n\\n        unchecked {\\n            // round(log_2(1+1/2^i)*2^64) for i = 1..4 packed into 64bits each\\n            t = x + (x >> 1);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks0 << 192;\\n            }\\n            t = x + (x >> 2);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 64) << 192;\\n            }\\n            t = x + (x >> 3);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 128) << 192;\\n            }\\n            t = x + (x >> 4);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 5..8 packed into 64bits each\\n            t = x + (x >> 5);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks1 << 192;\\n            }\\n            t = x + (x >> 6);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 64) << 192;\\n            }\\n            t = x + (x >> 7);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 128) << 192;\\n            }\\n            t = x + (x >> 8);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 9..12 packed into 64bits each\\n            t = x + (x >> 9);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks2 << 192;\\n            }\\n            t = x + (x >> 10);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 64) << 192;\\n            }\\n            t = x + (x >> 11);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 128) << 192;\\n            }\\n            t = x + (x >> 12);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 13..16 packed into 64bits each\\n            t = x + (x >> 13);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks3 << 192;\\n            }\\n            t = x + (x >> 14);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 64) << 192;\\n            }\\n            t = x + (x >> 15);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 128) << 192;\\n            }\\n            t = x + (x >> 16);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 17..20 packed into 64bits each\\n            t = x + (x >> 17);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks4 << 192;\\n            }\\n            t = x + (x >> 18);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 64) << 192;\\n            }\\n            t = x + (x >> 19);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 128) << 192;\\n            }\\n            t = x + (x >> 20);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 21..24 packed into 64bits each\\n            t = x + (x >> 21);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks5 << 192;\\n            }\\n            t = x + (x >> 22);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 64) << 192;\\n            }\\n            t = x + (x >> 23);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 128) << 192;\\n            }\\n            t = x + (x >> 24);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 192) << 192;\\n            }\\n\\n            uint256 r = one - x;\\n            y += mulhi128(log2_e, mulhi128(r, one + (r >> 1)) << 1) << 1;\\n            return y >> (255 - 64);\\n        }\\n    }\\n\\n    function log2Times1e18(uint256 val) external pure returns (uint256) {\\n        int256 il = ilog2(val);\\n        uint256 skewedRes;\\n        unchecked {\\n            if (il + 1 <= 255) {\\n                skewedRes = (uint256(il + 1) << N) - log2m64(val << (255 - uint256(il + 1)));\\n            } else {\\n                skewedRes = (uint256(il + 1) << N) - log2m64(val >> uint256((il + 1) - 255));\\n            }\\n            return (skewedRes * 1e18) >> N;\\n        }\\n    }\\n\\n    function mulhi128(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return (a >> 128) * (b >> 128);\\n        }\\n    }\\n\\n    function ilog2(uint256 val) internal pure returns (int256) {\\n        require(val > 0, \\\"must be greater than zero\\\");\\n        unchecked {\\n            return 255 - int256(clz(val));\\n        }\\n    }\\n\\n    /// @notice count leading zeros\\n    /// @param _num number you want the clz of\\n    /// @dev this a binary search implementation\\n    function clz(uint256 _num) internal pure returns (uint256) {\\n        if (_num == 0) return 256;\\n        unchecked {\\n            uint256 n = 0;\\n            if (_num & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 == 0) {\\n                n = n + 128;\\n                _num = _num << 128;\\n            }\\n            if (_num & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 64;\\n                _num = _num << 64;\\n            }\\n            if (_num & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 32;\\n                _num = _num << 32;\\n            }\\n            if (_num & 0xFFFF000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 16;\\n                _num = _num << 16;\\n            }\\n            if (_num & 0xFF00000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 8;\\n                _num = _num << 8;\\n            }\\n            if (_num & 0xF000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 4;\\n                _num = _num << 4;\\n            }\\n            if (_num & 0xC000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 2;\\n                _num = _num << 2;\\n            }\\n            if (_num & 0x8000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 1;\\n            }\\n\\n            return n;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdf677afbc4b061c8d5ca62ebd23565ae34a4b5a67a9c1d420ca0a5cf533caa60\",\"license\":\"Apache-2.0\"},\"contracts/v2/Eligibility.sol\":{\"content\":\"// Copyright 2022 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Block Selector Library\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@cartesi/util/contracts/UnrolledCordic.sol\\\";\\n\\nlibrary Eligibility {\\n    uint256 constant C_40 = 40; // 40 blocks\\n    uint256 constant C_256 = 256; // 256 blocks\\n    uint256 constant DIFFICULTY_BASE_MULTIPLIER = 256 * 1e18; //256 M\\n    uint256 constant UINT256_MAX = 2**256 - 1;\\n\\n    /// @notice Check when address is allowed to produce block\\n    /// @param _ethBlockStamp ethereum block number when current selection started\\n    /// @param _difficulty ethereum block number when current selection started\\n    /// @param _user the address that is gonna get checked\\n    /// @param _weight number that will weight the random number, most likely will be the number of staked tokens\\n    function whenCanProduceBlock(\\n        uint256 _difficulty,\\n        uint256 _ethBlockStamp,\\n        address _user,\\n        uint256 _weight\\n    ) external view returns (uint256) {\\n        // cannot produce if block selector goal hasnt been decided yet\\n        // goal is defined the block after selection was reset\\n        // cannot produce if weight is zero\\n        if (getSelectionBlocksPassed(_ethBlockStamp) == 0 || _weight == 0) {\\n            return UINT256_MAX;\\n        }\\n\\n        uint256 multiplier = 0;\\n        // we want overflow and underflow on purpose\\n        unchecked {\\n            multiplier =\\n                DIFFICULTY_BASE_MULTIPLIER -\\n                getLogOfRandom(_user, _ethBlockStamp);\\n        }\\n\\n        uint256 blocksToWait = (_difficulty * multiplier) / (_weight * 1e12);\\n\\n        unchecked {\\n            return blocksToWait + _ethBlockStamp + C_40;\\n        }\\n    }\\n\\n    /// @notice Calculates the log of the random number between the goal and callers address\\n    /// @param _user address to calculate log of random\\n    /// @param _ethBlockStamp main chain block number of last sidechain block\\n    /// @return log of random number between goal and callers address * 1M\\n    function getLogOfRandom(address _user, uint256 _ethBlockStamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // seed for goal takes a block in the future (+40) so it is harder to manipulate\\n        bytes32 currentGoal = blockhash(getSeed(_ethBlockStamp + C_40));\\n        bytes32 hashedAddress = keccak256(abi.encodePacked(_user));\\n        uint256 distance = uint256(\\n            keccak256(abi.encodePacked(hashedAddress, currentGoal))\\n        );\\n\\n        return UnrolledCordic.log2Times1e18(distance);\\n    }\\n\\n    function getSeed(uint256 _previousTarget) internal view returns (uint256) {\\n        uint256 diff = block.number - _previousTarget;\\n        uint256 res = diff / C_256;\\n\\n        // if difference is multiple of 256 (256, 512, 1024)\\n        // preserve old target\\n        if (diff % C_256 == 0) {\\n            return _previousTarget + ((res - 1) * C_256);\\n        }\\n\\n        return _previousTarget + (res * C_256);\\n    }\\n\\n    /// @notice Returns the duration in blocks of current selection proccess\\n    /// @param _ethBlockStamp ethereum block number of last sidechain block\\n    /// @return number of ethereum blocks passed since last selection goal was defined\\n    /// @dev blocks passed resets when target resets\\n    function getSelectionBlocksPassed(uint256 _ethBlockStamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            // new goal block is decided 40 blocks after sidechain block is created\\n            uint256 goalBlock = _ethBlockStamp + C_40;\\n\\n            // target hasnt been set\\n            if (goalBlock >= block.number) return 0;\\n\\n            uint256 blocksPassed = block.number - goalBlock;\\n\\n            // if blocksPassed is multiple of 256, 256 blocks have passed\\n            // this avoids blocksPassed going to zero right before target change\\n            if (blocksPassed % C_256 == 0) return C_256;\\n\\n            return blocksPassed % C_256;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b5fc81cd179b5d2ecbd68589963470065a8b0fbd64738c9dbb779fdbd94fbad\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6103a761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063261cb77a1461003a575b600080fd5b61004d61004836600461026b565b61005f565b60405190815260200160405180910390f35b600061006a846100d2565b1580610074575081155b1561008257506000196100ca565b600061008e848661010d565b680de0b6b3a76400000003905060006100ac8464e8d4a510006102cc565b6100b683896102cc565b6100c09190610301565b8601602801925050505b949350505050565b6000602882014381106100e85750600092915050565b43819003610100810660000361010357506101009392505050565b60ff169392505050565b60008061012361011e602885610315565b61020b565b6040516bffffffffffffffffffffffff19606087901b1660208201529040915060009060340160408051601f198184030181528282528051602091820120908301819052908201849052915060009060600160408051808303601f1901815290829052805160209091012063c370ed0960e01b82526004820181905291507321A46e1D173Fd616B6D44F3b4Ec14e721824C6149063c370ed0990602401602060405180830381865af41580156101dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610201919061032d565b9695505050505050565b6000806102188343610346565b9050600061022861010083610301565b90506102366101008361035d565b60000361025f5761010061024b600183610346565b61025591906102cc565b6100ca9085610315565b610255610100826102cc565b6000806000806080858703121561028157600080fd5b843593506020850135925060408501356001600160a01b03811681146102a657600080fd5b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156102e6576102e66102b6565b500290565b634e487b7160e01b600052601260045260246000fd5b600082610310576103106102eb565b500490565b60008219821115610328576103286102b6565b500190565b60006020828403121561033f57600080fd5b5051919050565b600082821015610358576103586102b6565b500390565b60008261036c5761036c6102eb565b50069056fea2646970667358221220cd2bbea35e83e3678870cfef8685af8c97107d6b1af1581242ef37bd0cbcdbf164736f6c634300080e0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063261cb77a1461003a575b600080fd5b61004d61004836600461026b565b61005f565b60405190815260200160405180910390f35b600061006a846100d2565b1580610074575081155b1561008257506000196100ca565b600061008e848661010d565b680de0b6b3a76400000003905060006100ac8464e8d4a510006102cc565b6100b683896102cc565b6100c09190610301565b8601602801925050505b949350505050565b6000602882014381106100e85750600092915050565b43819003610100810660000361010357506101009392505050565b60ff169392505050565b60008061012361011e602885610315565b61020b565b6040516bffffffffffffffffffffffff19606087901b1660208201529040915060009060340160408051601f198184030181528282528051602091820120908301819052908201849052915060009060600160408051808303601f1901815290829052805160209091012063c370ed0960e01b825260048201819052915073__$1cacf4970e0423274c39545237a099b14f$__9063c370ed0990602401602060405180830381865af41580156101dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610201919061032d565b9695505050505050565b6000806102188343610346565b9050600061022861010083610301565b90506102366101008361035d565b60000361025f5761010061024b600183610346565b61025591906102cc565b6100ca9085610315565b610255610100826102cc565b6000806000806080858703121561028157600080fd5b843593506020850135925060408501356001600160a01b03811681146102a657600080fd5b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156102e6576102e66102b6565b500290565b634e487b7160e01b600052601260045260246000fd5b600082610310576103106102eb565b500490565b60008219821115610328576103286102b6565b500190565b60006020828403121561033f57600080fd5b5051919050565b600082821015610358576103586102b6565b500390565b60008261036c5761036c6102eb565b50069056fea2646970667358221220cd2bbea35e83e3678870cfef8685af8c97107d6b1af1581242ef37bd0cbcdbf164736f6c634300080e0033",
  "libraries": {
    "UnrolledCordic": "0x21A46e1D173Fd616B6D44F3b4Ec14e721824C614"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "whenCanProduceBlock(uint256,uint256,address,uint256)": {
        "params": {
          "_difficulty": "ethereum block number when current selection started",
          "_ethBlockStamp": "ethereum block number when current selection started",
          "_user": "the address that is gonna get checked",
          "_weight": "number that will weight the random number, most likely will be the number of staked tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "whenCanProduceBlock(uint256,uint256,address,uint256)": {
        "notice": "Check when address is allowed to produce block"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}