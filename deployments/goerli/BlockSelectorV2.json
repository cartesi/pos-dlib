{
  "address": "0x3C045F407ecec9D81F7f5A9064090D2E5D51c378",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "producer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "name": "BlockProduced",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "canProduceBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBlockCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getDifficultyAdjustmentParameter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getMinDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentNonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getSelectionBlockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "_uintValues",
          "type": "uint256[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSubInstances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTargetInterval",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDifficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialDifficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_difficultyAdjustmentParameter",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_targetInterval",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_posManagerAddress",
          "type": "address"
        }
      ],
      "name": "instantiate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isConcerned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "produceBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x67d188a406fffa0f3879bf2a17b6c34fcbd11dc585982b5bed8b37c943849734",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x3C045F407ecec9D81F7f5A9064090D2E5D51c378",
    "transactionIndex": 32,
    "gasUsed": "864648",
    "logsBloom": "0x
    "blockHash": "0x05a29d09924847d8641a938944e6d86dd15663dd8b1ad8f7f099d526616ccf3c",
    "transactionHash": "0x67d188a406fffa0f3879bf2a17b6c34fcbd11dc585982b5bed8b37c943849734",
    "logs": [],
    "blockNumber": 7425665,
    "cumulativeGasUsed": "12724277",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f1974c6906bc5c057a1d6d58e9bdeddb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"producer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"name\":\"BlockProduced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"canProduceBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBlockCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDifficultyAdjustmentParameter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMinDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSelectionBlockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_uintValues\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSubInstances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTargetInterval\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_difficultyAdjustmentParameter\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_targetInterval\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_posManagerAddress\",\"type\":\"address\"}],\"name\":\"instantiate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConcerned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"produceBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canProduceBlock(uint256,address,uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector you want to interact with\",\"_user\":\"the address that is gonna get checked\",\"_weight\":\"number that will weight the random number, most likely will be the number of staked tokens\"}},\"getBlockCount(uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"number of blocks\"}},\"getDifficulty(uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"difficulty of current selection\"}},\"getDifficultyAdjustmentParameter(uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"difficulty adjustment parameter\"}},\"getMinDifficulty(uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"min difficulty of instance\"}},\"getSelectionBlockDuration(uint256)\":{\"details\":\"block duration resets every 256 blocks\",\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"number of etheereum blocks passed since last selection started\"}},\"getTargetInterval(uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"target interval\"}},\"instantiate(uint256,uint256,uint32,uint32,address)\":{\"params\":{\"_difficultyAdjustmentParameter\":\"how quickly the difficulty gets updated according to the difference between time passed and target interval.\",\"_initialDifficulty\":\"starting difficulty\",\"_minDifficulty\":\"lower bound for difficulty parameter\",\"_posManagerAddress\":\"address of ProofOfStake that will use this instance\",\"_targetInterval\":\"how often we want produce noether blocks, in ethereum blocks\"}},\"produceBlock(uint256,address,uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector you want to interact with\",\"_user\":\"address that has the right to produce block\",\"_weight\":\"number that will weight the random number, will be the number of staked tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canProduceBlock(uint256,address,uint256)\":{\"notice\":\"Check if address is allowed to produce block\"},\"getBlockCount(uint256)\":{\"notice\":\"Returns the number of blocks\"},\"getDifficulty(uint256)\":{\"notice\":\"Returns current difficulty\"},\"getDifficultyAdjustmentParameter(uint256)\":{\"notice\":\"Returns difficulty adjustment parameter\"},\"getMinDifficulty(uint256)\":{\"notice\":\"Returns min difficulty\"},\"getSelectionBlockDuration(uint256)\":{\"notice\":\"Returns time since last selection started, in ethereum blocks\"},\"getTargetInterval(uint256)\":{\"notice\":\"Returns target interval\"},\"instantiate(uint256,uint256,uint32,uint32,address)\":{\"notice\":\"Instantiates a BlockSelector structure\"},\"produceBlock(uint256,address,uint256)\":{\"notice\":\"Produces a block\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlockSelectorV2.sol\":\"BlockSelectorV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/DecoratedV2.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\ncontract DecoratedV2 {\\n    // This contract defines several modifiers but does not use\\n    // them - they will be used in derived contracts.\\n    modifier onlyBy(address user) {\\n        require(msg.sender == user, \\\"Cannot be called by user\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfter(uint256 time) {\\n        require(block.timestamp > time, \\\"Cannot be called now\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x31d2dbc5f98938446a52f88254423b495b89fba896fa84e4749144f404cc8f2b\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/InstantiatorImplV2.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./InstantiatorV2.sol\\\";\\n\\nabstract contract InstantiatorImplV2 is InstantiatorV2 {\\n    uint256 public currentIndex = 0;\\n\\n    mapping(uint256 => bool) internal active;\\n    mapping(uint256 => uint256) internal nonce;\\n\\n    modifier onlyInstantiated(uint256 _index) {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        _;\\n    }\\n\\n    modifier onlyActive(uint256 _index) {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        require(isActive(_index), \\\"Index inactive\\\");\\n        _;\\n    }\\n\\n    modifier increasesNonce(uint256 _index) {\\n        nonce[_index]++;\\n        _;\\n    }\\n\\n    function isActive(uint256 _index) public view override returns (bool) {\\n        return (active[_index]);\\n    }\\n\\n    function getNonce(uint256 _index) public view override onlyActive(_index) returns (uint256 currentNonce) {\\n        return nonce[_index];\\n    }\\n\\n    function deactivate(uint256 _index) internal {\\n        active[_index] = false;\\n        nonce[_index] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4f11ab3dad7288e851e71cbd19459a2889ccb91e61b355615511df3ac363823d\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/InstantiatorV2.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity >=0.7.0;\\n\\ninterface InstantiatorV2 {\\n    function isActive(uint256 _index) external view returns (bool);\\n\\n    function getNonce(uint256 _index) external view returns (uint256);\\n\\n    function isConcerned(uint256 _index, address _user) external view returns (bool);\\n\\n    function getSubInstances(uint256 _index, address)\\n        external\\n        view\\n        returns (address[] memory _addresses, uint256[] memory _indices);\\n}\\n\",\"keccak256\":\"0x2cc8e61c50884ffb1d43ff7bdd105d6a10ca5e5aa66c5887b0d49b1f3b8c5689\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/UnrolledCordic.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n///@title UnrolledCordic.sol\\n///@author Gabriel Barros, Diego Nehab\\npragma solidity ^0.8.0;\\n\\nlibrary UnrolledCordic {\\n    uint256 constant one = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 constant log2_e = 0xb8aa3b295c17f0bbbe87fed0691d3e88eb577aa8dd695a588b25166cd1a13248;\\n\\n    uint64 constant N = 64;\\n    uint256 constant log2_ks0 = 0xb31fb7d64898b3e15c01a39fbd687a02934f0979a3715fd4ae00d1cfdeb43d0;\\n    uint256 constant log2_ks1 = 0xb84e236bd563ba016fe50b6ef0851802dcf2d0b85a453105aeb4dd63bf61cc;\\n    uint256 constant log2_ks2 = 0xb8a476150dfe4001713d62f7957c3002e24ca6e87e8a8005c3e0ffc29d593;\\n    uint256 constant log2_ks3 = 0xb8a9ded47c110001715305002e4b0002e2a32762fa6c0005c53ac47e94d9;\\n    uint256 constant log2_ks4 = 0xb8aa35640a80000171545f3d72b00002e2a8905062300005c55067f6e59;\\n    uint256 constant log2_ks5 = 0xb8aa3acd07000001715474e164000002e2a8e6e01f000005c551c2359a;\\n\\n    function log2m64(uint256 x) internal pure returns (uint256) {\\n        uint256 y = 0;\\n        uint256 t;\\n\\n        unchecked {\\n            // round(log_2(1+1/2^i)*2^64) for i = 1..4 packed into 64bits each\\n            t = x + (x >> 1);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks0 << 192;\\n            }\\n            t = x + (x >> 2);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 64) << 192;\\n            }\\n            t = x + (x >> 3);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 128) << 192;\\n            }\\n            t = x + (x >> 4);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 5..8 packed into 64bits each\\n            t = x + (x >> 5);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks1 << 192;\\n            }\\n            t = x + (x >> 6);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 64) << 192;\\n            }\\n            t = x + (x >> 7);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 128) << 192;\\n            }\\n            t = x + (x >> 8);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 9..12 packed into 64bits each\\n            t = x + (x >> 9);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks2 << 192;\\n            }\\n            t = x + (x >> 10);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 64) << 192;\\n            }\\n            t = x + (x >> 11);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 128) << 192;\\n            }\\n            t = x + (x >> 12);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 13..16 packed into 64bits each\\n            t = x + (x >> 13);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks3 << 192;\\n            }\\n            t = x + (x >> 14);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 64) << 192;\\n            }\\n            t = x + (x >> 15);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 128) << 192;\\n            }\\n            t = x + (x >> 16);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 17..20 packed into 64bits each\\n            t = x + (x >> 17);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks4 << 192;\\n            }\\n            t = x + (x >> 18);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 64) << 192;\\n            }\\n            t = x + (x >> 19);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 128) << 192;\\n            }\\n            t = x + (x >> 20);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 21..24 packed into 64bits each\\n            t = x + (x >> 21);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks5 << 192;\\n            }\\n            t = x + (x >> 22);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 64) << 192;\\n            }\\n            t = x + (x >> 23);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 128) << 192;\\n            }\\n            t = x + (x >> 24);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 192) << 192;\\n            }\\n\\n            uint256 r = one - x;\\n            y += mulhi128(log2_e, mulhi128(r, one + (r >> 1)) << 1) << 1;\\n            return y >> (255 - 64);\\n        }\\n    }\\n\\n    function log2Times1e18(uint256 val) external pure returns (uint256) {\\n        int256 il = ilog2(val);\\n        uint256 skewedRes;\\n        unchecked {\\n            if (il + 1 <= 255) {\\n                skewedRes = (uint256(il + 1) << N) - log2m64(val << (255 - uint256(il + 1)));\\n            } else {\\n                skewedRes = (uint256(il + 1) << N) - log2m64(val >> uint256((il + 1) - 255));\\n            }\\n            return (skewedRes * 1e18) >> N;\\n        }\\n    }\\n\\n    function mulhi128(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return (a >> 128) * (b >> 128);\\n        }\\n    }\\n\\n    function ilog2(uint256 val) internal pure returns (int256) {\\n        require(val > 0, \\\"must be greater than zero\\\");\\n        unchecked {\\n            return 255 - int256(clz(val));\\n        }\\n    }\\n\\n    /// @notice count leading zeros\\n    /// @param _num number you want the clz of\\n    /// @dev this a binary search implementation\\n    function clz(uint256 _num) internal pure returns (uint256) {\\n        if (_num == 0) return 256;\\n        unchecked {\\n            uint256 n = 0;\\n            if (_num & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 == 0) {\\n                n = n + 128;\\n                _num = _num << 128;\\n            }\\n            if (_num & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 64;\\n                _num = _num << 64;\\n            }\\n            if (_num & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 32;\\n                _num = _num << 32;\\n            }\\n            if (_num & 0xFFFF000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 16;\\n                _num = _num << 16;\\n            }\\n            if (_num & 0xFF00000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 8;\\n                _num = _num << 8;\\n            }\\n            if (_num & 0xF000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 4;\\n                _num = _num << 4;\\n            }\\n            if (_num & 0xC000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 2;\\n                _num = _num << 2;\\n            }\\n            if (_num & 0x8000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 1;\\n            }\\n\\n            return n;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdf677afbc4b061c8d5ca62ebd23565ae34a4b5a67a9c1d420ca0a5cf533caa60\",\"license\":\"Apache-2.0\"},\"contracts/BlockSelectorV2.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Block Selector\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@cartesi/util/contracts/UnrolledCordic.sol\\\";\\nimport \\\"@cartesi/util/contracts/InstantiatorImplV2.sol\\\";\\nimport \\\"@cartesi/util/contracts/DecoratedV2.sol\\\";\\n\\ncontract BlockSelectorV2 is InstantiatorImplV2, DecoratedV2 {\\n    uint256 constant C_256 = 256; // 256 blocks\\n    uint256 constant DIFFICULTY_BASE_MULTIPLIER = 256 * 1e18; //256 M\\n    uint256 constant ADJUSTMENT_BASE = 1000000; // 1M\\n\\n    struct BlockSelectorCtx {\\n        // @dev the order of variables are important for storage packing\\n        // 32 bytes constants\\n        uint256 minDifficulty; // lower bound for difficulty\\n        // 32 bytes var\\n        uint256 difficulty; // difficulty parameter defines how big the interval will be\\n        // 20 bytes constants\\n        address posManagerAddress;\\n        // 4 bytes constants\\n        uint32 difficultyAdjustmentParameter; // how fast the difficulty gets adjusted to reach the desired interval, number * 1000000\\n        uint32 targetInterval; // desired block selection interval in ethereum blocks\\n        // 4 bytes var\\n        uint32 blockCount; // how many blocks have been created\\n        uint32 ethBlockCheckpoint; // ethereum block number when current selection started\\n    }\\n\\n    mapping(uint256 => BlockSelectorCtx) internal instance;\\n\\n    event BlockProduced(\\n        uint256 indexed index,\\n        address indexed producer,\\n        uint32 blockNumber,\\n        uint256 roundDuration,\\n        uint256 difficulty\\n    );\\n\\n    modifier onlyAfterGoalDefinition(uint256 _index) {\\n        // cannot produce if block selector goal hasnt been decided yet\\n        // goal is defined the block after selection was reset\\n        require(\\n            block.number >= instance[_index].ethBlockCheckpoint + 1,\\n            \\\"Goal for new block hasnt been decided yet\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Instantiates a BlockSelector structure\\n    /// @param _minDifficulty lower bound for difficulty parameter\\n    /// @param _initialDifficulty starting difficulty\\n    /// @param _difficultyAdjustmentParameter how quickly the difficulty gets updated\\n    /// according to the difference between time passed and target interval.\\n    /// @param _targetInterval how often we want produce noether blocks, in ethereum blocks\\n    /// @param _posManagerAddress address of ProofOfStake that will use this instance\\n    function instantiate(\\n        uint256 _minDifficulty,\\n        uint256 _initialDifficulty,\\n        uint32 _difficultyAdjustmentParameter,\\n        uint32 _targetInterval,\\n        address _posManagerAddress\\n    ) public returns (uint256) {\\n        instance[currentIndex].minDifficulty = _minDifficulty;\\n        instance[currentIndex].difficulty = _initialDifficulty;\\n        instance[currentIndex]\\n            .difficultyAdjustmentParameter = _difficultyAdjustmentParameter;\\n        instance[currentIndex].targetInterval = _targetInterval;\\n        instance[currentIndex].posManagerAddress = _posManagerAddress;\\n\\n        instance[currentIndex].ethBlockCheckpoint = uint32(block.number); // first selection starts when the instance is created\\n\\n        active[currentIndex] = true;\\n        return currentIndex++;\\n    }\\n\\n    /// @notice Calculates the log of the random number between the goal and callers address\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user address to calculate log of random\\n    /// @return log of random number between goal and callers address * 1M\\n    function getLogOfRandom(uint256 _index, address _user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // seed for goal takes a block in the future (+1) so it is harder to manipulate\\n        bytes32 currentGoal = blockhash(\\n            getSeed(\\n                uint256(instance[_index].ethBlockCheckpoint + 1),\\n                block.number\\n            )\\n        );\\n        bytes32 hashedAddress = keccak256(abi.encodePacked(_user));\\n        uint256 distance = uint256(\\n            keccak256(abi.encodePacked(hashedAddress, currentGoal))\\n        );\\n\\n        return UnrolledCordic.log2Times1e18(distance);\\n    }\\n\\n    /// @notice Produces a block\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user address that has the right to produce block\\n    /// @param _weight number that will weight the random number, will be the number of staked tokens\\n    function produceBlock(\\n        uint256 _index,\\n        address _user,\\n        uint256 _weight\\n    ) public onlyAfterGoalDefinition(_index) returns (bool) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        require(_weight > 0, \\\"Caller can't have zero staked tokens\\\");\\n        require(\\n            msg.sender == bsc.posManagerAddress,\\n            \\\"Function can only be called by pos address\\\"\\n        );\\n\\n        if (canProduceBlock(_index, _user, _weight)) {\\n            emit BlockProduced(\\n                _index,\\n                _user,\\n                bsc.blockCount,\\n                getSelectionBlockDuration(_index),\\n                bsc.difficulty\\n            );\\n\\n            return _blockProduced(_index);\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Check if address is allowed to produce block\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user the address that is gonna get checked\\n    /// @param _weight number that will weight the random number, most likely will be the number of staked tokens\\n    function canProduceBlock(\\n        uint256 _index,\\n        address _user,\\n        uint256 _weight\\n    ) public view returns (bool) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        // cannot produce if block selector goal hasnt been decided yet\\n        // goal is defined the block after selection was reset\\n        if (block.number <= bsc.ethBlockCheckpoint + 1) {\\n            return false;\\n        }\\n\\n        uint256 blockDuration = getSelectionBlockDuration(_index);\\n\\n        return ((_weight * blockDuration * 1e12) >\\n            bsc.difficulty *\\n                (DIFFICULTY_BASE_MULTIPLIER - getLogOfRandom(_index, _user)));\\n    }\\n\\n    /// @notice Block produced, declare producer and adjust difficulty\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    function _blockProduced(uint256 _index) private returns (bool) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        // adjust difficulty\\n        bsc.difficulty = getNewDifficulty(\\n            bsc.minDifficulty,\\n            bsc.difficulty,\\n            uint32((block.number) - uint256(bsc.ethBlockCheckpoint)),\\n            bsc.targetInterval,\\n            bsc.difficultyAdjustmentParameter\\n        );\\n\\n        _reset(_index);\\n        return true;\\n    }\\n\\n    /// @notice Reset instance, advancing round and choosing new goal\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    function _reset(uint256 _index) private {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        bsc.blockCount++;\\n        bsc.ethBlockCheckpoint = uint32(block.number);\\n    }\\n\\n    function getSeed(uint256 _previousTarget, uint256 _currentBlock)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 diff = _currentBlock - _previousTarget;\\n        uint256 res = diff / C_256;\\n\\n        // if difference is multiple of 256 (256, 512, 1024)\\n        // preserve old target\\n        if (diff % C_256 == 0) {\\n            return _previousTarget + (res - 1) * (C_256);\\n        }\\n\\n        return _previousTarget + (res * C_256);\\n    }\\n\\n    /// @notice Calculates new difficulty parameter\\n    /// @param _minDiff minimum difficulty of instance\\n    /// @param _oldDiff is the difficulty of previous round\\n    /// @param _blocksPassed how many ethereum blocks have passed\\n    /// @param _targetInterval is how long a round is supposed to take\\n    /// @param _adjustmentParam is how fast the difficulty gets adjusted,\\n    ///         should be number * 1000000\\n    function getNewDifficulty(\\n        uint256 _minDiff,\\n        uint256 _oldDiff,\\n        uint32 _blocksPassed,\\n        uint32 _targetInterval,\\n        uint32 _adjustmentParam\\n    ) internal pure returns (uint256) {\\n        // @dev to save gas on evaluation, instead of returning the _oldDiff when the target\\n        // was exactly matched - we increase the difficulty.\\n        if (_blocksPassed <= _targetInterval) {\\n            return\\n                _oldDiff +\\n                (_oldDiff * (_adjustmentParam / ADJUSTMENT_BASE) + 1);\\n        }\\n\\n        uint256 newDiff = _oldDiff -\\n            (_oldDiff * (_adjustmentParam / ADJUSTMENT_BASE) + 1);\\n\\n        return newDiff > _minDiff ? newDiff : _minDiff;\\n    }\\n\\n    /// @notice Returns the number of blocks\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return number of blocks\\n    function getBlockCount(uint256 _index) public view returns (uint32) {\\n        return instance[_index].blockCount;\\n    }\\n\\n    /// @notice Returns current difficulty\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return difficulty of current selection\\n    function getDifficulty(uint256 _index) public view returns (uint256) {\\n        return instance[_index].difficulty;\\n    }\\n\\n    /// @notice Returns min difficulty\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return min difficulty of instance\\n    function getMinDifficulty(uint256 _index) public view returns (uint256) {\\n        return instance[_index].minDifficulty;\\n    }\\n\\n    /// @notice Returns difficulty adjustment parameter\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return difficulty adjustment parameter\\n    function getDifficultyAdjustmentParameter(uint256 _index)\\n        public\\n        view\\n        returns (uint32)\\n    {\\n        return instance[_index].difficultyAdjustmentParameter;\\n    }\\n\\n    /// @notice Returns target interval\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return target interval\\n    function getTargetInterval(uint256 _index) public view returns (uint32) {\\n        return instance[_index].targetInterval;\\n    }\\n\\n    /// @notice Returns time since last selection started, in ethereum blocks\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return number of etheereum blocks passed since last selection started\\n    /// @dev block duration resets every 256 blocks\\n    function getSelectionBlockDuration(uint256 _index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        uint256 goalBlock = uint256(bsc.ethBlockCheckpoint + 1);\\n\\n        // target hasnt been set\\n        if (goalBlock >= block.number) return 0;\\n\\n        uint256 blocksPassed = block.number - goalBlock;\\n\\n        // if blocksPassed is multiple of 256, 256 blocks have passed\\n        // this avoids blocksPassed going to zero right before target change\\n        if (blocksPassed % C_256 == 0) return C_256;\\n\\n        return blocksPassed % C_256;\\n    }\\n\\n    function getState(uint256 _index, address _user)\\n        public\\n        view\\n        returns (uint256[5] memory _uintValues)\\n    {\\n        BlockSelectorCtx storage i = instance[_index];\\n\\n        uint256[5] memory uintValues = [\\n            block.number,\\n            i.ethBlockCheckpoint + 1, // initial selection goal\\n            i.difficulty,\\n            getSelectionBlockDuration(_index), // blocks passed\\n            getLogOfRandom(_index, _user)\\n        ];\\n\\n        return uintValues;\\n    }\\n\\n    function isConcerned(uint256, address) public pure override returns (bool) {\\n        return false; // isConcerned is only for the main concern (PoS)\\n    }\\n\\n    function getSubInstances(uint256, address)\\n        public\\n        pure\\n        override\\n        returns (address[] memory _addresses, uint256[] memory _indices)\\n    {\\n        address[] memory a;\\n        uint256[] memory i;\\n\\n        a = new address[](0);\\n        i = new uint256[](0);\\n\\n        return (a, i);\\n    }\\n}\\n\",\"keccak256\":\"0x20b51902d247eebc8e5b0ea3c2f8bebad55b29d3fa178092f8f491ba2dd200a7\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b50610ea3806100246000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806382afd23b11610097578063c67ddc3811610066578063c67ddc381461025e578063d0aeade714610271578063da1c7140146102a1578063f9070044146102b457600080fd5b806382afd23b146101d757806383f6f5ca146101fa578063983ef7251461021a578063c526656c1461023d57600080fd5b80634e58fdca116100d35780634e58fdca1461014c5780635378014f1461019157806359dc826c146101a457806373df1612146101b757600080fd5b806301ff62ab146100fa57806326987b60146101225780633d46b81914610139575b600080fd5b61010d610108366004610bb4565b6102e4565b60405190151581526020015b60405180910390f35b61012b60005481565b604051908152602001610119565b61012b610147366004610be0565b6102ed565b61017c61015a366004610be0565b600090815260036020526040902060020154600160a01b900463ffffffff1690565b60405163ffffffff9091168152602001610119565b61010d61019f366004610bf9565b6103a2565b61010d6101b2366004610bf9565b6105a7565b6101ca6101c5366004610bb4565b610641565b6040516101199190610c2e565b61010d6101e5366004610be0565b60009081526001602052604090205460ff1690565b61012b610208366004610be0565b60009081526003602052604090205490565b61012b610228366004610be0565b60009081526003602052604090206001015490565b61025061024b366004610bb4565b6106bb565b604051610119929190610c5f565b61012b61026c366004610be0565b610708565b61017c61027f366004610be0565b600090815260036020526040902060020154600160e01b900463ffffffff1690565b61012b6102af366004610cf7565b61078a565b61017c6102c2366004610be0565b600090815260036020526040902060020154600160c01b900463ffffffff1690565b60005b92915050565b600081806000541161033f5760405162461bcd60e51b8152602060048201526016602482015275125b99195e081b9bdd081a5b9cdd185b9d1a585d195960521b60448201526064015b60405180910390fd5b60008181526001602052604090205460ff1661038e5760405162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b6044820152606401610336565b505060009081526002602052604090205490565b60008381526003602081905260408220015484906103c79063ffffffff166001610d64565b63ffffffff1643101561042e5760405162461bcd60e51b815260206004820152602960248201527f476f616c20666f72206e657720626c6f636b206861736e74206265656e20646560448201526818da591959081e595d60ba1b6064820152608401610336565b6000858152600360205260409020836104955760405162461bcd60e51b8152602060048201526024808201527f43616c6c65722063616e27742068617665207a65726f207374616b656420746f6044820152636b656e7360e01b6064820152608401610336565b60028101546001600160a01b031633146105045760405162461bcd60e51b815260206004820152602a60248201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c656420627920706044820152696f73206164647265737360b01b6064820152608401610336565b61050f8686866105a7565b1561059957846001600160a01b0316867f14aa79ee14fcd694c30b9c3f6d41247d2e0c87bfefec35a6864d124e8086467283600201601c9054906101000a900463ffffffff1661055e8a610708565b60018601546040805163ffffffff909416845260208401929092529082015260600160405180910390a361059186610870565b92505061059f565b60009250505b509392505050565b60008381526003602081905260408220908101546105cc9063ffffffff166001610d64565b63ffffffff1643116105e257600091505061063a565b60006105ed86610708565b90506105f986866108d9565b61060c90680de0b6b3a764000000610d8c565b826001015461061b9190610da3565b6106258286610da3565b6106349064e8d4a51000610da3565b11925050505b9392505050565b610649610b7a565b6000838152600360208181526040808420815160a081019092524382529283015492939290918201906106839063ffffffff166001610d64565b63ffffffff168152602001836001015481526020016106a187610708565b81526020016106b087876108d9565b905295945050505050565b606080808060006040519080825280602002602001820160405280156106eb578160200160208202803683370190505b506040805160008152602081019091529097909650945050505050565b6000818152600360208190526040822090810154829061072f9063ffffffff166001610d64565b63ffffffff169050438110610748575060009392505050565b60006107548243610d8c565b905061076261010082610dd8565b6000036107755750610100949350505050565b61078161010082610dd8565b95945050505050565b600080548152600360208181526040808420899055835484528084206001908101899055845485528185206002908101805463ffffffff60a01b1916600160a01b63ffffffff8c81169190910291909117909155865487528387208201805463ffffffff60c01b1916600160c01b8b8416021790558654875283872090910180546001600160a01b0319166001600160a01b03891617905585548652828620909401805463ffffffff1916439095169490941790935583548452908290528220805460ff191690911790558054818061086283610dec565b909155509695505050505050565b60008181526003602081905260408220805460018201549282015491926108c2926108a19063ffffffff1643610d8c565b600285015463ffffffff600160c01b8204811691600160a01b9004166109f6565b60018201556108d083610a94565b50600192915050565b600082815260036020819052604082200154819061090e906109029063ffffffff166001610d64565b63ffffffff1643610b07565b6040516bffffffffffffffffffffffff19606086901b1660208201529040915060009060340160408051601f198184030181528282528051602091820120908301819052908201849052915060009060600160408051808303601f1901815290829052805160209091012063c370ed0960e01b82526004820181905291507321A46e1D173Fd616B6D44F3b4Ec14e721824C6149063c370ed0990602401602060405180830381865af41580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec9190610e05565b9695505050505050565b60008263ffffffff168463ffffffff1611610a4457610a1e620f424063ffffffff8416610e1e565b610a289086610da3565b610a33906001610e32565b610a3d9086610e32565b9050610781565b6000610a59620f424063ffffffff8516610e1e565b610a639087610da3565b610a6e906001610e32565b610a789087610d8c565b9050868111610a875786610a89565b805b979650505050505050565b6000818152600360205260409020600281018054600160e01b900463ffffffff1690601c610ac183610e4a565b91906101000a81548163ffffffff021916908363ffffffff16021790555050438160030160006101000a81548163ffffffff021916908363ffffffff1602179055505050565b600080610b148484610d8c565b90506000610b2461010083610e1e565b9050610b3261010083610dd8565b600003610b6457610100610b47600183610d8c565b610b519190610da3565b610b5b9086610e32565b925050506102e7565b610b7061010082610da3565b6107819086610e32565b6040518060a001604052806005906020820280368337509192915050565b80356001600160a01b0381168114610baf57600080fd5b919050565b60008060408385031215610bc757600080fd5b82359150610bd760208401610b98565b90509250929050565b600060208284031215610bf257600080fd5b5035919050565b600080600060608486031215610c0e57600080fd5b83359250610c1e60208501610b98565b9150604084013590509250925092565b60a08101818360005b6005811015610c56578151835260209283019290910190600101610c37565b50505092915050565b604080825283519082018190526000906020906060840190828701845b82811015610ca15781516001600160a01b031684529284019290840190600101610c7c565b5050508381038285015284518082528583019183019060005b81811015610cd657835183529284019291840191600101610cba565b5090979650505050505050565b803563ffffffff81168114610baf57600080fd5b600080600080600060a08688031215610d0f57600080fd5b8535945060208601359350610d2660408701610ce3565b9250610d3460608701610ce3565b9150610d4260808701610b98565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818516808303821115610d8357610d83610d4e565b01949350505050565b600082821015610d9e57610d9e610d4e565b500390565b6000816000190483118215151615610dbd57610dbd610d4e565b500290565b634e487b7160e01b600052601260045260246000fd5b600082610de757610de7610dc2565b500690565b600060018201610dfe57610dfe610d4e565b5060010190565b600060208284031215610e1757600080fd5b5051919050565b600082610e2d57610e2d610dc2565b500490565b60008219821115610e4557610e45610d4e565b500190565b600063ffffffff808316818103610e6357610e63610d4e565b600101939250505056fea264697066735822122077eb0058336dc6c372e2c86695d093077ed687df01f4892cd19efcb335428d0a64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806382afd23b11610097578063c67ddc3811610066578063c67ddc381461025e578063d0aeade714610271578063da1c7140146102a1578063f9070044146102b457600080fd5b806382afd23b146101d757806383f6f5ca146101fa578063983ef7251461021a578063c526656c1461023d57600080fd5b80634e58fdca116100d35780634e58fdca1461014c5780635378014f1461019157806359dc826c146101a457806373df1612146101b757600080fd5b806301ff62ab146100fa57806326987b60146101225780633d46b81914610139575b600080fd5b61010d610108366004610bb4565b6102e4565b60405190151581526020015b60405180910390f35b61012b60005481565b604051908152602001610119565b61012b610147366004610be0565b6102ed565b61017c61015a366004610be0565b600090815260036020526040902060020154600160a01b900463ffffffff1690565b60405163ffffffff9091168152602001610119565b61010d61019f366004610bf9565b6103a2565b61010d6101b2366004610bf9565b6105a7565b6101ca6101c5366004610bb4565b610641565b6040516101199190610c2e565b61010d6101e5366004610be0565b60009081526001602052604090205460ff1690565b61012b610208366004610be0565b60009081526003602052604090205490565b61012b610228366004610be0565b60009081526003602052604090206001015490565b61025061024b366004610bb4565b6106bb565b604051610119929190610c5f565b61012b61026c366004610be0565b610708565b61017c61027f366004610be0565b600090815260036020526040902060020154600160e01b900463ffffffff1690565b61012b6102af366004610cf7565b61078a565b61017c6102c2366004610be0565b600090815260036020526040902060020154600160c01b900463ffffffff1690565b60005b92915050565b600081806000541161033f5760405162461bcd60e51b8152602060048201526016602482015275125b99195e081b9bdd081a5b9cdd185b9d1a585d195960521b60448201526064015b60405180910390fd5b60008181526001602052604090205460ff1661038e5760405162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b6044820152606401610336565b505060009081526002602052604090205490565b60008381526003602081905260408220015484906103c79063ffffffff166001610d64565b63ffffffff1643101561042e5760405162461bcd60e51b815260206004820152602960248201527f476f616c20666f72206e657720626c6f636b206861736e74206265656e20646560448201526818da591959081e595d60ba1b6064820152608401610336565b6000858152600360205260409020836104955760405162461bcd60e51b8152602060048201526024808201527f43616c6c65722063616e27742068617665207a65726f207374616b656420746f6044820152636b656e7360e01b6064820152608401610336565b60028101546001600160a01b031633146105045760405162461bcd60e51b815260206004820152602a60248201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c656420627920706044820152696f73206164647265737360b01b6064820152608401610336565b61050f8686866105a7565b1561059957846001600160a01b0316867f14aa79ee14fcd694c30b9c3f6d41247d2e0c87bfefec35a6864d124e8086467283600201601c9054906101000a900463ffffffff1661055e8a610708565b60018601546040805163ffffffff909416845260208401929092529082015260600160405180910390a361059186610870565b92505061059f565b60009250505b509392505050565b60008381526003602081905260408220908101546105cc9063ffffffff166001610d64565b63ffffffff1643116105e257600091505061063a565b60006105ed86610708565b90506105f986866108d9565b61060c90680de0b6b3a764000000610d8c565b826001015461061b9190610da3565b6106258286610da3565b6106349064e8d4a51000610da3565b11925050505b9392505050565b610649610b7a565b6000838152600360208181526040808420815160a081019092524382529283015492939290918201906106839063ffffffff166001610d64565b63ffffffff168152602001836001015481526020016106a187610708565b81526020016106b087876108d9565b905295945050505050565b606080808060006040519080825280602002602001820160405280156106eb578160200160208202803683370190505b506040805160008152602081019091529097909650945050505050565b6000818152600360208190526040822090810154829061072f9063ffffffff166001610d64565b63ffffffff169050438110610748575060009392505050565b60006107548243610d8c565b905061076261010082610dd8565b6000036107755750610100949350505050565b61078161010082610dd8565b95945050505050565b600080548152600360208181526040808420899055835484528084206001908101899055845485528185206002908101805463ffffffff60a01b1916600160a01b63ffffffff8c81169190910291909117909155865487528387208201805463ffffffff60c01b1916600160c01b8b8416021790558654875283872090910180546001600160a01b0319166001600160a01b03891617905585548652828620909401805463ffffffff1916439095169490941790935583548452908290528220805460ff191690911790558054818061086283610dec565b909155509695505050505050565b60008181526003602081905260408220805460018201549282015491926108c2926108a19063ffffffff1643610d8c565b600285015463ffffffff600160c01b8204811691600160a01b9004166109f6565b60018201556108d083610a94565b50600192915050565b600082815260036020819052604082200154819061090e906109029063ffffffff166001610d64565b63ffffffff1643610b07565b6040516bffffffffffffffffffffffff19606086901b1660208201529040915060009060340160408051601f198184030181528282528051602091820120908301819052908201849052915060009060600160408051808303601f1901815290829052805160209091012063c370ed0960e01b825260048201819052915073__$1cacf4970e0423274c39545237a099b14f$__9063c370ed0990602401602060405180830381865af41580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec9190610e05565b9695505050505050565b60008263ffffffff168463ffffffff1611610a4457610a1e620f424063ffffffff8416610e1e565b610a289086610da3565b610a33906001610e32565b610a3d9086610e32565b9050610781565b6000610a59620f424063ffffffff8516610e1e565b610a639087610da3565b610a6e906001610e32565b610a789087610d8c565b9050868111610a875786610a89565b805b979650505050505050565b6000818152600360205260409020600281018054600160e01b900463ffffffff1690601c610ac183610e4a565b91906101000a81548163ffffffff021916908363ffffffff16021790555050438160030160006101000a81548163ffffffff021916908363ffffffff1602179055505050565b600080610b148484610d8c565b90506000610b2461010083610e1e565b9050610b3261010083610dd8565b600003610b6457610100610b47600183610d8c565b610b519190610da3565b610b5b9086610e32565b925050506102e7565b610b7061010082610da3565b6107819086610e32565b6040518060a001604052806005906020820280368337509192915050565b80356001600160a01b0381168114610baf57600080fd5b919050565b60008060408385031215610bc757600080fd5b82359150610bd760208401610b98565b90509250929050565b600060208284031215610bf257600080fd5b5035919050565b600080600060608486031215610c0e57600080fd5b83359250610c1e60208501610b98565b9150604084013590509250925092565b60a08101818360005b6005811015610c56578151835260209283019290910190600101610c37565b50505092915050565b604080825283519082018190526000906020906060840190828701845b82811015610ca15781516001600160a01b031684529284019290840190600101610c7c565b5050508381038285015284518082528583019183019060005b81811015610cd657835183529284019291840191600101610cba565b5090979650505050505050565b803563ffffffff81168114610baf57600080fd5b600080600080600060a08688031215610d0f57600080fd5b8535945060208601359350610d2660408701610ce3565b9250610d3460608701610ce3565b9150610d4260808701610b98565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818516808303821115610d8357610d83610d4e565b01949350505050565b600082821015610d9e57610d9e610d4e565b500390565b6000816000190483118215151615610dbd57610dbd610d4e565b500290565b634e487b7160e01b600052601260045260246000fd5b600082610de757610de7610dc2565b500690565b600060018201610dfe57610dfe610d4e565b5060010190565b600060208284031215610e1757600080fd5b5051919050565b600082610e2d57610e2d610dc2565b500490565b60008219821115610e4557610e45610d4e565b500190565b600063ffffffff808316818103610e6357610e63610d4e565b600101939250505056fea264697066735822122077eb0058336dc6c372e2c86695d093077ed687df01f4892cd19efcb335428d0a64736f6c634300080e0033",
  "libraries": {
    "UnrolledCordic": "0x21A46e1D173Fd616B6D44F3b4Ec14e721824C614"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canProduceBlock(uint256,address,uint256)": {
        "params": {
          "_index": "the index of the instance of block selector you want to interact with",
          "_user": "the address that is gonna get checked",
          "_weight": "number that will weight the random number, most likely will be the number of staked tokens"
        }
      },
      "getBlockCount(uint256)": {
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "number of blocks"
        }
      },
      "getDifficulty(uint256)": {
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "difficulty of current selection"
        }
      },
      "getDifficultyAdjustmentParameter(uint256)": {
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "difficulty adjustment parameter"
        }
      },
      "getMinDifficulty(uint256)": {
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "min difficulty of instance"
        }
      },
      "getSelectionBlockDuration(uint256)": {
        "details": "block duration resets every 256 blocks",
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "number of etheereum blocks passed since last selection started"
        }
      },
      "getTargetInterval(uint256)": {
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "target interval"
        }
      },
      "instantiate(uint256,uint256,uint32,uint32,address)": {
        "params": {
          "_difficultyAdjustmentParameter": "how quickly the difficulty gets updated according to the difference between time passed and target interval.",
          "_initialDifficulty": "starting difficulty",
          "_minDifficulty": "lower bound for difficulty parameter",
          "_posManagerAddress": "address of ProofOfStake that will use this instance",
          "_targetInterval": "how often we want produce noether blocks, in ethereum blocks"
        }
      },
      "produceBlock(uint256,address,uint256)": {
        "params": {
          "_index": "the index of the instance of block selector you want to interact with",
          "_user": "address that has the right to produce block",
          "_weight": "number that will weight the random number, will be the number of staked tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canProduceBlock(uint256,address,uint256)": {
        "notice": "Check if address is allowed to produce block"
      },
      "getBlockCount(uint256)": {
        "notice": "Returns the number of blocks"
      },
      "getDifficulty(uint256)": {
        "notice": "Returns current difficulty"
      },
      "getDifficultyAdjustmentParameter(uint256)": {
        "notice": "Returns difficulty adjustment parameter"
      },
      "getMinDifficulty(uint256)": {
        "notice": "Returns min difficulty"
      },
      "getSelectionBlockDuration(uint256)": {
        "notice": "Returns time since last selection started, in ethereum blocks"
      },
      "getTargetInterval(uint256)": {
        "notice": "Returns target interval"
      },
      "instantiate(uint256,uint256,uint32,uint32,address)": {
        "notice": "Instantiates a BlockSelector structure"
      },
      "produceBlock(uint256,address,uint256)": {
        "notice": "Produces a block"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 773,
        "contract": "contracts/BlockSelectorV2.sol:BlockSelectorV2",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 777,
        "contract": "contracts/BlockSelectorV2.sol:BlockSelectorV2",
        "label": "active",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 781,
        "contract": "contracts/BlockSelectorV2.sol:BlockSelectorV2",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2171,
        "contract": "contracts/BlockSelectorV2.sol:BlockSelectorV2",
        "label": "instance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(BlockSelectorCtx)2166_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(BlockSelectorCtx)2166_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BlockSelectorV2.BlockSelectorCtx)",
        "numberOfBytes": "32",
        "value": "t_struct(BlockSelectorCtx)2166_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BlockSelectorCtx)2166_storage": {
        "encoding": "inplace",
        "label": "struct BlockSelectorV2.BlockSelectorCtx",
        "members": [
          {
            "astId": 2153,
            "contract": "contracts/BlockSelectorV2.sol:BlockSelectorV2",
            "label": "minDifficulty",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2155,
            "contract": "contracts/BlockSelectorV2.sol:BlockSelectorV2",
            "label": "difficulty",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2157,
            "contract": "contracts/BlockSelectorV2.sol:BlockSelectorV2",
            "label": "posManagerAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2159,
            "contract": "contracts/BlockSelectorV2.sol:BlockSelectorV2",
            "label": "difficultyAdjustmentParameter",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 2161,
            "contract": "contracts/BlockSelectorV2.sol:BlockSelectorV2",
            "label": "targetInterval",
            "offset": 24,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 2163,
            "contract": "contracts/BlockSelectorV2.sol:BlockSelectorV2",
            "label": "blockCount",
            "offset": 28,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 2165,
            "contract": "contracts/BlockSelectorV2.sol:BlockSelectorV2",
            "label": "ethBlockCheckpoint",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}