{
  "address": "0x9650F4A4ABd237659d1378415fddBdC17442efFd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakingAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "blockSelectorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "workerAuthAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumDifficulty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialDifficulty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "difficultyAdjustmentParameter",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "targetInterval",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ctsiAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distDenominator",
          "type": "uint256"
        }
      ],
      "name": "NewChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Rewarded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "currentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBlockSelectorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBlockSelectorIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentNonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getRewardManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getStakingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSubInstances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_blockSelectorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_workerAuthAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumDifficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialDifficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_difficultyAdjustmentParameter",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_targetInterval",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_ctsiAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_distNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_distDenominator",
          "type": "uint256"
        }
      ],
      "name": "instantiate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isConcerned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "produceBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "terminate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x277dcce9311f031703b611cbe4a9a20d5eb77364529f4e29fbe961d0a6f9a101",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x9650F4A4ABd237659d1378415fddBdC17442efFd",
    "transactionIndex": 12,
    "gasUsed": "1511532",
    "logsBloom": "0x
    "blockHash": "0x43dff9d3d5948e2166ca1401b112a11928b2cf75d779a2cd08e55aca8895c9f5",
    "transactionHash": "0x277dcce9311f031703b611cbe4a9a20d5eb77364529f4e29fbe961d0a6f9a101",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 10531352,
        "transactionHash": "0x277dcce9311f031703b611cbe4a9a20d5eb77364529f4e29fbe961d0a6f9a101",
        "address": "0x9650F4A4ABd237659d1378415fddBdC17442efFd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x43dff9d3d5948e2166ca1401b112a11928b2cf75d779a2cd08e55aca8895c9f5"
      }
    ],
    "blockNumber": 10531352,
    "cumulativeGasUsed": "2024598",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f5e6526d3c08f77b280dc4ca149f7d46",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"blockSelectorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"workerAuthAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumDifficulty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialDifficulty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"difficultyAdjustmentParameter\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"targetInterval\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ctsiAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distDenominator\",\"type\":\"uint256\"}],\"name\":\"NewChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBlockSelectorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBlockSelectorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRewardManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSubInstances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockSelectorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_workerAuthAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_difficultyAdjustmentParameter\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_targetInterval\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_ctsiAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distDenominator\",\"type\":\"uint256\"}],\"name\":\"instantiate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isConcerned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"produceBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBlockSelectorAddress(uint256)\":{\"params\":{\"_index\":\"index of instance\"},\"returns\":{\"_0\":\"address of instance's block selector\"}},\"getBlockSelectorIndex(uint256)\":{\"params\":{\"_index\":\"index of instance\"},\"returns\":{\"_0\":\"index of instance's block selector\"}},\"getRewardManagerAddress(uint256)\":{\"params\":{\"_index\":\"index of instance\"},\"returns\":{\"_0\":\"address of instance's RewardManager\"}},\"getStakingAddress(uint256)\":{\"params\":{\"_index\":\"index of instance\"},\"returns\":{\"_0\":\"address of instance's staking contract\"}},\"getState(uint256,address)\":{\"params\":{\"_index\":\"index of instance\",\"_user\":\"address of user\"},\"returns\":{\"_0\":\"bool if user is eligible to produce next block\",\"_1\":\"address of user that was chosen to build the block\",\"_2\":\"current reward paid by the network for that block\"}},\"instantiate(address,address,address,uint256,uint256,uint32,uint32,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_blockSelectorAddress\":\"address of blockSelector contract\",\"_ctsiAddress\":\"address of token instance being used\",\"_difficultyAdjustmentParameter\":\"how quickly the difficulty gets updated according to the difference between time passed and desired draw time interval.\",\"_distDenominator\":\"dividing factor to define reward amount\",\"_distNumerator\":\"multiplier factor to define reward amount\",\"_maxReward\":\"maximum reward that this contract pays\",\"_minReward\":\"minimum reward that this contract pays\",\"_stakingAddress\":\"address of StakingInterface\",\"_targetInterval\":\"how often we want to elect a block producer\",\"_workerAuthAddress\":\"address of worker manager contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"produceBlock(uint256)\":{\"details\":\"this function can only be called by a worker, user never calls it directly\",\"params\":{\"_index\":\"the index of the instance of pos you want to interact with\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBlockSelectorAddress(uint256)\":{\"notice\":\"Get block selector address\"},\"getBlockSelectorIndex(uint256)\":{\"notice\":\"Get block selector index\"},\"getRewardManagerAddress(uint256)\":{\"notice\":\"Get reward manager address\"},\"getStakingAddress(uint256)\":{\"notice\":\"Get staking address\"},\"getState(uint256,address)\":{\"notice\":\"Get state of a particular instance\"},\"instantiate(address,address,address,uint256,uint256,uint32,uint32,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Instantiates a Proof of Stake\"},\"produceBlock(uint256)\":{\"notice\":\"Produce a block\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoS.sol\":\"PoS\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/CartesiMath.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title CartesiMath\\n/// @author Felipe Argento\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract CartesiMath {\\n    using SafeMath for uint256;\\n    mapping(uint256 => uint256) log2tableTimes1M;\\n\\n    constructor() {\\n        log2tableTimes1M[1] = 0;\\n        log2tableTimes1M[2] = 1000000;\\n        log2tableTimes1M[3] = 1584962;\\n        log2tableTimes1M[4] = 2000000;\\n        log2tableTimes1M[5] = 2321928;\\n        log2tableTimes1M[6] = 2584962;\\n        log2tableTimes1M[7] = 2807354;\\n        log2tableTimes1M[8] = 3000000;\\n        log2tableTimes1M[9] = 3169925;\\n        log2tableTimes1M[10] = 3321928;\\n        log2tableTimes1M[11] = 3459431;\\n        log2tableTimes1M[12] = 3584962;\\n        log2tableTimes1M[13] = 3700439;\\n        log2tableTimes1M[14] = 3807354;\\n        log2tableTimes1M[15] = 3906890;\\n        log2tableTimes1M[16] = 4000000;\\n        log2tableTimes1M[17] = 4087462;\\n        log2tableTimes1M[18] = 4169925;\\n        log2tableTimes1M[19] = 4247927;\\n        log2tableTimes1M[20] = 4321928;\\n        log2tableTimes1M[21] = 4392317;\\n        log2tableTimes1M[22] = 4459431;\\n        log2tableTimes1M[23] = 4523561;\\n        log2tableTimes1M[24] = 4584962;\\n        log2tableTimes1M[25] = 4643856;\\n        log2tableTimes1M[26] = 4700439;\\n        log2tableTimes1M[27] = 4754887;\\n        log2tableTimes1M[28] = 4807354;\\n        log2tableTimes1M[29] = 4857980;\\n        log2tableTimes1M[30] = 4906890;\\n        log2tableTimes1M[31] = 4954196;\\n        log2tableTimes1M[32] = 5000000;\\n        log2tableTimes1M[33] = 5044394;\\n        log2tableTimes1M[34] = 5087462;\\n        log2tableTimes1M[35] = 5129283;\\n        log2tableTimes1M[36] = 5169925;\\n        log2tableTimes1M[37] = 5209453;\\n        log2tableTimes1M[38] = 5247927;\\n        log2tableTimes1M[39] = 5285402;\\n        log2tableTimes1M[40] = 5321928;\\n        log2tableTimes1M[41] = 5357552;\\n        log2tableTimes1M[42] = 5392317;\\n        log2tableTimes1M[43] = 5426264;\\n        log2tableTimes1M[44] = 5459431;\\n        log2tableTimes1M[45] = 5491853;\\n        log2tableTimes1M[46] = 5523561;\\n        log2tableTimes1M[47] = 5554588;\\n        log2tableTimes1M[48] = 5584962;\\n        log2tableTimes1M[49] = 5614709;\\n        log2tableTimes1M[50] = 5643856;\\n        log2tableTimes1M[51] = 5672425;\\n        log2tableTimes1M[52] = 5700439;\\n        log2tableTimes1M[53] = 5727920;\\n        log2tableTimes1M[54] = 5754887;\\n        log2tableTimes1M[55] = 5781359;\\n        log2tableTimes1M[56] = 5807354;\\n        log2tableTimes1M[57] = 5832890;\\n        log2tableTimes1M[58] = 5857980;\\n        log2tableTimes1M[59] = 5882643;\\n        log2tableTimes1M[60] = 5906890;\\n        log2tableTimes1M[61] = 5930737;\\n        log2tableTimes1M[62] = 5954196;\\n        log2tableTimes1M[63] = 5977279;\\n        log2tableTimes1M[64] = 6000000;\\n        log2tableTimes1M[65] = 6022367;\\n        log2tableTimes1M[66] = 6044394;\\n        log2tableTimes1M[67] = 6066089;\\n        log2tableTimes1M[68] = 6087462;\\n        log2tableTimes1M[69] = 6108524;\\n        log2tableTimes1M[70] = 6129283;\\n        log2tableTimes1M[71] = 6149747;\\n        log2tableTimes1M[72] = 6169925;\\n        log2tableTimes1M[73] = 6189824;\\n        log2tableTimes1M[74] = 6209453;\\n        log2tableTimes1M[75] = 6228818;\\n        log2tableTimes1M[76] = 6247927;\\n        log2tableTimes1M[77] = 6266786;\\n        log2tableTimes1M[78] = 6285402;\\n        log2tableTimes1M[79] = 6303780;\\n        log2tableTimes1M[80] = 6321928;\\n        log2tableTimes1M[81] = 6339850;\\n        log2tableTimes1M[82] = 6357552;\\n        log2tableTimes1M[83] = 6375039;\\n        log2tableTimes1M[84] = 6392317;\\n        log2tableTimes1M[85] = 6409390;\\n        log2tableTimes1M[86] = 6426264;\\n        log2tableTimes1M[87] = 6442943;\\n        log2tableTimes1M[88] = 6459431;\\n        log2tableTimes1M[89] = 6475733;\\n        log2tableTimes1M[90] = 6491853;\\n        log2tableTimes1M[91] = 6507794;\\n        log2tableTimes1M[92] = 6523561;\\n        log2tableTimes1M[93] = 6539158;\\n        log2tableTimes1M[94] = 6554588;\\n        log2tableTimes1M[95] = 6569855;\\n        log2tableTimes1M[96] = 6584962;\\n        log2tableTimes1M[97] = 6599912;\\n        log2tableTimes1M[98] = 6614709;\\n        log2tableTimes1M[99] = 6629356;\\n        log2tableTimes1M[100] = 6643856;\\n        log2tableTimes1M[101] = 6658211;\\n        log2tableTimes1M[102] = 6672425;\\n        log2tableTimes1M[103] = 6686500;\\n        log2tableTimes1M[104] = 6700439;\\n        log2tableTimes1M[105] = 6714245;\\n        log2tableTimes1M[106] = 6727920;\\n        log2tableTimes1M[107] = 6741466;\\n        log2tableTimes1M[108] = 6754887;\\n        log2tableTimes1M[109] = 6768184;\\n        log2tableTimes1M[110] = 6781359;\\n        log2tableTimes1M[111] = 6794415;\\n        log2tableTimes1M[112] = 6807354;\\n        log2tableTimes1M[113] = 6820178;\\n        log2tableTimes1M[114] = 6832890;\\n        log2tableTimes1M[115] = 6845490;\\n        log2tableTimes1M[116] = 6857980;\\n        log2tableTimes1M[117] = 6870364;\\n        log2tableTimes1M[118] = 6882643;\\n        log2tableTimes1M[119] = 6894817;\\n        log2tableTimes1M[120] = 6906890;\\n        log2tableTimes1M[121] = 6918863;\\n        log2tableTimes1M[122] = 6930737;\\n        log2tableTimes1M[123] = 6942514;\\n        log2tableTimes1M[124] = 6954196;\\n        log2tableTimes1M[125] = 6965784;\\n        log2tableTimes1M[126] = 6977279;\\n        log2tableTimes1M[127] = 6988684;\\n        log2tableTimes1M[128] = 7000000;\\n    }\\n\\n    /// @notice Approximates log2 * 1M\\n    /// @param _num number to take log2 * 1M of\\n    function log2ApproxTimes1M(uint256 _num) public view returns (uint256) {\\n        require (_num > 0, \\\"Number cannot be zero\\\");\\n        uint256 leading = 0;\\n\\n        if (_num == 1) return 0;\\n\\n        while (_num > 128) {\\n           _num = _num >> 1;\\n           leading += 1;\\n       }\\n       return (leading.mul(uint256(1000000))).add(log2tableTimes1M[_num]);\\n    }\\n}\\n\",\"keccak256\":\"0x496a53dd1d169264fe58353fef5d283dfc8a78789757d32af69be41faaa97d6e\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Decorated.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\n\\ncontract Decorated {\\n    // This contract defines several modifiers but does not use\\n    // them - they will be used in derived contracts.\\n    modifier onlyBy(address user) {\\n        require(msg.sender == user, \\\"Cannot be called by user\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfter(uint256 time) {\\n        require(block.timestamp > time, \\\"Cannot be called now\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdbba019b8f7f93b212a5bbae402ee988321c4fa82ed2b4c9e55b4d7ddf35dcc3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Instantiator.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\ninterface Instantiator {\\n\\n    modifier onlyInstantiated(uint256 _index) virtual;\\n\\n    modifier onlyActive(uint256 _index) virtual;\\n\\n    modifier increasesNonce(uint256 _index) virtual;\\n\\n    function isActive(uint256 _index) external view returns (bool);\\n\\n    function getNonce(uint256 _index) external view returns (uint256);\\n\\n    function isConcerned(uint256 _index, address _user) external view returns (bool);\\n\\n    function getSubInstances(uint256 _index, address) external view returns (address[] memory _addresses, uint256[] memory _indices);\\n}\\n\",\"keccak256\":\"0x416e612dc09b10765de32ec06cf0a7ee4e050e16db8bf3b8ad832a6082b7dfd6\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/InstantiatorImpl.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Instantiator.sol\\\";\\n\\nabstract contract InstantiatorImpl is Instantiator {\\n    uint256 public currentIndex = 0;\\n\\n    mapping(uint256 => bool) internal active;\\n    mapping(uint256 => uint256) internal nonce;\\n\\n    modifier onlyInstantiated(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        _;\\n    }\\n\\n    modifier onlyActive(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        require(isActive(_index), \\\"Index inactive\\\");\\n        _;\\n    }\\n\\n    modifier increasesNonce(uint256 _index) override {\\n        nonce[_index]++;\\n        _;\\n    }\\n\\n    function isActive(uint256 _index) public override view returns (bool) {\\n        return (active[_index]);\\n    }\\n\\n    function getNonce(uint256 _index)\\n        public\\n        override\\n        view\\n        onlyActive(_index)\\n        returns (uint256 currentNonce)\\n    {\\n        return nonce[_index];\\n    }\\n\\n    function deactivate(uint256 _index) internal {\\n        active[_index] = false;\\n        nonce[_index] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8f8e29b807e5c55198206a370b4d8751cbd98a663e3f89faff274e2f9d7cae75\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/WorkerAuthManager.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title WorkerAuthManager\\n/// @author Danilo Tuler\\npragma solidity ^0.7.0;\\n\\ninterface WorkerAuthManager {\\n    /// @notice Gives worker permission to act on a DApp\\n    /// @param _workerAddress address of the worker node to given permission\\n    /// @param _dappAddress address of the dapp that permission will be given to\\n    function authorize(address _workerAddress, address _dappAddress) external;\\n\\n    /// @notice Removes worker's permission to act on a DApp\\n    /// @param _workerAddress address of the proxy that will lose permission\\n    /// @param _dappAddresses addresses of dapps that will lose permission\\n    function deauthorize(address _workerAddress, address _dappAddresses)\\n        external;\\n\\n    /// @notice Returns is the dapp is authorized to be called by that worker\\n    /// @param _workerAddress address of the worker\\n    /// @param _dappAddress address of the DApp\\n    function isAuthorized(address _workerAddress, address _dappAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Get the owner of the worker node\\n    /// @param workerAddress address of the worker node\\n    function getOwner(address workerAddress) external view returns (address);\\n\\n    /// @notice A DApp has been authorized by a user for a worker\\n    event Authorization(\\n        address indexed user,\\n        address indexed worker,\\n        address indexed dapp\\n    );\\n\\n    /// @notice A DApp has been deauthorized by a user for a worker\\n    event Deauthorization(\\n        address indexed user,\\n        address indexed worker,\\n        address indexed dapp\\n    );\\n}\\n\",\"keccak256\":\"0x90ce24f4e55dc98d22355f3929981a7b85ba39607becb7602f987d057c1d10b2\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/BlockSelector.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Block Selector\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"@cartesi/util/contracts/CartesiMath.sol\\\";\\nimport \\\"@cartesi/util/contracts/InstantiatorImpl.sol\\\";\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\n\\ncontract BlockSelector is InstantiatorImpl, Decorated, CartesiMath {\\n    using SafeMath for uint256;\\n\\n    uint256 constant C_256 = 256; // 256 blocks\\n    uint256 constant DIFFICULTY_BASE_MULTIPLIER = 256000000; //256 M\\n    uint256 constant ADJUSTMENT_BASE = 1000000; // 1M\\n\\n    struct BlockSelectorCtx {\\n        // @dev the order of variables are important for storage packing\\n        // 32 bytes constants\\n        uint256 minDifficulty; // lower bound for difficulty\\n        // 32 bytes var\\n        uint256 difficulty; // difficulty parameter defines how big the interval will be\\n\\n        // 20 bytes constants\\n        address posManagerAddress;\\n\\n        // 4 bytes constants\\n        uint32 difficultyAdjustmentParameter; // how fast the difficulty gets adjusted to reach the desired interval, number * 1000000\\n        uint32 targetInterval; // desired block selection interval in ethereum blocks\\n\\n        // 4 bytes var\\n        uint32 blockCount; // how many blocks have been created\\n        uint32 ethBlockCheckpoint; // ethereum block number when current selection started\\n    }\\n\\n    mapping(uint256 => BlockSelectorCtx) internal instance;\\n\\n    event BlockProduced(\\n        uint256 indexed index,\\n        address indexed producer,\\n        uint32 blockNumber,\\n        uint256 roundDuration,\\n        uint256 difficulty\\n    );\\n\\n    modifier onlyAfterGoalDefinition(uint256 _index){\\n        // cannot produce if block selector goal hasnt been decided yet\\n        // goal is defined the block after selection was reset\\n        require(\\n            block.number >= instance[_index].ethBlockCheckpoint + 1,\\n            \\\"Goal for new block hasnt been decided yet\\\"\\n        );\\n        _;\\n\\n    }\\n\\n    /// @notice Instantiates a BlockSelector structure\\n    /// @param _minDifficulty lower bound for difficulty parameter\\n    /// @param _initialDifficulty starting difficulty\\n    /// @param _difficultyAdjustmentParameter how quickly the difficulty gets updated\\n    /// according to the difference between time passed and target interval.\\n    /// @param _targetInterval how often we want produce noether blocks, in ethereum blocks\\n    /// @param _posManagerAddress address of ProofOfStake that will use this instance\\n    function instantiate(\\n        uint256 _minDifficulty,\\n        uint256 _initialDifficulty,\\n        uint32 _difficultyAdjustmentParameter,\\n        uint32 _targetInterval,\\n        address _posManagerAddress\\n    ) public returns (uint256)\\n    {\\n        instance[currentIndex].minDifficulty = _minDifficulty;\\n        instance[currentIndex].difficulty = _initialDifficulty;\\n        instance[currentIndex].difficultyAdjustmentParameter = _difficultyAdjustmentParameter;\\n        instance[currentIndex].targetInterval = _targetInterval;\\n        instance[currentIndex].posManagerAddress = _posManagerAddress;\\n\\n        instance[currentIndex].ethBlockCheckpoint = uint32(block.number); // first selection starts when the instance is created\\n\\n        active[currentIndex] = true;\\n        return currentIndex++;\\n    }\\n\\n    /// @notice Calculates the log of the random number between the goal and callers address\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user address to calculate log of random\\n    /// @return log of random number between goal and callers address * 1M\\n    function getLogOfRandom(uint256 _index, address _user) internal view returns (uint256) {\\n        // seed for goal takes a block in the future (+1) so it is harder to manipulate\\n        bytes32 currentGoal = blockhash(\\n            getSeed(uint256(instance[_index].ethBlockCheckpoint + 1), block.number)\\n        );\\n        bytes32 hashedAddress = keccak256(abi.encodePacked(_user));\\n        uint256 distance = uint256(keccak256(abi.encodePacked(hashedAddress, currentGoal)));\\n\\n        return CartesiMath.log2ApproxTimes1M(distance);\\n    }\\n\\n    /// @notice Produces a block\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user address that has the right to produce block\\n    /// @param _weight number that will weight the random number, will be the number of staked tokens\\n    function produceBlock(\\n        uint256 _index,\\n        address _user,\\n        uint256 _weight\\n    )\\n    public\\n    onlyAfterGoalDefinition(_index)\\n    returns (bool)\\n    {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        require(_weight > 0, \\\"Caller can't have zero staked tokens\\\");\\n        require(msg.sender == bsc.posManagerAddress, \\\"Function can only be called by pos address\\\");\\n\\n        if (canProduceBlock(_index, _user, _weight)) {\\n            emit BlockProduced(\\n                _index,\\n                _user,\\n                bsc.blockCount,\\n                getSelectionBlockDuration(_index),\\n                bsc.difficulty\\n            );\\n\\n            return _blockProduced(_index);\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Check if address is allowed to produce block\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user the address that is gonna get checked\\n    /// @param _weight number that will weight the random number, most likely will be the number of staked tokens\\n    function canProduceBlock(uint256 _index, address _user, uint256 _weight) public view returns (bool) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        // cannot produce if block selector goal hasnt been decided yet\\n        // goal is defined the block after selection was reset\\n        if (block.number <= bsc.ethBlockCheckpoint + 1) {\\n            return false;\\n        }\\n\\n        uint256 blockDuration = getSelectionBlockDuration(_index);\\n\\n        return (\\n            (_weight.mul(blockDuration)) > bsc.difficulty.mul((DIFFICULTY_BASE_MULTIPLIER - getLogOfRandom(_index, _user)))\\n        );\\n    }\\n\\n    /// @notice Block produced, declare producer and adjust difficulty\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    function _blockProduced(uint256 _index) private returns (bool) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        // adjust difficulty\\n        bsc.difficulty = getNewDifficulty(\\n            bsc.minDifficulty,\\n            bsc.difficulty,\\n            uint32((block.number).sub(uint256(bsc.ethBlockCheckpoint))),\\n            bsc.targetInterval,\\n            bsc.difficultyAdjustmentParameter\\n        );\\n\\n        _reset(_index);\\n        return true;\\n    }\\n\\n    /// @notice Reset instance, advancing round and choosing new goal\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    function _reset(uint256 _index) private {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        bsc.blockCount++;\\n        bsc.ethBlockCheckpoint = uint32(block.number);\\n    }\\n\\n    function getSeed(\\n        uint256 _previousTarget,\\n        uint256 _currentBlock\\n    )\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        uint256 diff = _currentBlock.sub(_previousTarget);\\n        uint256 res = diff.div(C_256);\\n\\n        // if difference is multiple of 256 (256, 512, 1024)\\n        // preserve old target\\n        if (diff % C_256 == 0) {\\n            return _previousTarget.add((res - 1).mul(C_256));\\n        }\\n\\n        return _previousTarget.add(res.mul(C_256));\\n    }\\n\\n    /// @notice Calculates new difficulty parameter\\n    /// @param _minDiff minimum difficulty of instance\\n    /// @param _oldDiff is the difficulty of previous round\\n    /// @param _blocksPassed how many ethereum blocks have passed\\n    /// @param _targetInterval is how long a round is supposed to take\\n    /// @param _adjustmentParam is how fast the difficulty gets adjusted,\\n    ///         should be number * 1000000\\n    function getNewDifficulty(\\n        uint256 _minDiff,\\n        uint256 _oldDiff,\\n        uint32 _blocksPassed,\\n        uint32 _targetInterval,\\n        uint32 _adjustmentParam\\n    )\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        // @dev to save gas on evaluation, instead of returning the _oldDiff when the target\\n        // was exactly matched - we increase the difficulty.\\n        if (_blocksPassed <= _targetInterval) {\\n            return _oldDiff.add(_oldDiff.mul(_adjustmentParam).div(ADJUSTMENT_BASE) + 1);\\n        }\\n\\n        uint256 newDiff = _oldDiff.sub(_oldDiff.mul(_adjustmentParam).div(ADJUSTMENT_BASE) + 1);\\n\\n        return newDiff > _minDiff ? newDiff : _minDiff;\\n    }\\n\\n    /// @notice Returns the number of blocks\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return number of blocks\\n    function getBlockCount(uint256 _index) public view returns (uint32) {\\n        return instance[_index].blockCount;\\n    }\\n\\n    /// @notice Returns current difficulty\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return difficulty of current selection\\n    function getDifficulty(uint256 _index) public view returns (uint256) {\\n        return instance[_index].difficulty;\\n    }\\n\\n    /// @notice Returns min difficulty\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return min difficulty of instance\\n    function getMinDifficulty(uint256 _index) public view returns (uint256) {\\n        return instance[_index].minDifficulty;\\n    }\\n\\n    /// @notice Returns difficulty adjustment parameter\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return difficulty adjustment parameter\\n    function getDifficultyAdjustmentParameter(\\n        uint256 _index\\n    )\\n    public\\n    view\\n    returns (uint32)\\n    {\\n        return instance[_index].difficultyAdjustmentParameter;\\n    }\\n\\n    /// @notice Returns target interval\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return target interval\\n    function getTargetInterval(uint256 _index) public view returns (uint32) {\\n        return instance[_index].targetInterval;\\n    }\\n\\n    /// @notice Returns time since last selection started, in ethereum blocks\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return number of etheereum blocks passed since last selection started\\n    /// @dev block duration resets every 256 blocks\\n    function getSelectionBlockDuration(uint256 _index)\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        uint256 goalBlock = uint256(bsc.ethBlockCheckpoint + 1);\\n\\n        // target hasnt been set\\n        if (goalBlock >= block.number) return 0;\\n\\n        uint256 blocksPassed = (block.number).sub(goalBlock);\\n\\n        // if blocksPassed is multiple of 256, 256 blocks have passed\\n        // this avoids blocksPassed going to zero right before target change\\n        if (blocksPassed % C_256 == 0) return C_256;\\n\\n        return blocksPassed % C_256;\\n    }\\n\\n    function getState(uint256 _index, address _user)\\n    public view returns (uint256[5] memory _uintValues) {\\n        BlockSelectorCtx storage i = instance[_index];\\n\\n        uint256[5] memory uintValues = [\\n            block.number,\\n            i.ethBlockCheckpoint + 1, // initial selection goal\\n            i.difficulty,\\n            getSelectionBlockDuration(_index), // blocks passed\\n            getLogOfRandom(_index, _user)\\n        ];\\n\\n        return uintValues;\\n    }\\n\\n    function isConcerned(uint256, address) public override pure returns (bool) {\\n        return false; // isConcerned is only for the main concern (PoS)\\n    }\\n\\n    function getSubInstances(uint256, address)\\n        public override pure returns (address[] memory _addresses,\\n            uint256[] memory _indices)\\n    {\\n        address[] memory a;\\n        uint256[] memory i;\\n\\n        a = new address[](0);\\n        i = new uint256[](0);\\n\\n        return (a, i);\\n    }\\n}\\n\",\"keccak256\":\"0x57506378cc97b96771d0423d030e6176ae03ff23b706b713f5540e4a7fa0050f\",\"license\":\"Apache-2.0\"},\"contracts/PoS.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Proof of Stake\\n/// @author Felipe Argento\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@cartesi/util/contracts/InstantiatorImpl.sol\\\";\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\nimport \\\"@cartesi/util/contracts/WorkerAuthManager.sol\\\";\\n\\nimport \\\"./Staking.sol\\\";\\nimport \\\"./BlockSelector.sol\\\";\\nimport \\\"./RewardManager.sol\\\";\\n\\ncontract PoS is Ownable, InstantiatorImpl, Decorated {\\n    using SafeMath for uint256;\\n\\n    struct PoSCtx {\\n        uint256 blockSelectorIndex;\\n        BlockSelector blockSelector;\\n        Staking staking;\\n        RewardManager rewardManager;\\n        WorkerAuthManager workerAuth;\\n    }\\n\\n    mapping(uint256 => PoSCtx) internal instance;\\n\\n    event Rewarded(\\n        uint256 indexed index,\\n        address indexed worker,\\n        address indexed user,\\n        uint256 reward\\n    );\\n\\n    event NewChain (\\n        uint256 indexed index,\\n        address stakingAddress,\\n        address blockSelectorAddress,\\n        address workerAuthAddress,\\n        uint256 minimumDifficulty,\\n        uint256 initialDifficulty,\\n        uint32 difficultyAdjustmentParameter,\\n        uint32 targetInterval,\\n        address ctsiAddress,\\n        uint256 maxReward,\\n        uint256 minReward,\\n        uint256 distNumerator,\\n        uint256 distDenominator\\n    );\\n    /// @notice Instantiates a Proof of Stake\\n    /// @param _stakingAddress address of StakingInterface\\n    /// @param _blockSelectorAddress address of blockSelector contract\\n    /// @param _workerAuthAddress address of worker manager contract\\n    /// @param _difficultyAdjustmentParameter how quickly the difficulty gets updated\\n    /// according to the difference between time passed and desired draw time interval.\\n    /// @param _targetInterval how often we want to elect a block producer\\n    /// @param _ctsiAddress address of token instance being used\\n    /// @param _maxReward maximum reward that this contract pays\\n    /// @param _minReward minimum reward that this contract pays\\n    /// @param _distNumerator multiplier factor to define reward amount\\n    /// @param _distDenominator dividing factor to define reward amount\\n    function instantiate(\\n        address _stakingAddress,\\n        address _blockSelectorAddress,\\n        address _workerAuthAddress,\\n        uint256 _minimumDifficulty,\\n        uint256 _initialDifficulty,\\n        uint32 _difficultyAdjustmentParameter,\\n        uint32 _targetInterval,\\n\\n        // RewardManager constructor parameters\\n        address _ctsiAddress,\\n        uint256 _maxReward,\\n        uint256 _minReward,\\n        uint256 _distNumerator,\\n        uint256 _distDenominator\\n    ) public onlyOwner() returns (uint256) {\\n\\n        // index is incremented at the beggining to stop reentrancy possibilities\\n        // TODO: study using ReentrancyGuard contract\\n        currentIndex++;\\n\\n        instance[currentIndex - 1].staking = Staking(_stakingAddress);\\n        instance[currentIndex - 1].blockSelector = BlockSelector(\\n            _blockSelectorAddress\\n        );\\n\\n        instance[currentIndex - 1].workerAuth = WorkerAuthManager(\\n            _workerAuthAddress\\n        );\\n\\n        active[currentIndex - 1] = true;\\n\\n        // there is no reentrancy because the bytecode is included in this contract\\n        instance[currentIndex - 1].rewardManager = new RewardManager(\\n            address(this),\\n            _ctsiAddress,\\n            _maxReward,\\n            _minReward,\\n            _distNumerator,\\n            _distDenominator\\n        );\\n\\n        instance[currentIndex - 1].blockSelectorIndex = instance[currentIndex -\\n            1]\\n            .blockSelector\\n            .instantiate(\\n            _minimumDifficulty,\\n            _initialDifficulty,\\n            _difficultyAdjustmentParameter,\\n            _targetInterval,\\n            address(this)\\n        );\\n\\n        emit NewChain (\\n            currentIndex - 1,\\n            _stakingAddress,\\n            _blockSelectorAddress,\\n            _workerAuthAddress,\\n            _minimumDifficulty,\\n            _initialDifficulty,\\n            _difficultyAdjustmentParameter,\\n            _targetInterval,\\n            _ctsiAddress,\\n            _maxReward,\\n            _minReward,\\n            _distNumerator,\\n            _distDenominator\\n        );\\n\\n        return currentIndex - 1;\\n    }\\n\\n    /// @notice Produce a block\\n    /// @param _index the index of the instance of pos you want to interact with\\n    /// @dev this function can only be called by a worker, user never calls it directly\\n    function produceBlock(uint256 _index) public returns (bool) {\\n        PoSCtx storage pos = instance[_index];\\n\\n        require(\\n            pos.workerAuth.isAuthorized(msg.sender, address(this)),\\n            \\\"msg.sender is not authorized to make this call\\\"\\n        );\\n\\n        address user = pos.workerAuth.getOwner(msg.sender);\\n\\n        require(\\n            pos.blockSelector.produceBlock(\\n                pos.blockSelectorIndex,\\n                user,\\n                pos.staking.getStakedBalance(user)\\n            ),\\n            \\\"User couldnt produce a block successfully\\\"\\n        );\\n\\n        uint256 currentReward = pos.rewardManager.getCurrentReward();\\n\\n        pos.rewardManager.reward(user, currentReward);\\n        emit Rewarded(\\n            _index,\\n            msg.sender,\\n            user,\\n            currentReward\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Get reward manager address\\n    /// @param _index index of instance\\n    /// @return address of instance's RewardManager\\n    function getRewardManagerAddress(uint256 _index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(instance[_index].rewardManager);\\n    }\\n\\n    /// @notice Get block selector address\\n    /// @param _index index of instance\\n    /// @return address of instance's block selector\\n    function getBlockSelectorAddress(uint256 _index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(instance[_index].blockSelector);\\n    }\\n\\n    /// @notice Get block selector index\\n    /// @param _index index of instance\\n    /// @return index of instance's block selector\\n    function getBlockSelectorIndex(uint256 _index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return instance[_index].blockSelectorIndex;\\n    }\\n\\n    /// @notice Get staking address\\n    /// @param _index index of instance\\n    /// @return address of instance's staking contract\\n    function getStakingAddress(uint256 _index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(instance[_index].staking);\\n    }\\n\\n    /// @notice Get state of a particular instance\\n    /// @param _index index of instance\\n    /// @param _user address of user\\n    /// @return bool if user is eligible to produce next block\\n    /// @return address of user that was chosen to build the block\\n    /// @return current reward paid by the network for that block\\n    function getState(uint256 _index, address _user)\\n        public\\n        view\\n        returns (\\n            bool,\\n            address,\\n            uint256\\n        )\\n    {\\n        PoSCtx storage pos = instance[_index];\\n        return (\\n            pos.blockSelector.canProduceBlock(\\n                pos.blockSelectorIndex,\\n                _user,\\n                pos.staking.getStakedBalance(_user)\\n            ),\\n            _user,\\n            pos.rewardManager.getCurrentReward()\\n        );\\n    }\\n\\n    function isConcerned(uint256 _index, address _user)\\n        public\\n        override\\n        view\\n        returns (bool)\\n    {\\n        PoSCtx storage pos = instance[_index];\\n        return pos.staking.getStakedBalance(_user) > 0;\\n    }\\n\\n    function getSubInstances(uint256 _index, address)\\n        public\\n        override\\n        view\\n        returns (address[] memory _addresses, uint256[] memory _indices)\\n    {\\n        PoSCtx storage pos = instance[_index];\\n\\n        address[] memory a;\\n        uint256[] memory i;\\n\\n        a = new address[](1);\\n        i = new uint256[](1);\\n\\n        a[0] = address(pos.blockSelector);\\n        i[0] = pos.blockSelectorIndex;\\n        return (a, i);\\n    }\\n\\n    function terminate(uint256 _index) public onlyOwner() {\\n        PoSCtx storage pos = instance[_index];\\n        require(\\n            pos.rewardManager.getCurrentReward() == 0,\\n            \\\"RewardManager still holds funds\\\"\\n        );\\n        deactivate(_index);\\n    }\\n}\\n\",\"keccak256\":\"0x87598a2973f47a2942fea8257e3955216e4b70bfc301d6b6a23201f00300207c\",\"license\":\"Apache-2.0\"},\"contracts/RewardManager.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title RewardManager\\n/// @author Felipe Argento\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract RewardManager {\\n    using SafeMath for uint256;\\n\\n    uint256 immutable minReward;\\n    uint256 immutable maxReward;\\n    uint256 immutable distNumerator;\\n    uint256 immutable distDenominator;\\n    address immutable operator;\\n    IERC20 immutable ctsi;\\n\\n    /// @notice Creates contract\\n    /// @param _operator address of the operator\\n    /// @param _ctsiAddress address of token instance being used\\n    /// @param _maxReward maximum reward that this contract pays\\n    /// @param _minReward minimum reward that this contract pays\\n    /// @param _distNumerator multiplier factor to define reward amount\\n    /// @param _distDenominator dividing factor to define reward amount\\n    constructor(\\n        address _operator,\\n        address _ctsiAddress,\\n        uint256 _maxReward,\\n        uint256 _minReward,\\n        uint256 _distNumerator,\\n        uint256 _distDenominator\\n    ) {\\n\\n        operator = _operator;\\n        ctsi = IERC20(_ctsiAddress);\\n\\n        minReward = _minReward;\\n        maxReward = _maxReward;\\n        distNumerator = _distNumerator;\\n        distDenominator = _distDenominator;\\n    }\\n\\n    /// @notice Rewards address\\n    /// @param _address address be rewarded\\n    /// @param _amount reward\\n    /// @dev only the pos contract can call this\\n    function reward(address _address, uint256 _amount) public {\\n        require(msg.sender == operator, \\\"Only the operator contract can call this function\\\");\\n\\n        ctsi.transfer(_address, _amount);\\n    }\\n\\n    /// @notice Get RewardManager's balance\\n    function getBalance() public view returns (uint256) {\\n        return ctsi.balanceOf(address(this));\\n    }\\n\\n    /// @notice Get current reward amount\\n    function getCurrentReward() public view returns (uint256) {\\n        uint256 cReward = (getBalance().mul(distNumerator)).div(distDenominator);\\n        cReward = cReward > minReward? cReward : minReward;\\n        cReward = cReward > maxReward? maxReward : cReward;\\n\\n        return cReward > getBalance()? getBalance() : cReward;\\n    }\\n}\\n\",\"keccak256\":\"0x22ad2d4fcba145d9c17b86dbd2b8043b10b15f207420ffe6f18dc60fd289526b\",\"license\":\"Apache-2.0\"},\"contracts/Staking.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface staking contract\\npragma solidity ^0.7.0;\\n\\ninterface Staking {\\n\\n    /// @notice Returns total amount of tokens counted as stake\\n    /// @param _userAddress user to retrieve staked balance from\\n    /// @return finalized staked of _userAddress\\n    function getStakedBalance(\\n        address _userAddress) external view returns (uint256);\\n\\n    /// @notice Returns the timestamp when next deposit can be finalized\\n    /// @return timestamp of when finalizeStakes() is callable\\n    function getMaturingTimestamp(address _userAddress) external view returns (uint256);\\n\\n    /// @notice Returns the timestamp when next withdraw can be finalized\\n    /// @return timestamp of when finalizeWithdraw() is callable\\n    function getReleasingTimestamp(address _userAddress) external view returns (uint256);\\n\\n\\n    /// @notice Returns the balance waiting/ready to be matured\\n    /// @return amount that will get staked after finalization\\n    function getMaturingBalance(address _userAddress) external view  returns (uint256);\\n\\n    /// @notice Returns the balance waiting/ready to be released\\n    /// @return amount that will get withdrew after finalization\\n    function getReleasingBalance(address _userAddress) external view  returns (uint256);\\n\\n\\n    /// @notice Deposit CTSI to be staked. The money will turn into staked\\n    ///         balance after timeToStake days\\n    /// @param _amount The amount of tokens that are gonna be deposited.\\n    function stake(uint256 _amount) external;\\n\\n    /// @notice Remove tokens from staked balance. The money can\\n    ///         be released after timeToRelease seconds, if the\\n    ///         function withdraw is called.\\n    /// @param _amount The amount of tokens that are gonna be unstaked.\\n    function unstake(uint256 _amount) external;\\n\\n    /// @notice Transfer tokens to user's wallet.\\n    /// @param _amount The amount of tokens that are gonna be transferred.\\n    function withdraw(uint256 _amount) external;\\n\\n    // events\\n    /// @notice CTSI tokens were deposited, they count as stake after _maturationDate\\n    /// @param user address of msg.sender\\n    /// @param amount amount deposited for staking\\n    /// @param maturationDate date when the stake can be finalized\\n    event Stake(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 maturationDate\\n    );\\n\\n    /// @notice Unstake tokens, moving them to releasing structure\\n    /// @param user address of msg.sender\\n    /// @param amount amount of tokens to be released\\n    /// @param maturationDate date when the tokens can be withdrew\\n    event Unstake(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 maturationDate\\n    );\\n\\n    /// @notice Withdraw process was finalized\\n    /// @param user address of msg.sender\\n    /// @param amount amount of tokens withdrawn\\n    event Withdraw(\\n        address indexed user,\\n        uint256 amount\\n    );\\n}\\n\\n\",\"keccak256\":\"0x54a7b59b2be2d325bdf6d3885d1d2d7a8ec1c0dab07a37c8861c7814f384a6e2\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6080604052600060015534801561001557600080fd5b50600061002061006f565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610073565b3390565b6119f4806100826000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806385425f4f11610097578063a5a6cd0b11610066578063a5a6cd0b1461030e578063c526656c1461032b578063f2fde38b146103f0578063f8fe50da1461041657610100565b806385425f4f1461024d5780638da5cb5b1461026a578063902c0f0614610272578063930d2d471461028f57610100565b8063715018a6116100d3578063715018a6146101b557806373df1612146101bf5780637a828b281461021357806382afd23b1461023057610100565b806301ff62ab1461010557806326987b60146101455780633d46b8191461015f5780635c6b67821461017c575b600080fd5b6101316004803603604081101561011b57600080fd5b50803590602001356001600160a01b0316610433565b604080519115158252519081900360200190f35b61014d6104c6565b60408051918252519081900360200190f35b61014d6004803603602081101561017557600080fd5b50356104cc565b6101996004803603602081101561019257600080fd5b503561057d565b604080516001600160a01b039092168252519081900360200190f35b6101bd61059b565b005b6101eb600480360360408110156101d557600080fd5b50803590602001356001600160a01b031661063d565b6040805193151584526001600160a01b03909216602084015282820152519081900360600190f35b6101bd6004803603602081101561022957600080fd5b50356107dd565b6101316004803603602081101561024657600080fd5b5035610916565b6101996004803603602081101561026357600080fd5b503561092b565b610199610949565b6101996004803603602081101561028857600080fd5b5035610958565b61014d60048036036101808110156102a657600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359160808201359163ffffffff60a082013581169260c08301359091169160e0810135909116906101008101359061012081013590610140810135906101600135610976565b6101316004803603602081101561032457600080fd5b5035610d58565b6103576004803603604081101561034157600080fd5b50803590602001356001600160a01b0316611119565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561039b578181015183820152602001610383565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156103da5781810151838201526020016103c2565b5050505090500194505050505060405180910390f35b6101bd6004803603602081101561040657600080fd5b50356001600160a01b03166111d8565b61014d6004803603602081101561042c57600080fd5b50356112d0565b600082815260046020818152604080842060028101548251633a02a42d60e01b81526001600160a01b0388811696820196909652925191948694911692633a02a42d9260248083019392829003018186803b15801561049157600080fd5b505afa1580156104a5573d6000803e3d6000fd5b505050506040513d60208110156104bb57600080fd5b505111949350505050565b60015481565b600081806001541161051e576040805162461bcd60e51b8152602060048201526016602482015275125b99195e081b9bdd081a5b9cdd185b9d1a585d195960521b604482015290519081900360640190fd5b61052781610916565b610569576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b505060009081526003602052604090205490565b6000908152600460205260409020600201546001600160a01b031690565b6105a36112e2565b6000546001600160a01b039081169116146105f3576040805162461bcd60e51b81526020600482018190526024820152600080516020611948833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60008281526004602081815260408084206001810154815460028301548451633a02a42d60e01b81526001600160a01b038a8116988201989098529451889788979596948116956359dc826c958c9490921692633a02a42d926024808201939291829003018186803b1580156106b257600080fd5b505afa1580156106c6573d6000803e3d6000fd5b505050506040513d60208110156106dc57600080fd5b5051604080516001600160e01b031960e087901b16815260048101949094526001600160a01b0390921660248401526044830152516064808301926020929190829003018186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b505050506040513d602081101561075a57600080fd5b505160038201546040805163457642a160e11b8152905188926001600160a01b031691638aec8542916004808301926020929190829003018186803b1580156107a257600080fd5b505afa1580156107b6573d6000803e3d6000fd5b505050506040513d60208110156107cc57600080fd5b505191955093509150509250925092565b6107e56112e2565b6000546001600160a01b03908116911614610835576040805162461bcd60e51b81526020600482018190526024820152600080516020611948833981519152604482015290519081900360640190fd5b6000818152600460208181526040928390206003810154845163457642a160e11b8152945191946001600160a01b0390911693638aec854293828201939092909190829003018186803b15801561088b57600080fd5b505afa15801561089f573d6000803e3d6000fd5b505050506040513d60208110156108b557600080fd5b505115610909576040805162461bcd60e51b815260206004820152601f60248201527f5265776172644d616e61676572207374696c6c20686f6c64732066756e647300604482015290519081900360640190fd5b610912826112e6565b5050565b60009081526002602052604090205460ff1690565b6000908152600460205260409020600301546001600160a01b031690565b6000546001600160a01b031690565b6000908152600460205260409020600101546001600160a01b031690565b60006109806112e2565b6000546001600160a01b039081169116146109d0576040805162461bcd60e51b81526020600482018190526024820152600080516020611948833981519152604482015290519081900360640190fd5b6001600081548092919060010191905055508c600460006001805403815260200190815260200160002060020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b600460006001805403815260200190815260200160002060010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600460006001805403815260200190815260200160002060040160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001600260006001805403815260200190815260200160002060006101000a81548160ff021916908315150217905550308686868686604051610ae190611309565b80876001600160a01b03168152602001866001600160a01b031681526020018581526020018481526020018381526020018281526020019650505050505050604051809103906000f080158015610b3c573d6000803e3d6000fd5b50600460006001805403815260200190815260200160002060030160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600460006001805403815260200190815260200160002060010160009054906101000a90046001600160a01b03166001600160a01b031663da1c71408b8b8b8b306040518663ffffffff1660e01b8152600401808681526020018581526020018463ffffffff1681526020018363ffffffff168152602001826001600160a01b0316815260200195505050505050602060405180830381600087803b158015610c2357600080fd5b505af1158015610c37573d6000803e3d6000fd5b505050506040513d6020811015610c4d57600080fd5b810190808051906020019092919050505060046000600180540381526020019081526020016000206000018190555060018054037f73204ace16a237658cf44ade5197c9b3831c2c556db46b646ad57ae71833fbab8e8e8e8e8e8e8e8e8e8e8e8e604051808d6001600160a01b031681526020018c6001600160a01b031681526020018b6001600160a01b031681526020018a81526020018981526020018863ffffffff1681526020018763ffffffff168152602001866001600160a01b031681526020018581526020018481526020018381526020018281526020019c5050505050505050505050505060405180910390a250600154600019019c9b505050505050505050505050565b60008181526004602081815260408084208084015482516332f256cf60e11b81523395810195909552306024860152915190936001600160a01b03909216926365e4ad9e9260448082019391829003018186803b158015610db857600080fd5b505afa158015610dcc573d6000803e3d6000fd5b505050506040513d6020811015610de257600080fd5b5051610e1f5760405162461bcd60e51b815260040180806020018281038252602e815260200180611968602e913960400191505060405180910390fd5b6004808201546040805163fa54416160e01b81523393810193909352516000926001600160a01b039092169163fa544161916024808301926020929190829003018186803b158015610e7057600080fd5b505afa158015610e84573d6000803e3d6000fd5b505050506040513d6020811015610e9a57600080fd5b505160018301548354600285015460408051633a02a42d60e01b81526001600160a01b038087166004830152915195965093811694635378014f94879390921691633a02a42d916024808301926020929190829003018186803b158015610f0057600080fd5b505afa158015610f14573d6000803e3d6000fd5b505050506040513d6020811015610f2a57600080fd5b5051604080516001600160e01b031960e087901b16815260048101949094526001600160a01b03909216602484015260448301525160648083019260209291908290030181600087803b158015610f8057600080fd5b505af1158015610f94573d6000803e3d6000fd5b505050506040513d6020811015610faa57600080fd5b5051610fe75760405162461bcd60e51b81526004018080602001828103825260298152602001806119966029913960400191505060405180910390fd5b60038201546040805163457642a160e11b815290516000926001600160a01b031691638aec8542916004808301926020929190829003018186803b15801561102e57600080fd5b505afa158015611042573d6000803e3d6000fd5b505050506040513d602081101561105857600080fd5b50516003840154604080516310b3879160e11b81526001600160a01b0386811660048301526024820185905291519394509116916321670f229160448082019260009290919082900301818387803b1580156110b357600080fd5b505af11580156110c7573d6000803e3d6000fd5b50506040805184815290516001600160a01b038616935033925088917f8879c88d0b8e3d79b781927b7436924020902eb1f952514b79e9889b870b576b919081900360200190a4506001949350505050565b600082815260046020526040908190208151600180825281840190935260609283929183918291908160200160208202803683375050604080516001808252818301909252929450905060208083019080368337505050600184015483519192506001600160a01b031690839060009061118f57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508260000154816000815181106111c157fe5b602090810291909101015290969095509350505050565b6111e06112e2565b6000546001600160a01b03908116911614611230576040805162461bcd60e51b81526020600482018190526024820152600080516020611948833981519152604482015290519081900360640190fd5b6001600160a01b0381166112755760405162461bcd60e51b81526004018080602001828103825260268152602001806119226026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526004602052604090205490565b3390565b6000908152600260209081526040808320805460ff191690556003909152812055565b61060b806113178339019056fe61014060405234801561001157600080fd5b5060405161060b38038061060b833981810160405260c081101561003457600080fd5b5080516020820151604083015160608085015160808087015160a0978801516001600160601b031997851b8816610100529590931b9095166101205290935290925260c05260e05260805160a05160c05160e0516101005160601c6101205160601c6105326100d960003980609a528061019f52508061014152508061024c5250806102705250806102f852806103255250806102a752806102ce52506105326000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806312065fe01461004657806321670f22146100605780638aec85421461008e575b600080fd5b61004e610096565b60408051918252519081900360200190f35b61008c6004803603604081101561007657600080fd5b506001600160a01b038135169060200135610136565b005b61004e610244565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561010557600080fd5b505afa158015610119573d6000803e3d6000fd5b505050506040513d602081101561012f57600080fd5b5051905090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461019d5760405162461bcd60e51b81526004018080602001828103825260318152602001806104ab6031913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561021457600080fd5b505af1158015610228573d6000803e3d6000fd5b505050506040513d602081101561023e57600080fd5b50505050565b6000806102a37f000000000000000000000000000000000000000000000000000000000000000061029d7f0000000000000000000000000000000000000000000000000000000000000000610297610096565b90610369565b906103cb565b90507f000000000000000000000000000000000000000000000000000000000000000081116102f2577f00000000000000000000000000000000000000000000000000000000000000006102f4565b805b90507f000000000000000000000000000000000000000000000000000000000000000081116103235780610345565b7f00000000000000000000000000000000000000000000000000000000000000005b905061034f610096565b811161035b5780610363565b610363610096565b91505090565b600082610378575060006103c5565b8282028284828161038557fe5b04146103c25760405162461bcd60e51b81526004018080602001828103825260218152602001806104dc6021913960400191505060405180910390fd5b90505b92915050565b60006103c283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836104945760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610459578181015183820152602001610441565b50505050905090810190601f1680156104865780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816104a057fe5b049594505050505056fe4f6e6c7920746865206f70657261746f7220636f6e74726163742063616e2063616c6c20746869732066756e6374696f6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220ed8f9504b736dec7bd6dac805c143ded9913843c68a27f4c23cdf4b430d66cf364736f6c634300070400334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726d73672e73656e646572206973206e6f7420617574686f72697a656420746f206d616b6520746869732063616c6c5573657220636f756c646e742070726f64756365206120626c6f636b207375636365737366756c6c79a26469706673582212206162725aa9ceda8c2b9bcd75a9ee87bcf0315daf6dfe896b9d7c3d05deda52b664736f6c63430007040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBlockSelectorAddress(uint256)": {
        "params": {
          "_index": "index of instance"
        },
        "returns": {
          "_0": "address of instance's block selector"
        }
      },
      "getBlockSelectorIndex(uint256)": {
        "params": {
          "_index": "index of instance"
        },
        "returns": {
          "_0": "index of instance's block selector"
        }
      },
      "getRewardManagerAddress(uint256)": {
        "params": {
          "_index": "index of instance"
        },
        "returns": {
          "_0": "address of instance's RewardManager"
        }
      },
      "getStakingAddress(uint256)": {
        "params": {
          "_index": "index of instance"
        },
        "returns": {
          "_0": "address of instance's staking contract"
        }
      },
      "getState(uint256,address)": {
        "params": {
          "_index": "index of instance",
          "_user": "address of user"
        },
        "returns": {
          "_0": "bool if user is eligible to produce next block",
          "_1": "address of user that was chosen to build the block",
          "_2": "current reward paid by the network for that block"
        }
      },
      "instantiate(address,address,address,uint256,uint256,uint32,uint32,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_blockSelectorAddress": "address of blockSelector contract",
          "_ctsiAddress": "address of token instance being used",
          "_difficultyAdjustmentParameter": "how quickly the difficulty gets updated according to the difference between time passed and desired draw time interval.",
          "_distDenominator": "dividing factor to define reward amount",
          "_distNumerator": "multiplier factor to define reward amount",
          "_maxReward": "maximum reward that this contract pays",
          "_minReward": "minimum reward that this contract pays",
          "_stakingAddress": "address of StakingInterface",
          "_targetInterval": "how often we want to elect a block producer",
          "_workerAuthAddress": "address of worker manager contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "produceBlock(uint256)": {
        "details": "this function can only be called by a worker, user never calls it directly",
        "params": {
          "_index": "the index of the instance of pos you want to interact with"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBlockSelectorAddress(uint256)": {
        "notice": "Get block selector address"
      },
      "getBlockSelectorIndex(uint256)": {
        "notice": "Get block selector index"
      },
      "getRewardManagerAddress(uint256)": {
        "notice": "Get reward manager address"
      },
      "getStakingAddress(uint256)": {
        "notice": "Get staking address"
      },
      "getState(uint256,address)": {
        "notice": "Get state of a particular instance"
      },
      "instantiate(address,address,address,uint256,uint256,uint32,uint32,address,uint256,uint256,uint256,uint256)": {
        "notice": "Instantiates a Proof of Stake"
      },
      "produceBlock(uint256)": {
        "notice": "Produce a block"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1117,
        "contract": "contracts/PoS.sol:PoS",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 927,
        "contract": "contracts/PoS.sol:PoS",
        "label": "currentIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 931,
        "contract": "contracts/PoS.sol:PoS",
        "label": "active",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 935,
        "contract": "contracts/PoS.sol:PoS",
        "label": "nonce",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2257,
        "contract": "contracts/PoS.sol:PoS",
        "label": "instance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(PoSCtx)2253_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BlockSelector)2223": {
        "encoding": "inplace",
        "label": "contract BlockSelector",
        "numberOfBytes": "20"
      },
      "t_contract(RewardManager)2895": {
        "encoding": "inplace",
        "label": "contract RewardManager",
        "numberOfBytes": "20"
      },
      "t_contract(Staking)2981": {
        "encoding": "inplace",
        "label": "contract Staking",
        "numberOfBytes": "20"
      },
      "t_contract(WorkerAuthManager)1086": {
        "encoding": "inplace",
        "label": "contract WorkerAuthManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(PoSCtx)2253_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PoS.PoSCtx)",
        "numberOfBytes": "32",
        "value": "t_struct(PoSCtx)2253_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoSCtx)2253_storage": {
        "encoding": "inplace",
        "label": "struct PoS.PoSCtx",
        "members": [
          {
            "astId": 2244,
            "contract": "contracts/PoS.sol:PoS",
            "label": "blockSelectorIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2246,
            "contract": "contracts/PoS.sol:PoS",
            "label": "blockSelector",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(BlockSelector)2223"
          },
          {
            "astId": 2248,
            "contract": "contracts/PoS.sol:PoS",
            "label": "staking",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(Staking)2981"
          },
          {
            "astId": 2250,
            "contract": "contracts/PoS.sol:PoS",
            "label": "rewardManager",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(RewardManager)2895"
          },
          {
            "astId": 2252,
            "contract": "contracts/PoS.sol:PoS",
            "label": "workerAuth",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(WorkerAuthManager)1086"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}