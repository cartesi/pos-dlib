{
  "contractName": "RewardManager",
  "sourceName": "contracts/RewardManager.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ctsiAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_distNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_distDenominator",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "reward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x61014060405234801561001157600080fd5b5060405161060b38038061060b833981810160405260c081101561003457600080fd5b5080516020820151604083015160608085015160808087015160a0978801516001600160601b031997851b8816610100529590931b9095166101205290935290925260c05260e05260805160a05160c05160e0516101005160601c6101205160601c6105326100d960003980609a528061019f52508061014152508061024c5250806102705250806102f852806103255250806102a752806102ce52506105326000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806312065fe01461004657806321670f22146100605780638aec85421461008e575b600080fd5b61004e610096565b60408051918252519081900360200190f35b61008c6004803603604081101561007657600080fd5b506001600160a01b038135169060200135610136565b005b61004e610244565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561010557600080fd5b505afa158015610119573d6000803e3d6000fd5b505050506040513d602081101561012f57600080fd5b5051905090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461019d5760405162461bcd60e51b81526004018080602001828103825260318152602001806104ab6031913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561021457600080fd5b505af1158015610228573d6000803e3d6000fd5b505050506040513d602081101561023e57600080fd5b50505050565b6000806102a37f000000000000000000000000000000000000000000000000000000000000000061029d7f0000000000000000000000000000000000000000000000000000000000000000610297610096565b90610369565b906103cb565b90507f000000000000000000000000000000000000000000000000000000000000000081116102f2577f00000000000000000000000000000000000000000000000000000000000000006102f4565b805b90507f000000000000000000000000000000000000000000000000000000000000000081116103235780610345565b7f00000000000000000000000000000000000000000000000000000000000000005b905061034f610096565b811161035b5780610363565b610363610096565b91505090565b600082610378575060006103c5565b8282028284828161038557fe5b04146103c25760405162461bcd60e51b81526004018080602001828103825260218152602001806104dc6021913960400191505060405180910390fd5b90505b92915050565b60006103c283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836104945760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610459578181015183820152602001610441565b50505050905090810190601f1680156104865780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816104a057fe5b049594505050505056fe4f6e6c7920746865206f70657261746f7220636f6e74726163742063616e2063616c6c20746869732066756e6374696f6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220ed8f9504b736dec7bd6dac805c143ded9913843c68a27f4c23cdf4b430d66cf364736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806312065fe01461004657806321670f22146100605780638aec85421461008e575b600080fd5b61004e610096565b60408051918252519081900360200190f35b61008c6004803603604081101561007657600080fd5b506001600160a01b038135169060200135610136565b005b61004e610244565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561010557600080fd5b505afa158015610119573d6000803e3d6000fd5b505050506040513d602081101561012f57600080fd5b5051905090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461019d5760405162461bcd60e51b81526004018080602001828103825260318152602001806104ab6031913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561021457600080fd5b505af1158015610228573d6000803e3d6000fd5b505050506040513d602081101561023e57600080fd5b50505050565b6000806102a37f000000000000000000000000000000000000000000000000000000000000000061029d7f0000000000000000000000000000000000000000000000000000000000000000610297610096565b90610369565b906103cb565b90507f000000000000000000000000000000000000000000000000000000000000000081116102f2577f00000000000000000000000000000000000000000000000000000000000000006102f4565b805b90507f000000000000000000000000000000000000000000000000000000000000000081116103235780610345565b7f00000000000000000000000000000000000000000000000000000000000000005b905061034f610096565b811161035b5780610363565b610363610096565b91505090565b600082610378575060006103c5565b8282028284828161038557fe5b04146103c25760405162461bcd60e51b81526004018080602001828103825260218152602001806104dc6021913960400191505060405180910390fd5b90505b92915050565b60006103c283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836104945760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610459578181015183820152602001610441565b50505050905090810190601f1680156104865780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816104a057fe5b049594505050505056fe4f6e6c7920746865206f70657261746f7220636f6e74726163742063616e2063616c6c20746869732066756e6374696f6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220ed8f9504b736dec7bd6dac805c143ded9913843c68a27f4c23cdf4b430d66cf364736f6c63430007040033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_ctsiAddress": "address of token instance being used",
          "_distDenominator": "dividing factor to define reward amount",
          "_distNumerator": "multiplier factor to define reward amount",
          "_maxReward": "maximum reward that this contract pays",
          "_minReward": "minimum reward that this contract pays",
          "_operator": "address of the operator"
        }
      },
      "reward(address,uint256)": {
        "details": "only the pos contract can call this",
        "params": {
          "_address": "address be rewarded",
          "_amount": "reward"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH2 0x140 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x60B CODESIZE SUB DUP1 PUSH2 0x60B DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP1 DUP6 ADD MLOAD PUSH1 0x80 DUP1 DUP8 ADD MLOAD PUSH1 0xA0 SWAP8 DUP9 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP8 DUP6 SHL DUP9 AND PUSH2 0x100 MSTORE SWAP6 SWAP1 SWAP4 SHL SWAP1 SWAP6 AND PUSH2 0x120 MSTORE SWAP1 SWAP4 MSTORE SWAP1 SWAP3 MSTORE PUSH1 0xC0 MSTORE PUSH1 0xE0 MSTORE PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x60 SHR PUSH2 0x120 MLOAD PUSH1 0x60 SHR PUSH2 0x532 PUSH2 0xD9 PUSH1 0x0 CODECOPY DUP1 PUSH1 0x9A MSTORE DUP1 PUSH2 0x19F MSTORE POP DUP1 PUSH2 0x141 MSTORE POP DUP1 PUSH2 0x24C MSTORE POP DUP1 PUSH2 0x270 MSTORE POP DUP1 PUSH2 0x2F8 MSTORE DUP1 PUSH2 0x325 MSTORE POP DUP1 PUSH2 0x2A7 MSTORE DUP1 PUSH2 0x2CE MSTORE POP PUSH2 0x532 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x12065FE0 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x21670F22 EQ PUSH2 0x60 JUMPI DUP1 PUSH4 0x8AEC8542 EQ PUSH2 0x8E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x96 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x8C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x136 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E PUSH2 0x244 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x119 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4AB PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x228 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x23E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2A3 PUSH32 0x0 PUSH2 0x29D PUSH32 0x0 PUSH2 0x297 PUSH2 0x96 JUMP JUMPDEST SWAP1 PUSH2 0x369 JUMP JUMPDEST SWAP1 PUSH2 0x3CB JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT PUSH2 0x2F2 JUMPI PUSH32 0x0 PUSH2 0x2F4 JUMP JUMPDEST DUP1 JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT PUSH2 0x323 JUMPI DUP1 PUSH2 0x345 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH2 0x34F PUSH2 0x96 JUMP JUMPDEST DUP2 GT PUSH2 0x35B JUMPI DUP1 PUSH2 0x363 JUMP JUMPDEST PUSH2 0x363 PUSH2 0x96 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x378 JUMPI POP PUSH1 0x0 PUSH2 0x3C5 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x385 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4DC PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C2 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x0 DUP2 DUP4 PUSH2 0x494 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x459 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x441 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x486 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x4A0 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID 0x4F PUSH15 0x6C7920746865206F70657261746F72 KECCAK256 PUSH4 0x6F6E7472 PUSH2 0x6374 KECCAK256 PUSH4 0x616E2063 PUSH2 0x6C6C KECCAK256 PUSH21 0x6869732066756E6374696F6E536166654D6174683A KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77A26469706673582212 KECCAK256 0xED DUP16 SWAP6 DIV 0xB7 CALLDATASIZE 0xDE 0xC7 0xBD PUSH14 0xAC805C143DED9913843C68A27F4C 0x23 0xCD DELEGATECALL 0xB4 ADDRESS 0xD6 PUSH13 0xF364736F6C6343000704003300 ",
      "sourceMap": "806:2005:11:-:0;;;1491:421;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1491:421:11;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1699:20:11;;;;;;;1729:27;;;;;;;;;1767:22;;;;1799;;;;1491:421;1831:30;;;1871:34;;;;1491:421;;;;;;;-1:-1:-1;;;;;806:2005:11;;;;;-1:-1:-1;806:2005:11;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [],
      "immutableReferences": {
        "2771": [
          {
            "length": 32,
            "start": 679
          },
          {
            "length": 32,
            "start": 718
          }
        ],
        "2773": [
          {
            "length": 32,
            "start": 760
          },
          {
            "length": 32,
            "start": 805
          }
        ],
        "2775": [
          {
            "length": 32,
            "start": 624
          }
        ],
        "2777": [
          {
            "length": 32,
            "start": 588
          }
        ],
        "2779": [
          {
            "length": 32,
            "start": 321
          }
        ],
        "2781": [
          {
            "length": 32,
            "start": 154
          },
          {
            "length": 32,
            "start": 415
          }
        ]
      },
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x12065FE0 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x21670F22 EQ PUSH2 0x60 JUMPI DUP1 PUSH4 0x8AEC8542 EQ PUSH2 0x8E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x96 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x8C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x136 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E PUSH2 0x244 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x119 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4AB PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x228 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x23E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2A3 PUSH32 0x0 PUSH2 0x29D PUSH32 0x0 PUSH2 0x297 PUSH2 0x96 JUMP JUMPDEST SWAP1 PUSH2 0x369 JUMP JUMPDEST SWAP1 PUSH2 0x3CB JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT PUSH2 0x2F2 JUMPI PUSH32 0x0 PUSH2 0x2F4 JUMP JUMPDEST DUP1 JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT PUSH2 0x323 JUMPI DUP1 PUSH2 0x345 JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP1 POP PUSH2 0x34F PUSH2 0x96 JUMP JUMPDEST DUP2 GT PUSH2 0x35B JUMPI DUP1 PUSH2 0x363 JUMP JUMPDEST PUSH2 0x363 PUSH2 0x96 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x378 JUMPI POP PUSH1 0x0 PUSH2 0x3C5 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x385 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4DC PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C2 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x0 DUP2 DUP4 PUSH2 0x494 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x459 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x441 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x486 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x4A0 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID 0x4F PUSH15 0x6C7920746865206F70657261746F72 KECCAK256 PUSH4 0x6F6E7472 PUSH2 0x6374 KECCAK256 PUSH4 0x616E2063 PUSH2 0x6C6C KECCAK256 PUSH21 0x6869732066756E6374696F6E536166654D6174683A KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77A26469706673582212 KECCAK256 0xED DUP16 SWAP6 DIV 0xB7 CALLDATASIZE 0xDE 0xC7 0xBD PUSH14 0xAC805C143DED9913843C68A27F4C 0x23 0xCD DELEGATECALL 0xB4 ADDRESS 0xD6 PUSH13 0xF364736F6C6343000704003300 ",
      "sourceMap": "806:2005:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2325:105;;;:::i;:::-;;;;;;;;;;;;;;;;2073:202;;;;;;;;;;;;;;;;-1:-1:-1;2073:202:11;;-1:-1:-1;;;;;2073:202:11;;;;;;:::i;:::-;;2478:331;;;:::i;2325:105::-;2394:29;;;-1:-1:-1;;;2394:29:11;;2417:4;2394:29;;;;;;2368:7;;-1:-1:-1;;;;;2394:4:11;:14;;;;:29;;;;;;;;;;;;;;;:14;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2394:29:11;;-1:-1:-1;2325:105:11;:::o;2073:202::-;2163:8;-1:-1:-1;;;;;2149:22:11;:10;:22;2141:84;;;;-1:-1:-1;;;2141:84:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2236:32;;;-1:-1:-1;;;2236:32:11;;-1:-1:-1;;;;;2236:32:11;;;;;;;;;;;;;;;:4;:13;;;;;;:32;;;;;;;;;;;;;;;-1:-1:-1;2236:13:11;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2073:202:11:o;2478:331::-;2527:7;2546:15;2564:54;2602:15;2565:31;2582:13;2565:12;:10;:12::i;:::-;:16;;:31::i;:::-;2564:37;;:54::i;:::-;2546:72;;2648:9;2638:7;:19;:40;;2669:9;2638:40;;;2659:7;2638:40;2628:50;;2708:9;2698:7;:19;:40;;2731:7;2698:40;;;2719:9;2698:40;2688:50;;2766:12;:10;:12::i;:::-;2756:7;:22;:46;;2795:7;2756:46;;;2780:12;:10;:12::i;:::-;2749:53;;;2478:331;:::o;2180:459:7:-;2238:7;2479:6;2475:45;;-1:-1:-1;2508:1:7;2501:8;;2475:45;2542:5;;;2546:1;2542;:5;:1;2565:5;;;;;:10;2557:56;;;;-1:-1:-1;;;2557:56:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2631:1;-1:-1:-1;2180:459:7;;;;;:::o;3101:130::-;3159:7;3185:39;3189:1;3192;3185:39;;;;;;;;;;;;;;;;;3799:7;3833:12;3826:5;3818:28;;;;-1:-1:-1;;;3818:28:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3856:9;3872:1;3868;:5;;;;;;;3713:272;-1:-1:-1;;;;;3713:272:7:o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "266000",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "getBalance()": "infinite",
        "getCurrentReward()": "infinite",
        "reward(address,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "getBalance()": "12065fe0",
      "getCurrentReward()": "8aec8542",
      "reward(address,uint256)": "21670f22"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ctsiAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_ctsiAddress\":\"address of token instance being used\",\"_distDenominator\":\"dividing factor to define reward amount\",\"_distNumerator\":\"multiplier factor to define reward amount\",\"_maxReward\":\"maximum reward that this contract pays\",\"_minReward\":\"minimum reward that this contract pays\",\"_operator\":\"address of the operator\"}},\"reward(address,uint256)\":{\"details\":\"only the pos contract can call this\",\"params\":{\"_address\":\"address be rewarded\",\"_amount\":\"reward\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates contract\"},\"getBalance()\":{\"notice\":\"Get RewardManager's balance\"},\"getCurrentReward()\":{\"notice\":\"Get current reward amount\"},\"reward(address,uint256)\":{\"notice\":\"Rewards address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardManager.sol\":\"RewardManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/RewardManager.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title RewardManager\\n/// @author Felipe Argento\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract RewardManager {\\n    using SafeMath for uint256;\\n\\n    uint256 immutable minReward;\\n    uint256 immutable maxReward;\\n    uint256 immutable distNumerator;\\n    uint256 immutable distDenominator;\\n    address immutable operator;\\n    IERC20 immutable ctsi;\\n\\n    /// @notice Creates contract\\n    /// @param _operator address of the operator\\n    /// @param _ctsiAddress address of token instance being used\\n    /// @param _maxReward maximum reward that this contract pays\\n    /// @param _minReward minimum reward that this contract pays\\n    /// @param _distNumerator multiplier factor to define reward amount\\n    /// @param _distDenominator dividing factor to define reward amount\\n    constructor(\\n        address _operator,\\n        address _ctsiAddress,\\n        uint256 _maxReward,\\n        uint256 _minReward,\\n        uint256 _distNumerator,\\n        uint256 _distDenominator\\n    ) {\\n\\n        operator = _operator;\\n        ctsi = IERC20(_ctsiAddress);\\n\\n        minReward = _minReward;\\n        maxReward = _maxReward;\\n        distNumerator = _distNumerator;\\n        distDenominator = _distDenominator;\\n    }\\n\\n    /// @notice Rewards address\\n    /// @param _address address be rewarded\\n    /// @param _amount reward\\n    /// @dev only the pos contract can call this\\n    function reward(address _address, uint256 _amount) public {\\n        require(msg.sender == operator, \\\"Only the operator contract can call this function\\\");\\n\\n        ctsi.transfer(_address, _amount);\\n    }\\n\\n    /// @notice Get RewardManager's balance\\n    function getBalance() public view returns (uint256) {\\n        return ctsi.balanceOf(address(this));\\n    }\\n\\n    /// @notice Get current reward amount\\n    function getCurrentReward() public view returns (uint256) {\\n        uint256 cReward = (getBalance().mul(distNumerator)).div(distDenominator);\\n        cReward = cReward > minReward? cReward : minReward;\\n        cReward = cReward > maxReward? maxReward : cReward;\\n\\n        return cReward > getBalance()? getBalance() : cReward;\\n    }\\n}\\n\",\"keccak256\":\"0x22ad2d4fcba145d9c17b86dbd2b8043b10b15f207420ffe6f18dc60fd289526b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates contract"
      },
      "getBalance()": {
        "notice": "Get RewardManager's balance"
      },
      "getCurrentReward()": {
        "notice": "Get current reward amount"
      },
      "reward(address,uint256)": {
        "notice": "Rewards address"
      }
    },
    "version": 1
  }
}