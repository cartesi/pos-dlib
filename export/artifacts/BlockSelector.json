{
  "contractName": "BlockSelector",
  "sourceName": "contracts/BlockSelector.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "producer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "name": "BlockProduced",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "canProduceBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBlockCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getDifficultyAdjustmentParameter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getMinDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentNonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getSelectionBlockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "_uintValues",
          "type": "uint256[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSubInstances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTargetInterval",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDifficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialDifficulty",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_difficultyAdjustmentParameter",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_targetInterval",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_posManagerAddress",
          "type": "address"
        }
      ],
      "name": "instantiate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isConcerned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "log2ApproxTimes1M",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "produceBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806383f6f5ca11610097578063d0aeade711610066578063d0aeade7146103b3578063da1c7140146103d0578063e3581b6814610419578063f90700441461043657610100565b806383f6f5ca14610297578063983ef725146102b4578063c526656c146102d1578063c67ddc381461039657610100565b80635378014f116100d35780635378014f146101b257806359dc826c146101e457806373df16121461021657806382afd23b1461027a57610100565b806301ff62ab1461010557806326987b60146101455780633d46b8191461015f5780634e58fdca1461017c575b600080fd5b6101316004803603604081101561011b57600080fd5b50803590602001356001600160a01b0316610453565b604080519115158252519081900360200190f35b61014d61045c565b60408051918252519081900360200190f35b61014d6004803603602081101561017557600080fd5b5035610462565b6101996004803603602081101561019257600080fd5b5035610513565b6040805163ffffffff9092168252519081900360200190f35b610131600480360360608110156101c857600080fd5b508035906001600160a01b036020820135169060400135610538565b610131600480360360608110156101fa57600080fd5b508035906001600160a01b03602082013516906040013561066e565b6102426004803603604081101561022c57600080fd5b50803590602001356001600160a01b03166106dd565b604051808260a080838360005b8381101561026757818101518382015260200161024f565b5050505090500191505060405180910390f35b6101316004803603602081101561029057600080fd5b503561075c565b61014d600480360360208110156102ad57600080fd5b5035610771565b61014d600480360360208110156102ca57600080fd5b5035610783565b6102fd600480360360408110156102e757600080fd5b50803590602001356001600160a01b0316610798565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610341578181015183820152602001610329565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610380578181015183820152602001610368565b5050505090500194505050505060405180910390f35b61014d600480360360208110156103ac57600080fd5b50356107e5565b610199600480360360208110156103c957600080fd5b503561080d565b61014d600480360360a08110156103e657600080fd5b50803590602081013590604081013563ffffffff90811691606081013590911690608001356001600160a01b031661082f565b61014d6004803603602081101561042f57600080fd5b503561090a565b6101996004803603602081101561044c57600080fd5b50356109a9565b60005b92915050565b60005481565b60008180600054116104b4576040805162461bcd60e51b8152602060048201526016602482015275125b99195e081b9bdd081a5b9cdd185b9d1a585d195960521b604482015290519081900360640190fd5b6104bd8161075c565b6104ff576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b505060009081526002602052604090205490565b600081815260046020526040902060020154600160a01b900463ffffffff165b919050565b6000838152600460205260408120826105825760405162461bcd60e51b8152600401808060200182810382526024815260200180610eac6024913960400191505060405180910390fd5b60028101546001600160a01b031633146105cd5760405162461bcd60e51b815260040180806020018281038252602a815260200180610e61602a913960400191505060405180910390fd5b6105d885858561066e565b1561066157836001600160a01b0316857f14aa79ee14fcd694c30b9c3f6d41247d2e0c87bfefec35a6864d124e8086467283600201601c9054906101000a900463ffffffff16610627896107e5565b60018601546040805163ffffffff9094168452602084019290925282820152519081900360600190a3610659856109cb565b915050610667565b60009150505b9392505050565b6000838152600460205260408120600381015463ffffffff90811660010116431161069d576000915050610667565b60006106a8866107e5565b90506106c86106b78787610a38565b600184015490630f42400003610ad7565b6106d28583610ad7565b119695505050505050565b6106e5610e42565b60008381526004602052604090206106fb610e42565b6040518060a001604052804381526020018360030160009054906101000a900463ffffffff1660010163ffffffff16815260200183600101548152602001610742876107e5565b81526020016107518787610a38565b905295945050505050565b60009081526001602052604090205460ff1690565b60009081526004602052604090205490565b60009081526004602052604090206001015490565b606080808060006040519080825280602002602001820160405280156107c8578160200160208202803683370190505b506040805160008152602081019091529097909650945050505050565b6000818152600460205260408120600381015461066790439063ffffffff90811690610b3016565b600090815260046020526040902060020154600160e01b900463ffffffff1690565b600080548152600460209081526040808320889055825483528083206001908101889055835484528184206002908101805463ffffffff60a01b1916600160a01b63ffffffff8b81169190910291909117909155855486528386208201805463ffffffff60c01b1916600160c01b8a8416021790558554865283862090910180546001600160a01b0319166001600160a01b03881617905584548552828520600301805463ffffffff19164390921691909117905583548452918290528220805460ff19168217905581549081019091555b95945050505050565b6000808211610958576040805162461bcd60e51b81526020600482015260156024820152744e756d6265722063616e6e6f74206265207a65726f60581b604482015290519081900360640190fd5b6000826001141561096d576000915050610533565b5b608083111561098357600192831c920161096e565b600083815260036020526040902054610667906109a383620f4240610ad7565b90610b72565b600090815260046020526040902060020154600160c01b900463ffffffff1690565b6000818152600460205260408120805460018201546003830154610a21929190610a0090439063ffffffff90811690610b3016565b600285015463ffffffff600160c01b8204811691600160a01b900416610bcc565b6001820155610a2f83610c5a565b50600192915050565b6000828152600460205260408120600301548190610a629063ffffffff9081166001011643610caf565b604080516bffffffffffffffffffffffff19606087901b166020808301919091528251808303601401815260348301845280519082012060548301819052934060748084018290528451808503909101815260949093019093528151910120909250610acd8161090a565b9695505050505050565b600082610ae657506000610456565b82820282848281610af357fe5b04146106675760405162461bcd60e51b8152600401808060200182810382526021815260200180610e8b6021913960400191505060405180910390fd5b600061066783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610d09565b600082820183811015610667576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008263ffffffff168463ffffffff1611610c1557610c0e610c04620f4240610bfe8863ffffffff80881690610ad716565b90610da0565b8690600101610b72565b9050610901565b6000610c3e610c34620f4240610bfe8963ffffffff80891690610ad716565b8790600101610b30565b9050868111610c4d5786610c4f565b805b979650505050505050565b60009081526004602052604090206002810180546001600160e01b038116600160e01b9182900463ffffffff9081166001018116909202179091556003909101805463ffffffff191643909216919091179055565b600080610cbc8385610b30565b90506000610ccc82610100610da0565b90506101008206610cfa57610cf1610cea6000198301610100610ad7565b8690610b72565b92505050610456565b610901610cea82610100610ad7565b60008184841115610d985760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d5d578181015183820152602001610d45565b50505050905090810190601f168015610d8a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600061066783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060008183610e2c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610d5d578181015183820152602001610d45565b506000838581610e3857fe5b0495945050505050565b6040518060a00160405280600590602082028036833750919291505056fe46756e6374696f6e2063616e206f6e6c792062652063616c6c656420627920706f732061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743616c6c65722063616e27742068617665207a65726f207374616b656420746f6b656e73a2646970667358221220f7e6968af6241c136c3165364d5b4833208b0fa31bca090cc0712c911fba89bc64736f6c63430007040033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canProduceBlock(uint256,address,uint256)": {
        "params": {
          "_index": "the index of the instance of block selector you want to interact with",
          "_user": "the address that is gonna get checked",
          "_weight": "number that will weight the random number, most likely will be the number of staked tokens"
        }
      },
      "getBlockCount(uint256)": {
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "number of blocks"
        }
      },
      "getDifficulty(uint256)": {
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "difficulty of current selection"
        }
      },
      "getDifficultyAdjustmentParameter(uint256)": {
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "difficulty adjustment parameter"
        }
      },
      "getMinDifficulty(uint256)": {
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "min difficulty of instance"
        }
      },
      "getSelectionBlockDuration(uint256)": {
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "number of etheereum blocks passed since last selection started"
        }
      },
      "getTargetInterval(uint256)": {
        "params": {
          "_index": "the index of the instance of block selector to be interact with"
        },
        "returns": {
          "_0": "target interval"
        }
      },
      "instantiate(uint256,uint256,uint32,uint32,address)": {
        "params": {
          "_difficultyAdjustmentParameter": "how quickly the difficulty gets updated according to the difference between time passed and target interval.",
          "_initialDifficulty": "starting difficulty",
          "_minDifficulty": "lower bound for difficulty parameter",
          "_posManagerAddress": "address of ProofOfStake that will use this instance",
          "_targetInterval": "how often we want produce noether blocks, in ethereum blocks"
        }
      },
      "log2ApproxTimes1M(uint256)": {
        "params": {
          "_num": "number to take log2 * 1M of"
        }
      },
      "produceBlock(uint256,address,uint256)": {
        "params": {
          "_index": "the index of the instance of block selector you want to interact with",
          "_user": "address that has the right to produce block",
          "_weight": "number that will weight the random number, will be the number of staked tokens"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 PUSH32 0xA15BC60C955C405D20D9149C709E2460F1C2D9A497496A7F46004D1772C3054C DUP2 SWAP1 SSTORE PUSH3 0xF4240 PUSH32 0xC3A24B0501BD2C13A7E57F2DB4369EC4C223447539FC0724A9D55AC4A06EBD4D SSTORE PUSH3 0x182F42 PUSH32 0xCBC4E5FB02C3D1DE23A9F1E014B4D2EE5AEAEA9505DF5E855C9210BF472495AF SSTORE PUSH3 0x1E8480 PUSH32 0x83EC6A1F0257B830B5E016457C9CF1435391BF56CC98F369A58A54FE93772465 SSTORE PUSH3 0x236E08 PUSH32 0x405AAD32E1ADBAC89BB7F176E338B8FC6E994CA210C9BB7BDCA249B465942250 SSTORE PUSH3 0x277182 PUSH32 0xC69056F16CBAA3C616B828E333AB7D3A32310765507F8F58359E99EBB7A885F3 SSTORE PUSH3 0x2AD63A PUSH32 0xF2C49132ED1CEE2A7E75BDE50D332A2F81F1D01E5456D8A19D1DF09BD561DBD2 SSTORE PUSH3 0x2DC6C0 PUSH32 0x85AAA47B6DC46495BB8824FAD4583769726FEA36EFD831A35556690B830A8FBE SSTORE PUSH3 0x305E85 PUSH32 0x8A8DC4E5242EA8B1AB1D60606DAE757E6C2CCA9F92A2CCED9F72C19960BCB458 SSTORE PUSH3 0x32B048 PUSH32 0x9DCB9783BA5CD0B54745F65F4F918525E461E91888C334E5342CB380AC558D53 SSTORE PUSH3 0x34C967 PUSH32 0x2D72AF3C1B2B2956E6F694FB741556D5CA9524373974378CDBEC16AFA8B84164 SSTORE PUSH3 0x36B3C2 PUSH32 0xD56A60595EBEFEBED7F22DCEE6C2ACC61B06CF8C68E84C88677840365D1FF92B SSTORE PUSH3 0x3876D7 PUSH32 0xA8F2D96126C6D0AD63ADABAEF7BF5CF47F163FB0C218A473D28F62312D197BCF SSTORE PUSH3 0x3A187A PUSH32 0xD6EBCC64C739277B117CE359E436534B234B76E914C80AD276ABF5B562078939 SSTORE PUSH3 0x3B9D4A PUSH32 0xF60B7F6A315EC68A6AC240E69DCA53652B38627F709A2CAA217D9E18AF4D7A60 SSTORE PUSH3 0x3D0900 PUSH32 0x47D4745E02B343689A5E7AC121D2A352B7A15C10328A8759FD7D4CF0999002BB SSTORE PUSH3 0x3E5EA6 PUSH32 0xFC111D09A6E2F0958402CBE16A5AEF32C9D8DDB9A4DF7271140DE57BFED6525A SSTORE PUSH3 0x3FA0C5 PUSH32 0x6A2B6BFFACA788160F671FA62D34758B717F75A90AD5A468757C50D61F33C443 SSTORE PUSH3 0x40D177 PUSH32 0x8A8166BE5F30ABEB6C91EE2F07EEB0B2EB14B4D59534D10A1C143964BD617919 SSTORE PUSH3 0x41F288 PUSH32 0xFFE031EE7F67944A037276FD51F48FCC2FE05A729C43144606BC8777DA8014F SSTORE PUSH3 0x43057D PUSH32 0x94F2575C7592B1DFD5A8846A17482DA7B0E38FB10C93880D74916C5F16792464 SSTORE PUSH3 0x440BA7 PUSH32 0x370C8C7C6215B209793AA720F65163FBEECD5F5114008532BA0649EE23405402 SSTORE PUSH3 0x450629 PUSH32 0xF0519A40093D7EDAD68F12E2EC868FDF92A03DF1CBEC3E035C987D6B218F2F4 SSTORE PUSH3 0x45F602 PUSH32 0xA3DDC4E8D053BE09EC661EB04964A206CBD921C2C11FC03088857923BED1485A SSTORE PUSH3 0x46DC10 PUSH32 0xAD96411AFED98A37AA585CE71717B0782FA4BEE47DA09D8F483E532128238611 SSTORE PUSH3 0x47B917 PUSH32 0x68FC0E82119A780903C8E97D959A36D433D1E401AD7B7A461FF2087E524D54A8 SSTORE PUSH3 0x488DC7 PUSH32 0x925BE0B447003E4366D6ADDF976A9E5448B14E56CA3733FE4A9CA6F86B0DCBD5 SSTORE PUSH3 0x495ABA PUSH32 0x57023EF7FE58B878582140EA36F22723905AD724896EAF74090FBA76C229BD22 SSTORE PUSH3 0x4A207C PUSH32 0x4BA0D371C59A4C8176901CB7799ECDD8B41B974BE3A1349B5D0A9FF9AAA230D9 SSTORE PUSH3 0x4ADF8A PUSH32 0x6117FEE2F1274E1B392D2C3FE842478040A980D896757F38CBFE2CEEBFA9F55F SSTORE PUSH3 0x4B9854 PUSH32 0xBB7EA1D025E27E153F156855239B4B128E9DA3A64A6F0A0270F8920989588142 SSTORE PUSH3 0x4C4B40 PUSH32 0xE0033292D8349127DD6B6FA9C34F6F3D290151B2785DBCBF18FA2C3985D1F743 SSTORE PUSH3 0x4CF8AA PUSH32 0xB79C508B45D95DB38395ED273CCA5AFA4BCB8F1225EC7E9C849430DB27D6F0FE SSTORE PUSH3 0x4DA0E6 PUSH32 0x9F4E12E393433B9749089D7660B578840AE05C9423CE1AEFCEB0C80C340A21C6 SSTORE PUSH3 0x4E4443 PUSH32 0x4F8C9D329171A3577E6BEB939D329B1F26DA4C7A51F25BBE134C866F0FEEE945 SSTORE PUSH3 0x4EE305 PUSH32 0x10F5232EE9F6343D8BF0B7C9043A31EE616D8F028DCF3D2E9033FF8E0CE0EF0F SSTORE PUSH3 0x4F7D6D PUSH32 0x37E56E4C2B6ED73B31A7A63E641BFEE67245B50921806A650AA65BB58A213BA7 SSTORE PUSH3 0x5013B7 PUSH32 0x6E80044B428A86DDB5F7277680F16AC528219BBC3F477F367A023FD1680FEF05 SSTORE PUSH3 0x50A61A PUSH32 0x10F3A17841C6D818CCBB16E4596978865BB77BA586B583C9DE26B166E55DE864 SSTORE PUSH3 0x5134C8 PUSH32 0xF787D5FF306EE7EA1D7B35B5CACD5A837646921C113945DBC3A3B6329CE40033 SSTORE PUSH3 0x51BFF0 PUSH32 0xA6D60D4FF1C38AE572157A43D1B8579039E4B4CC96E22C75C07379751785FE51 SSTORE PUSH3 0x5247BD PUSH32 0xFBEFD6DF65B5DA21E9F0DC3DA2DF6DC37BE71551086F5ABA2B0AD548C4758150 SSTORE PUSH3 0x52CC58 PUSH32 0x47BD603B2672149DF187087E649A417345C22EBC601AF252344B2472B5A5FEA8 SSTORE PUSH3 0x534DE7 PUSH32 0x181EC19A0F957384E4ECBE9410E516AD0FE8CC3E53CAAC5FFC50EB11E64BF488 SSTORE PUSH3 0x53CC8D PUSH32 0xA4B6F6C87384A4C75064343FFD6646B01B98A7D0701DEC60343872FE39D78894 SSTORE PUSH3 0x544869 PUSH32 0xA7D0F7195D52522BE008CA0E9C182CB8D5CDEC7C4327B16F8F80417732546566 SSTORE PUSH3 0x54C19C PUSH32 0x8A3A0B6F6FA9438554C4AA5BDAF7838F6C90507836AABB33D6EBAEB414E248F9 SSTORE PUSH3 0x553842 PUSH32 0x5F3FFAC152518418B730C1B4427B48DE47A050E582434504C9FFD15088F0D196 SSTORE PUSH3 0x55AC75 PUSH32 0x28EEF39A072497D2105DCB780594E4ED840D3BEB94E2EA31A78A935B50A4AE2E SSTORE PUSH3 0x561E50 PUSH32 0x3BA015D6B845E102CE2F76836007BE82508E3543856F2A3C2FF4B56EB46D920E SSTORE PUSH3 0x568DE9 PUSH32 0x308B08755EC965F49E4D58D22EBBF80DC425791B553F8567A173E85E1ABB76C3 SSTORE PUSH3 0x56FB57 PUSH32 0xDA4C88CB8422456E6DBC87BDC0D70FDF69C0F9F7D6833899744759615D2D4CC5 SSTORE PUSH3 0x5766B0 PUSH32 0x6A4C132BB6958029AC3595112F46988F11D4EBBBEA74E0A2100963F772DF62E2 SSTORE PUSH3 0x57D007 PUSH32 0x1C5556A54FE414BB73B8E027C2FF4BB044A11E7CA4F73A8463FD263D06B76AA6 SSTORE PUSH3 0x58376F PUSH32 0x2BB318060B44525C3D947C00393E6D416E9D457A7E83B67B8DAAB0973739B0FA SSTORE PUSH3 0x589CFA PUSH32 0x22848320AF6C4894685E387CF97D56BA798F5DABCD8F3A2DB70374776F0F2F93 SSTORE PUSH3 0x5900BA PUSH32 0x7328C223B526AC18A2CA34E3CC928D22C174FDE8C81D65AE5D17C01763D134B1 SSTORE PUSH3 0x5962BC PUSH32 0x4E68CDA4A6128FDFEBAAE69AF59E96A318B50754E0DA27477D282F3D224CC4FD SSTORE PUSH3 0x59C313 PUSH32 0x9C0EA5B0AC1441361BD97A1871D83799B2D794CF29A9954DDC2E33262E005D67 SSTORE PUSH3 0x5A21CA PUSH32 0x1C8D1BF01472944F62FA726559C57C955F3535856E865CEE78082252C0DBE65 SSTORE PUSH3 0x5A7EF1 PUSH32 0xA171E6DFF2E291B2403638B36FA1900BFB6D28056B9CC28339ADF04FF3E24B88 SSTORE PUSH3 0x5ADA94 PUSH32 0x7BFA808024A5334B0A1E191D8E95F6724EA40D1A03D1286B6934E670F8C6924B SSTORE PUSH3 0x5B34BF PUSH32 0x163A647BA7EDD41CAABEC3EACE9CE83F1A89EBEA06FC099AA7FB98088DA75131 SSTORE PUSH3 0x5B8D80 PUSH32 0x13E779BC7EC8E84A68157FC5C2CAA579DC0EE0B80D83944C270539B94CAC271F SSTORE PUSH3 0x5BE4DF PUSH32 0xC20BE026AE5EA792BD28B5908D1DFCFD8C2E447D9276607DDF6143E7DDDC0FE8 SSTORE PUSH3 0x5C3AEA PUSH32 0xFC869D08D1790D4602743C5B6E4ADB33C74C1D0D7C8C47359779D859193DCB05 SSTORE PUSH3 0x5C8FA9 PUSH32 0x682542400590CECD25F82CAD25103B4DC125CD3511D319539197C8BB9765A74F SSTORE PUSH3 0x5CE326 PUSH32 0xD5310F85F4460A57771B0BA7C922E1273458411836157E863377C3CEBA09CCC5 SSTORE PUSH3 0x5D356C PUSH32 0x885CE2CBC289E24B266643F1B3BD713351837E3869B2FE1821204BFB89DF8355 SSTORE PUSH3 0x5D8683 PUSH32 0xDD629E5D55690C61D87BB2283F8033A4ED0C9727F0B3CC897E051F7AFDA800A5 SSTORE PUSH3 0x5DD673 PUSH32 0xBF2D989C23A487B38B309E949C76D08BDDDF97E9AE5FC829F5FC1D9822C0DD19 SSTORE PUSH3 0x5E2545 PUSH32 0x8195E934BE8E1E1E67E36670679242F3EB3FE013D19203686902C1DC42DFF3E4 SSTORE PUSH3 0x5E7300 PUSH32 0xEA1C8D9962659D05B79D2A74379C386E592CAF47911721F070F5587A9F030FFA SSTORE PUSH3 0x5EBFAD PUSH32 0x4527180E78E4A6462BF9DEB3D847E2025103F904BAC3CB89E4A58CFFDF5FA004 SSTORE PUSH3 0x5F0B52 PUSH32 0x58C60C4A0BB2D3F34CBABA1A0B564F51356F6627445683DC231BF6B72193AF3C SSTORE PUSH3 0x5F55F7 PUSH32 0xD899C8B99C107EBD126158F0533ED068D266F28A5AFC25749942D7D708638C6D SSTORE PUSH3 0x5F9FA2 PUSH32 0xF2222D92A706D2B36524284936563927B6D77FB3761E96FDBE8143F444BD785B SSTORE PUSH3 0x5FE85A PUSH32 0xD59EB1C08DF610A2D207DB4DB91372B9FA60F3DE2255EC3B0FBFC33AC8593149 SSTORE PUSH3 0x603024 PUSH32 0x35CF9CCC5FB50786824D0EFE505D33216D9658F34614E7C25F0D5BAEB2B0C672 SSTORE PUSH3 0x607708 PUSH32 0xE7DEFE1A9EE2663E7F593684EBE15B56452E1FA833A7EFA12070AD6443B10819 SSTORE PUSH3 0x60BD0A PUSH32 0xCC2E7A263101F3EC4CFF7D64EF5961AE18D1D70E854CB40C5302BF7C043D7B9 SSTORE PUSH3 0x610230 PUSH32 0x21A96D7401B4330BADC55CCA6AFDB5531F4BA2A6923DA027F434C4639F5C1D71 SSTORE PUSH3 0x61467F PUSH32 0xEF8374C201F52E9CADF0358FA9FE81D3B5DC6CFD55611FF392A0F6AF5D359A1B SSTORE PUSH3 0x6189FD PUSH32 0xFD55FC2E9EF63E16E696580FA41A16B1359DE042D9D894F9176FFEC1C194A986 SSTORE PUSH3 0x61CCAE PUSH32 0x2306DD40301E71102649086FA4506190474E93C93807BD630A59F18E25C47965 SSTORE PUSH3 0x620E98 PUSH32 0xC201016FFCFF91372D8B487E0FF78BA4E7738EE54AB48B285B35D26480999112 SSTORE PUSH3 0x624FBF PUSH32 0xA484BDABB1B1F1B9F179449CA8ABB8E46314B53C02F491F47DC3B425CDC5C272 SSTORE PUSH3 0x629027 PUSH32 0xCA1941FFD2876354DCA11A76468FB85895321380BFF6312DCBD61B110F22031E SSTORE PUSH3 0x62CFD5 PUSH32 0x2642CBFA046D8004053CD054E488DF5B74257AE1E497E38D227E7244EF11BF2D SSTORE PUSH3 0x630ECD PUSH32 0x3219ED562B3FD9188A49DD9A57BEC5AECADCB61EA33F29053262442C210D825F SSTORE PUSH3 0x634D12 PUSH32 0x913D404E020F0557F3AEA1DC8FD0190EA3453F59952E2C41E4746BDFCD39C78 SSTORE PUSH3 0x638AA9 PUSH32 0x81DF324FBE7EC2F6D6AFFC089132B5517E4C091511C539ECFB5003BAC7E24648 SSTORE PUSH3 0x63C796 PUSH32 0xD4058D6B6BAC28A1C06101425F18EB1CA62098ACFC503F321647BE92939156D SSTORE PUSH3 0x6403DC PUSH32 0x2023C3BD05B942CF6CBD5CD645DE4D3FEA19926FD4838B16303D2ED627508472 SSTORE PUSH3 0x643F7F PUSH32 0xB9C7405FDB60827A063770D15A9163CF3257EAFB54D63EBC3245E8170763B9AE SSTORE PUSH3 0x647A82 PUSH32 0x6B9240D7ADE1F051AED76811AD8DD613B8DF4C244B38CE53081DE0FEA8FEC673 SSTORE PUSH3 0x64B4E8 PUSH32 0x767E32FD18349F6756B14C9960D71C7FAB8D03BE981E4C9C8D4AA06A28B66047 SSTORE PUSH3 0x64EEB5 PUSH32 0x95505A17747B834552DC9F252B9911E949B8FFDF7A51D678A6BD11AF986B15DE SSTORE PUSH3 0x6527EC PUSH32 0x60193AFC785B329E0409B25280DDAD469386CEA4ADCDAEE645046BA068F899A5 SSTORE PUSH3 0x656090 PUSH32 0x6B16EF514F22B74729CBEA5CC7BABFECBDC2309E530CA716643D11FE929EED2E SSTORE PUSH3 0x6598A3 PUSH32 0x5ED25F7F90EE98FC55A6C59D7B052A857D4BF613AD8F5F7FD8077C1E252C6C1A SSTORE PUSH3 0x65D029 PUSH32 0xEAAACAE94BBFC90C56BC9F09C078E38D09BE79409287043ED56ADC78213C2109 SSTORE PUSH3 0x660724 PUSH32 0xD3F86B308ABD5A5AC58ED63770D3A598E1EF2FEA81B795D05851B62B55F860E1 SSTORE PUSH3 0x663D97 PUSH32 0xC7F3482DB4B48D5B39D680CE04DA2E80D893166F9E18FA49855F2D75C8538DC9 SSTORE PUSH3 0x667385 PUSH32 0x8BD72D705E704E96AB1FA5BAF1AC8053F4EC008DCA8CF0376CA60A5648FA9532 SSTORE PUSH3 0x66A8F0 PUSH32 0x7B2F1DB823434EB2C3257B921622F3B73C33ED78AB6344072B7D0D89829CCE01 SSTORE PUSH3 0x66DDDA PUSH32 0x296CFAC21069339FCD7B6795214EAC09A46F358E68CBA56520EC496C3C1F4AD5 SSTORE PUSH3 0x671247 PUSH32 0xB567F360362DC4A027220042F6EE0433026937822E3FC3BC268EC5F820D029FA SSTORE PUSH3 0x674638 PUSH32 0xBCA97D98B7DA2037DE81C9A55B229109649FD288E0C478A01CD149C3609AE90B SSTORE PUSH3 0x6779AF PUSH32 0xDE2B21138735878E0660EEF23D1131FAD23D66157BFA1C473A82B60C5169926 SSTORE PUSH3 0x67ACAF PUSH31 0x4EF3F825C8849C73999F6E84FCB0332C1597FA3AFBD85F7F1F35C7AC696BC2 SSTORE PUSH3 0x67DF3A PUSH32 0x9FF053D1D05D615E9DA14E487EA593A41D5F35A8CC975B547DEC50B34F0A1FC3 SSTORE PUSH3 0x681152 PUSH32 0xBB4AC5D7B238E09F0346251F5F12E6FE98711019A88910E6A64F47BF73E6C3C2 SSTORE PUSH3 0x6842FA PUSH32 0x934D131D2CDE113C982D8C5AA4CD3A36418695634BDE518AA36CCC61A54277A4 SSTORE PUSH3 0x687432 PUSH32 0x171401A72E6158E4CCFAC50451AB80B54A8A49FB38DDBE4A9FA1DC4621DB11DF SSTORE PUSH3 0x68A4FC PUSH32 0x158CF96E390593EC3D9DB70F55562909EF65F4603E50B9BF4A3DF75EE2795F30 SSTORE PUSH3 0x68D55C PUSH32 0x8A6B747E4193754F5887D456542FEEEE62A909F5CC32E46553FC5E84632FFAAF SSTORE PUSH3 0x690553 PUSH32 0xBABA906220955B09FEC23B575E20AFA7D08161B8520BB9D5EC850371B93EDF98 SSTORE PUSH3 0x6934E1 PUSH32 0xB5A42588D5297C2C9A9751BA5AE38977AF4907B8F80318E93DACA5C46498C2F2 SSTORE PUSH3 0x69640A PUSH32 0xE372C44748F4C2908AE7C0A1DC553464478B0394F70953FAECD55173B039317C SSTORE PUSH3 0x6992CF PUSH32 0xB8FFC108B5770692DC6F82CD58A35D7F10F432156BBE6B494657D1D60F3C1122 SSTORE PUSH3 0x69C131 PUSH32 0xC91243F75E216CF1D80D738F653C23ABF15A7E3590B83C6E4772E2DDCFFE533 SSTORE PUSH3 0x69EF32 PUSH32 0xC6C1F2EEB875766781B69C94CB973AC6E9B00BB16318D283DF0AF503DB0F700D SSTORE PUSH3 0x6A1CD4 PUSH32 0xEED16813D2F65D55DFCD646492EBE0107B86489AA89E1EE58B4C544F69FEC4AE SSTORE PUSH3 0x6A4A18 PUSH32 0xC0731EFBB8E22F33F65C29AAB21810B779AC375FA7BC4012AA97121E576839E0 SSTORE PUSH3 0x6A76FF PUSH32 0x4F927CAEB3971F91FA48DF6C469DF5F4F4DEDC93D1908F816F25A660193DC171 SSTORE PUSH3 0x6AA38C PUSH32 0xBB77812A8FA7FA6A572953FEA9126358F3AEC9CDE938B0C1788D783C38FFD2CB SSTORE PUSH1 0x80 SWAP1 MSTORE PUSH3 0x6ACFC0 PUSH32 0x3429D6FA9DB26E5631128D8185584D24F10323AF033BE7FF252EC8822B07BAE1 SSTORE PUSH2 0xF05 DUP1 PUSH2 0x132C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x83F6F5CA GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD0AEADE7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD0AEADE7 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0xDA1C7140 EQ PUSH2 0x3D0 JUMPI DUP1 PUSH4 0xE3581B68 EQ PUSH2 0x419 JUMPI DUP1 PUSH4 0xF9070044 EQ PUSH2 0x436 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x83F6F5CA EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x983EF725 EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0xC526656C EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0xC67DDC38 EQ PUSH2 0x396 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x5378014F GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x5378014F EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x59DC826C EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x73DF1612 EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0x82AFD23B EQ PUSH2 0x27A JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x1FF62AB EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x26987B60 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x3D46B819 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0x4E58FDCA EQ PUSH2 0x17C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x11B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x453 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x14D PUSH2 0x45C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x462 JUMP JUMPDEST PUSH2 0x199 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x538 JUMP JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x66E JUMP JUMPDEST PUSH2 0x242 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xA0 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x267 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x24F JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x771 JUMP JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x783 JUMP JUMPDEST PUSH2 0x2FD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x798 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x341 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x329 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP4 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x380 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x368 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x7E5 JUMP JUMPDEST PUSH2 0x199 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x80D JUMP JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x82F JUMP JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x90A JUMP JUMPDEST PUSH2 0x199 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x9A9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x0 SLOAD GT PUSH2 0x4B4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x125B99195E081B9BDD081A5B9CDD185B9D1A585D1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x4BD DUP2 PUSH2 0x75C JUMP JUMPDEST PUSH2 0x4FF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x496E64657820696E616374697665 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 PUSH2 0x582 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xEAC PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xE61 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5D8 DUP6 DUP6 DUP6 PUSH2 0x66E JUMP JUMPDEST ISZERO PUSH2 0x661 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x14AA79EE14FCD694C30B9C3F6D41247D2E0C87BFEFEC35A6864D124E80864672 DUP4 PUSH1 0x2 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0x627 DUP10 PUSH2 0x7E5 JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG3 PUSH2 0x659 DUP6 PUSH2 0x9CB JUMP JUMPDEST SWAP2 POP POP PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 ADD AND NUMBER GT PUSH2 0x69D JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A8 DUP7 PUSH2 0x7E5 JUMP JUMPDEST SWAP1 POP PUSH2 0x6C8 PUSH2 0x6B7 DUP8 DUP8 PUSH2 0xA38 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD SWAP1 PUSH4 0xF424000 SUB PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x6D2 DUP6 DUP4 PUSH2 0xAD7 JUMP JUMPDEST GT SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6E5 PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6FB PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 NUMBER DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x1 ADD PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x742 DUP8 PUSH2 0x7E5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x751 DUP8 DUP8 PUSH2 0xA38 JUMP JUMPDEST SWAP1 MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP1 DUP1 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7C8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH2 0x667 SWAP1 NUMBER SWAP1 PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP1 PUSH2 0xB30 AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 SWAP1 SSTORE DUP3 SLOAD DUP4 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP9 SWAP1 SSTORE DUP4 SLOAD DUP5 MSTORE DUP2 DUP5 KECCAK256 PUSH1 0x2 SWAP1 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH4 0xFFFFFFFF DUP12 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP6 SLOAD DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP3 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0xC0 SHL NOT AND PUSH1 0x1 PUSH1 0xC0 SHL DUP11 DUP5 AND MUL OR SWAP1 SSTORE DUP6 SLOAD DUP7 MSTORE DUP4 DUP7 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND OR SWAP1 SSTORE DUP5 SLOAD DUP6 MSTORE DUP3 DUP6 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF NOT AND NUMBER SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP4 SLOAD DUP5 MSTORE SWAP2 DUP3 SWAP1 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 OR SWAP1 SSTORE DUP2 SLOAD SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x958 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4E756D6265722063616E6E6F74206265207A65726F PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 EQ ISZERO PUSH2 0x96D JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x533 JUMP JUMPDEST JUMPDEST PUSH1 0x80 DUP4 GT ISZERO PUSH2 0x983 JUMPI PUSH1 0x1 SWAP3 DUP4 SHR SWAP3 ADD PUSH2 0x96E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x667 SWAP1 PUSH2 0x9A3 DUP4 PUSH3 0xF4240 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 PUSH2 0xB72 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0xA21 SWAP3 SWAP2 SWAP1 PUSH2 0xA00 SWAP1 NUMBER SWAP1 PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP1 PUSH2 0xB30 AND JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SLOAD PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xC0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV AND PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SSTORE PUSH2 0xA2F DUP4 PUSH2 0xC5A JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 SWAP1 PUSH2 0xA62 SWAP1 PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 ADD AND NUMBER PUSH2 0xCAF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP8 SWAP1 SHL AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB PUSH1 0x14 ADD DUP2 MSTORE PUSH1 0x34 DUP4 ADD DUP5 MSTORE DUP1 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH1 0x54 DUP4 ADD DUP2 SWAP1 MSTORE SWAP4 BLOCKHASH PUSH1 0x74 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE DUP5 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x94 SWAP1 SWAP4 ADD SWAP1 SWAP4 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 SWAP3 POP PUSH2 0xACD DUP2 PUSH2 0x90A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xAE6 JUMPI POP PUSH1 0x0 PUSH2 0x456 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xAF3 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xE8B PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x667 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0xD09 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x667 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH2 0xC15 JUMPI PUSH2 0xC0E PUSH2 0xC04 PUSH3 0xF4240 PUSH2 0xBFE DUP9 PUSH4 0xFFFFFFFF DUP1 DUP9 AND SWAP1 PUSH2 0xAD7 AND JUMP JUMPDEST SWAP1 PUSH2 0xDA0 JUMP JUMPDEST DUP7 SWAP1 PUSH1 0x1 ADD PUSH2 0xB72 JUMP JUMPDEST SWAP1 POP PUSH2 0x901 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC3E PUSH2 0xC34 PUSH3 0xF4240 PUSH2 0xBFE DUP10 PUSH4 0xFFFFFFFF DUP1 DUP10 AND SWAP1 PUSH2 0xAD7 AND JUMP JUMPDEST DUP8 SWAP1 PUSH1 0x1 ADD PUSH2 0xB30 JUMP JUMPDEST SWAP1 POP DUP7 DUP2 GT PUSH2 0xC4D JUMPI DUP7 PUSH2 0xC4F JUMP JUMPDEST DUP1 JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND PUSH1 0x1 PUSH1 0xE0 SHL SWAP2 DUP3 SWAP1 DIV PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 ADD DUP2 AND SWAP1 SWAP3 MUL OR SWAP1 SWAP2 SSTORE PUSH1 0x3 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF NOT AND NUMBER SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCBC DUP4 DUP6 PUSH2 0xB30 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCCC DUP3 PUSH2 0x100 PUSH2 0xDA0 JUMP JUMPDEST SWAP1 POP PUSH2 0x100 DUP3 MOD PUSH2 0xCFA JUMPI PUSH2 0xCF1 PUSH2 0xCEA PUSH1 0x0 NOT DUP4 ADD PUSH2 0x100 PUSH2 0xAD7 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0xB72 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x456 JUMP JUMPDEST PUSH2 0x901 PUSH2 0xCEA DUP3 PUSH2 0x100 PUSH2 0xAD7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0xD98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD5D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD45 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xD8A JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x667 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x0 DUP2 DUP4 PUSH2 0xE2C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP4 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 SWAP3 DUP4 SWAP3 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0xD5D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD45 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0xE38 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP INVALID CHAINID PUSH22 0x6E6374696F6E2063616E206F6E6C792062652063616C PUSH13 0x656420627920706F7320616464 PUSH19 0x657373536166654D6174683A206D756C746970 PUSH13 0x69636174696F6E206F76657266 PUSH13 0x6F7743616C6C65722063616E27 PUSH21 0x2068617665207A65726F207374616B656420746F6B PUSH6 0x6E73A2646970 PUSH7 0x7358221220F7E6 SWAP7 DUP11 0xF6 0x24 SHR SGT PUSH13 0x3165364D5B4833208B0FA31BCA MULMOD 0xC 0xC0 PUSH18 0x2C911FBA89BC64736F6C6343000704003300 ",
      "sourceMap": "876:11003:9:-:0;;;759:1:3;729:31;;876:11003:9;;;;;;;;;-1:-1:-1;888:16:0;:19;;910:1;888:19;:23;;;943:7;921:19;:29;982:7;960:19;:29;1021:7;999:19;:29;1060:7;1038:19;:29;1099:7;1077:19;:29;1138:7;1116:19;:29;1177:7;1155:19;:29;1216:7;1194:19;:29;1256:7;1233:20;:30;1296:7;1273:20;:30;1336:7;1313:20;:30;1376:7;1353:20;:30;1416:7;1393:20;:30;1456:7;1433:20;:30;1496:7;1473:20;:30;1536:7;1513:20;:30;1576:7;1553:20;:30;1616:7;1593:20;:30;1656:7;1633:20;:30;1696:7;1673:20;:30;1736:7;1713:20;:30;1776:7;1753:20;:30;1816:7;1793:20;:30;1856:7;1833:20;:30;1896:7;1873:20;:30;1936:7;1913:20;:30;1976:7;1953:20;:30;2016:7;1993:20;:30;2056:7;2033:20;:30;2096:7;2073:20;:30;2136:7;2113:20;:30;2176:7;2153:20;:30;2216:7;2193:20;:30;2256:7;2233:20;:30;2296:7;2273:20;:30;2336:7;2313:20;:30;2376:7;2353:20;:30;2416:7;2393:20;:30;2456:7;2433:20;:30;2496:7;2473:20;:30;2536:7;2513:20;:30;2576:7;2553:20;:30;2616:7;2593:20;:30;2656:7;2633:20;:30;2696:7;2673:20;:30;2736:7;2713:20;:30;2776:7;2753:20;:30;2816:7;2793:20;:30;2856:7;2833:20;:30;2896:7;2873:20;:30;2936:7;2913:20;:30;2976:7;2953:20;:30;3016:7;2993:20;:30;3056:7;3033:20;:30;3096:7;3073:20;:30;3136:7;3113:20;:30;3176:7;3153:20;:30;3216:7;3193:20;:30;3256:7;3233:20;:30;3296:7;3273:20;:30;3336:7;3313:20;:30;3376:7;3353:20;:30;3416:7;3393:20;:30;3456:7;3433:20;:30;3496:7;3473:20;:30;3536:7;3513:20;:30;3576:7;3553:20;:30;3616:7;3593:20;:30;3656:7;3633:20;:30;3696:7;3673:20;:30;3736:7;3713:20;:30;3776:7;3753:20;:30;3816:7;3793:20;:30;3856:7;3833:20;:30;3896:7;3873:20;:30;3936:7;3913:20;:30;3976:7;3953:20;:30;4016:7;3993:20;:30;4056:7;4033:20;:30;4096:7;4073:20;:30;4136:7;4113:20;:30;4176:7;4153:20;:30;4216:7;4193:20;:30;4256:7;4233:20;:30;4296:7;4273:20;:30;4336:7;4313:20;:30;4376:7;4353:20;:30;4416:7;4393:20;:30;4456:7;4433:20;:30;4496:7;4473:20;:30;4536:7;4513:20;:30;4576:7;4553:20;:30;4616:7;4593:20;:30;4656:7;4633:20;:30;4696:7;4673:20;:30;4736:7;4713:20;:30;4776:7;4753:20;:30;4816:7;4793:20;:30;4857:7;4833:21;:31;4898:7;4874:21;:31;4939:7;4915:21;:31;4980:7;4956:21;:31;5021:7;4997:21;:31;5062:7;5038:21;:31;5103:7;5079:21;:31;5144:7;5120:21;:31;5185:7;5161:21;:31;5226:7;5202:21;:31;5267:7;5243:21;:31;5308:7;5284:21;:31;5349:7;5325:21;:31;5390:7;5366:21;:31;5431:7;5407:21;:31;5472:7;5448:21;:31;5513:7;5489:21;:31;5554:7;5530:21;:31;5595:7;5571:21;:31;5636:7;5612:21;:31;5677:7;5653:21;:31;5718:7;5694:21;:31;5759:7;5735:21;:31;5800:7;5776:21;:31;5841:7;5817:21;:31;5882:7;5858:21;:31;5923:7;5899:21;:31;5964:7;5940:21;:31;5998:3;5981:21;;6005:7;5981:21;:31;876:11003:9;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x83F6F5CA GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD0AEADE7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD0AEADE7 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0xDA1C7140 EQ PUSH2 0x3D0 JUMPI DUP1 PUSH4 0xE3581B68 EQ PUSH2 0x419 JUMPI DUP1 PUSH4 0xF9070044 EQ PUSH2 0x436 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x83F6F5CA EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x983EF725 EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0xC526656C EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0xC67DDC38 EQ PUSH2 0x396 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x5378014F GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x5378014F EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x59DC826C EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x73DF1612 EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0x82AFD23B EQ PUSH2 0x27A JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x1FF62AB EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x26987B60 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x3D46B819 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0x4E58FDCA EQ PUSH2 0x17C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x11B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x453 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x14D PUSH2 0x45C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x462 JUMP JUMPDEST PUSH2 0x199 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x538 JUMP JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x66E JUMP JUMPDEST PUSH2 0x242 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xA0 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x267 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x24F JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x75C JUMP JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x771 JUMP JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x783 JUMP JUMPDEST PUSH2 0x2FD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x798 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x341 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x329 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP4 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x380 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x368 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x7E5 JUMP JUMPDEST PUSH2 0x199 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x80D JUMP JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x82F JUMP JUMPDEST PUSH2 0x14D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x90A JUMP JUMPDEST PUSH2 0x199 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x44C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x9A9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x0 SLOAD GT PUSH2 0x4B4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x125B99195E081B9BDD081A5B9CDD185B9D1A585D1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x4BD DUP2 PUSH2 0x75C JUMP JUMPDEST PUSH2 0x4FF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x496E64657820696E616374697665 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 PUSH2 0x582 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xEAC PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xE61 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5D8 DUP6 DUP6 DUP6 PUSH2 0x66E JUMP JUMPDEST ISZERO PUSH2 0x661 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x14AA79EE14FCD694C30B9C3F6D41247D2E0C87BFEFEC35A6864D124E80864672 DUP4 PUSH1 0x2 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH2 0x627 DUP10 PUSH2 0x7E5 JUMP JUMPDEST PUSH1 0x1 DUP7 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG3 PUSH2 0x659 DUP6 PUSH2 0x9CB JUMP JUMPDEST SWAP2 POP POP PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 ADD AND NUMBER GT PUSH2 0x69D JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x667 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A8 DUP7 PUSH2 0x7E5 JUMP JUMPDEST SWAP1 POP PUSH2 0x6C8 PUSH2 0x6B7 DUP8 DUP8 PUSH2 0xA38 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD SWAP1 PUSH4 0xF424000 SUB PUSH2 0xAD7 JUMP JUMPDEST PUSH2 0x6D2 DUP6 DUP4 PUSH2 0xAD7 JUMP JUMPDEST GT SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6E5 PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6FB PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 NUMBER DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x1 ADD PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x742 DUP8 PUSH2 0x7E5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x751 DUP8 DUP8 PUSH2 0xA38 JUMP JUMPDEST SWAP1 MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP1 DUP1 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7C8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH2 0x667 SWAP1 NUMBER SWAP1 PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP1 PUSH2 0xB30 AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 SWAP1 SSTORE DUP3 SLOAD DUP4 MSTORE DUP1 DUP4 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP9 SWAP1 SSTORE DUP4 SLOAD DUP5 MSTORE DUP2 DUP5 KECCAK256 PUSH1 0x2 SWAP1 DUP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH4 0xFFFFFFFF DUP12 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP6 SLOAD DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP3 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0xC0 SHL NOT AND PUSH1 0x1 PUSH1 0xC0 SHL DUP11 DUP5 AND MUL OR SWAP1 SSTORE DUP6 SLOAD DUP7 MSTORE DUP4 DUP7 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND OR SWAP1 SSTORE DUP5 SLOAD DUP6 MSTORE DUP3 DUP6 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF NOT AND NUMBER SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP4 SLOAD DUP5 MSTORE SWAP2 DUP3 SWAP1 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 OR SWAP1 SSTORE DUP2 SLOAD SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x958 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4E756D6265722063616E6E6F74206265207A65726F PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 EQ ISZERO PUSH2 0x96D JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x533 JUMP JUMPDEST JUMPDEST PUSH1 0x80 DUP4 GT ISZERO PUSH2 0x983 JUMPI PUSH1 0x1 SWAP3 DUP4 SHR SWAP3 ADD PUSH2 0x96E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x667 SWAP1 PUSH2 0x9A3 DUP4 PUSH3 0xF4240 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 PUSH2 0xB72 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0xA21 SWAP3 SWAP2 SWAP1 PUSH2 0xA00 SWAP1 NUMBER SWAP1 PUSH4 0xFFFFFFFF SWAP1 DUP2 AND SWAP1 PUSH2 0xB30 AND JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SLOAD PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xC0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV AND PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SSTORE PUSH2 0xA2F DUP4 PUSH2 0xC5A JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 SWAP1 PUSH2 0xA62 SWAP1 PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 ADD AND NUMBER PUSH2 0xCAF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP8 SWAP1 SHL AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB PUSH1 0x14 ADD DUP2 MSTORE PUSH1 0x34 DUP4 ADD DUP5 MSTORE DUP1 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH1 0x54 DUP4 ADD DUP2 SWAP1 MSTORE SWAP4 BLOCKHASH PUSH1 0x74 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE DUP5 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x94 SWAP1 SWAP4 ADD SWAP1 SWAP4 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 SWAP3 POP PUSH2 0xACD DUP2 PUSH2 0x90A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xAE6 JUMPI POP PUSH1 0x0 PUSH2 0x456 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xAF3 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xE8B PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x667 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0xD09 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x667 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH2 0xC15 JUMPI PUSH2 0xC0E PUSH2 0xC04 PUSH3 0xF4240 PUSH2 0xBFE DUP9 PUSH4 0xFFFFFFFF DUP1 DUP9 AND SWAP1 PUSH2 0xAD7 AND JUMP JUMPDEST SWAP1 PUSH2 0xDA0 JUMP JUMPDEST DUP7 SWAP1 PUSH1 0x1 ADD PUSH2 0xB72 JUMP JUMPDEST SWAP1 POP PUSH2 0x901 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC3E PUSH2 0xC34 PUSH3 0xF4240 PUSH2 0xBFE DUP10 PUSH4 0xFFFFFFFF DUP1 DUP10 AND SWAP1 PUSH2 0xAD7 AND JUMP JUMPDEST DUP8 SWAP1 PUSH1 0x1 ADD PUSH2 0xB30 JUMP JUMPDEST SWAP1 POP DUP7 DUP2 GT PUSH2 0xC4D JUMPI DUP7 PUSH2 0xC4F JUMP JUMPDEST DUP1 JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND PUSH1 0x1 PUSH1 0xE0 SHL SWAP2 DUP3 SWAP1 DIV PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 ADD DUP2 AND SWAP1 SWAP3 MUL OR SWAP1 SWAP2 SSTORE PUSH1 0x3 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH4 0xFFFFFFFF NOT AND NUMBER SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCBC DUP4 DUP6 PUSH2 0xB30 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCCC DUP3 PUSH2 0x100 PUSH2 0xDA0 JUMP JUMPDEST SWAP1 POP PUSH2 0x100 DUP3 MOD PUSH2 0xCFA JUMPI PUSH2 0xCF1 PUSH2 0xCEA PUSH1 0x0 NOT DUP4 ADD PUSH2 0x100 PUSH2 0xAD7 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0xB72 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x456 JUMP JUMPDEST PUSH2 0x901 PUSH2 0xCEA DUP3 PUSH2 0x100 PUSH2 0xAD7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0xD98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD5D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD45 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xD8A JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x667 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x0 DUP2 DUP4 PUSH2 0xE2C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP4 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 SWAP3 DUP4 SWAP3 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0xD5D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xD45 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0xE38 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP INVALID CHAINID PUSH22 0x6E6374696F6E2063616E206F6E6C792062652063616C PUSH13 0x656420627920706F7320616464 PUSH19 0x657373536166654D6174683A206D756C746970 PUSH13 0x69636174696F6E206F76657266 PUSH13 0x6F7743616C6C65722063616E27 PUSH21 0x2068617665207A65726F207374616B656420746F6B PUSH6 0x6E73A2646970 PUSH7 0x7358221220F7E6 SWAP7 DUP11 0xF6 0x24 SHR SGT PUSH13 0x3165364D5B4833208B0FA31BCA MULMOD 0xC 0xC0 PUSH18 0x2C911FBA89BC64736F6C6343000704003300 ",
      "sourceMap": "876:11003:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11416:154;;;;;;;;;;;;;;;;-1:-1:-1;11416:154:9;;;;;;-1:-1:-1;;;;;11416:154:9;;:::i;:::-;;;;;;;;;;;;;;;;;;729:31:3;;;:::i;:::-;;;;;;;;;;;;;;;;1405:186;;;;;;;;;;;;;;;;-1:-1:-1;1405:186:3;;:::i;9993:187:9:-;;;;;;;;;;;;;;;;-1:-1:-1;9993:187:9;;:::i;:::-;;;;;;;;;;;;;;;;;;;4685:668;;;;;;;;;;;;;;;;-1:-1:-1;4685:668:9;;;-1:-1:-1;;;;;4685:668:9;;;;;;;;;;:::i;5685:615::-;;;;;;;;;;;;;;;;-1:-1:-1;5685:615:9;;;-1:-1:-1;;;;;5685:615:9;;;;;;;;;;:::i;10940:470::-;;;;;;;;;;;;;;;;-1:-1:-1;10940:470:9;;;;;;-1:-1:-1;;;;;10940:470:9;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1289:110:3;;;;;;;;;;;;;;;;-1:-1:-1;1289:110:3;;:::i;9671:126:9:-;;;;;;;;;;;;;;;;-1:-1:-1;9671:126:9;;:::i;9377:120::-;;;;;;;;;;;;;;;;-1:-1:-1;9377:120:9;;:::i;11576:301::-;;;;;;;;;;;;;;;;-1:-1:-1;11576:301:9;;;;;;-1:-1:-1;;;;;11576:301:9;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10720:214;;;;;;;;;;;;;;;;-1:-1:-1;10720:214:9;;:::i;9075:119::-;;;;;;;;;;;;;;;;-1:-1:-1;9075:119:9;;:::i;2726:803::-;;;;;;;;;;;;;;;;-1:-1:-1;2726:803:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2726:803:9;;:::i;6112:362:0:-;;;;;;;;;;;;;;;;-1:-1:-1;6112:362:0;;:::i;10344:127:9:-;;;;;;;;;;;;;;;;-1:-1:-1;10344:127:9;;:::i;11416:154::-;11485:4;11416:154;;;;;:::o;729:31:3:-;;;;:::o;1405:186::-;1528:20;1503:6;1081;1066:12;;:21;1058:56;;;;;-1:-1:-1;;;1058:56:3;;;;;;;;;;;;-1:-1:-1;;;1058:56:3;;;;;;;;;;;;;;;1132:16;1141:6;1132:8;:16::i;:::-;1124:43;;;;;-1:-1:-1;;;1124:43:3;;;;;;;;;;;;-1:-1:-1;;;1124:43:3;;;;;;;;;;;;;;;-1:-1:-1;;1571:13:3::1;::::0;;;:5:::1;:13;::::0;;;;;;1405:186::o;9993:187:9:-;10098:6;10127:16;;;:8;:16;;;;;:46;;;-1:-1:-1;;;10127:46:9;;;;9993:187;;;;:::o;4685:668::-;4771:4;4818:16;;;:8;:16;;;;;4853:11;4845:60;;;;-1:-1:-1;;;4845:60:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4937:21;;;;-1:-1:-1;;;;;4937:21:9;4923:10;:35;4915:90;;;;-1:-1:-1;;;4915:90:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5020:39;5036:6;5044:5;5051:7;5020:15;:39::i;:::-;5016:308;;;5135:5;-1:-1:-1;;;;;5080:189:9;5111:6;5080:189;5158:3;:14;;;;;;;;;;;;5190:33;5216:6;5190:25;:33::i;:::-;5241:14;;;;5080:189;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5291:22;5306:6;5291:14;:22::i;:::-;5284:29;;;;;5016:308;5341:5;5334:12;;;4685:668;;;;;;:::o;5685:615::-;5779:4;5826:16;;;:8;:16;;;;;6008:22;;;;;;;;;:26;5992:42;:12;:42;5988:85;;6057:5;6050:12;;;;;5988:85;6083:21;6107:33;6133:6;6107:25;:33::i;:::-;6083:57;;6203:80;6252:29;6267:6;6275:5;6252:14;:29::i;:::-;6203:14;;;;;1076:9;6223:58;6203:18;:80::i;:::-;6173:26;:7;6185:13;6173:11;:26::i;:::-;6172:111;;5685:615;-1:-1:-1;;;;;;5685:615:9:o;10940:470::-;11014:29;;:::i;:::-;11055:26;11084:16;;;:8;:16;;;;;11111:28;;:::i;:::-;:264;;;;;;;;11156:12;11111:264;;;;11182:1;:20;;;;;;;;;;;;11205:1;11182:24;11111:264;;;;;;11246:1;:12;;;11111:264;;;;11272:33;11298:6;11272:25;:33::i;:::-;11111:264;;;;11336:29;11351:6;11359:5;11336:14;:29::i;:::-;11111:264;;;10940:470;-1:-1:-1;;;;;10940:470:9:o;1289:110:3:-;1353:4;1377:14;;;:6;:14;;;;;;;;;1289:110::o;9671:126:9:-;9734:7;9760:16;;;:8;:16;;;;;:30;;9671:126::o;9377:120::-;9437:7;9463:16;;;:8;:16;;;;;:27;;;;9377:120::o;11576:301::-;11657:27;;;;11814:1;11800:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11800:16:9;-1:-1:-1;11830:16:9;;;11844:1;11830:16;;;;;;;;11796:20;;11830:16;;-1:-1:-1;11865:1:9;-1:-1:-1;;;;;11576:301:9:o;10720:214::-;10792:7;10842:16;;;:8;:16;;;;;10903:22;;;;10876:51;;10877:12;;10903:22;;;;;10876:18;:51;:::i;9075:119::-;9135:6;9160:16;;;:8;:16;;;;;:27;;;-1:-1:-1;;;9160:27:9;;;;;9075:119::o;2726:803::-;2952:7;2984:12;;2975:22;;:8;:22;;;;;;;;:53;;;3047:12;;3038:22;;;;;:33;;;;:54;;;3111:12;;3102:22;;;;;:52;;;;:85;;-1:-1:-1;;;;3102:85:9;-1:-1:-1;;;3102:85:9;;;;;;;;;;;;;;;3206:12;;3197:22;;;;;:37;;:55;;-1:-1:-1;;;;3197:55:9;-1:-1:-1;;;3197:55:9;;;;;;;3271:12;;3262:22;;;;;:40;;;:61;;-1:-1:-1;;;;;;3262:61:9;-1:-1:-1;;;;;3262:61:9;;;;;3343:12;;3334:22;;;;;:41;;:64;;-1:-1:-1;;3334:64:9;3385:12;3334:64;;;;;;;;;3471:12;;3464:20;;;;;;;;:27;;-1:-1:-1;;3464:27:9;;;;;3508:14;;;;;;;;2726:803;;;;;;;;:::o;6112:362:0:-;6174:7;6209:1;6202:4;:8;6193:43;;;;;-1:-1:-1;;;6193:43:0;;;;;;;;;;;;-1:-1:-1;;;6193:43:0;;;;;;;;;;;;;;;6246:15;6280:4;6288:1;6280:9;6276:23;;;6298:1;6291:8;;;;;6276:23;6310:83;6324:3;6317:4;:10;6310:83;;;6357:1;6349:9;;;;6371:12;6310:83;;;6444:22;;;;:16;:22;;;;;;6408:59;;6409:29;:7;6429;6409:11;:29::i;:::-;6408:35;;:59::i;10344:127:9:-;10408:6;10433:16;;;:8;:16;;;;;:31;;;-1:-1:-1;;;10433:31:9;;;;;10344:127::o;6469:467::-;6526:4;6573:16;;;:8;:16;;;;;6676:17;;6707:14;;;;6769:22;;;;6646:237;;6676:17;6707:14;6742:51;;6743:12;;6769:22;;;;;6742:18;:51;:::i;:::-;6808:18;;;;;-1:-1:-1;;;6808:18:9;;;;;-1:-1:-1;;;6840:33:9;;;6646:16;:237::i;:::-;6629:14;;;:254;6894:14;6901:6;6894;:14::i;:::-;-1:-1:-1;6925:4:9;;6469:467;-1:-1:-1;;6469:467:9:o;3851:536::-;3929:7;4097:16;;;:8;:16;;;;;:35;;;3929:7;;4081:71;;4097:35;;;;;:39;4089:48;4139:12;4081:7;:71::i;:::-;4206:23;;;-1:-1:-1;;4206:23:9;;;;;;;;;;;;;;;;;;;;;;;;;;;4196:34;;;;;;4277:44;;;;;;4058:104;;4277:44;;;;;;;;;;;;;;;;;;;;;;;;4267:55;;;;;4058:104;;-1:-1:-1;4341:39:9;4267:55;4341:29;:39::i;:::-;4334:46;3851:536;-1:-1:-1;;;;;;3851:536:9:o;2180:459:7:-;2238:7;2479:6;2475:45;;-1:-1:-1;2508:1:7;2501:8;;2475:45;2542:5;;;2546:1;2542;:5;:1;2565:5;;;;;:10;2557:56;;;;-1:-1:-1;;;2557:56:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1321:134;1379:7;1405:43;1409:1;1412;1405:43;;;;;;;;;;;;;;;;;:3;:43::i;874:176::-;932:7;963:5;;;986:6;;;;978:46;;;;;-1:-1:-1;;;978:46:7;;;;;;;;;;;;;;;;;;;;;;;;;;;8214:691:9;8428:7;8626:15;8609:32;;:13;:32;;;8605:139;;8664:69;8677:51;1134:7;8677:30;:8;:30;;;;;:12;:30;:::i;:::-;:34;;:51::i;:::-;8664:8;;8731:1;8677:55;8664:12;:69::i;:::-;8657:76;;;;8605:139;8754:15;8772:69;8785:51;1134:7;8785:30;:8;:30;;;;;:12;:30;:::i;:51::-;8772:8;;8839:1;8785:55;8772:12;:69::i;:::-;8754:87;;8869:8;8859:7;:18;:39;;8890:8;8859:39;;;8880:7;8859:39;8852:46;8214:691;-1:-1:-1;;;;;;;8214:691:9:o;7104:186::-;7154:28;7185:16;;;:8;:16;;;;;7212:14;;;:16;;-1:-1:-1;;;;;7212:16:9;;-1:-1:-1;;;7212:16:9;;;;;;;;;;;;;;;;;;;7238:22;;;;:45;;-1:-1:-1;;7238:45:9;7270:12;7238:45;;;;;;;;;7104:186::o;7296:491::-;7418:7;;7456:34;:13;7474:15;7456:17;:34::i;:::-;7441:49;-1:-1:-1;7500:11:9;7514:15;7441:49;1007:3;7514:8;:15::i;:::-;7500:29;-1:-1:-1;1007:3:9;7636:4;:12;7632:96;;7676:41;7696:20;-1:-1:-1;;7697:7:9;;1007:3;7696:13;:20::i;:::-;7676:15;;:19;:41::i;:::-;7669:48;;;;;;7632:96;7745:35;7765:14;:3;1007;7765:7;:14::i;1746:187:7:-;1832:7;1867:12;1859:6;;;;1851:29;;;;-1:-1:-1;;;1851:29:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1902:5:7;;;1746:187::o;3101:130::-;3159:7;3185:39;3189:1;3192;3185:39;;;;;;;;;;;;;;;;;3799:7;3833:12;3826:5;3818:28;;;;-1:-1:-1;;;3818:28:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3856:9;3872:1;3868;:5;;;;;;;3713:272;-1:-1:-1;;;;;3713:272:7:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "769000",
        "executionCost": "2551603",
        "totalCost": "3320603"
      },
      "external": {
        "canProduceBlock(uint256,address,uint256)": "infinite",
        "currentIndex()": "1044",
        "getBlockCount(uint256)": "1166",
        "getDifficulty(uint256)": "1157",
        "getDifficultyAdjustmentParameter(uint256)": "1240",
        "getMinDifficulty(uint256)": "1129",
        "getNonce(uint256)": "2926",
        "getSelectionBlockDuration(uint256)": "infinite",
        "getState(uint256,address)": "infinite",
        "getSubInstances(uint256,address)": "762",
        "getTargetInterval(uint256)": "1232",
        "instantiate(uint256,uint256,uint32,uint32,address)": "171526",
        "isActive(uint256)": "1207",
        "isConcerned(uint256,address)": "311",
        "log2ApproxTimes1M(uint256)": "infinite",
        "produceBlock(uint256,address,uint256)": "infinite"
      },
      "internal": {
        "_blockProduced(uint256)": "infinite",
        "_reset(uint256)": "41834",
        "getLogOfRandom(uint256,address)": "infinite",
        "getNewDifficulty(uint256,uint256,uint32,uint32,uint32)": "infinite",
        "getSeed(uint256,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "canProduceBlock(uint256,address,uint256)": "59dc826c",
      "currentIndex()": "26987b60",
      "getBlockCount(uint256)": "d0aeade7",
      "getDifficulty(uint256)": "983ef725",
      "getDifficultyAdjustmentParameter(uint256)": "4e58fdca",
      "getMinDifficulty(uint256)": "83f6f5ca",
      "getNonce(uint256)": "3d46b819",
      "getSelectionBlockDuration(uint256)": "c67ddc38",
      "getState(uint256,address)": "73df1612",
      "getSubInstances(uint256,address)": "c526656c",
      "getTargetInterval(uint256)": "f9070044",
      "instantiate(uint256,uint256,uint32,uint32,address)": "da1c7140",
      "isActive(uint256)": "82afd23b",
      "isConcerned(uint256,address)": "01ff62ab",
      "log2ApproxTimes1M(uint256)": "e3581b68",
      "produceBlock(uint256,address,uint256)": "5378014f"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"producer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"name\":\"BlockProduced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"canProduceBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBlockCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDifficultyAdjustmentParameter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMinDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSelectionBlockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_uintValues\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSubInstances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTargetInterval\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDifficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_difficultyAdjustmentParameter\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_targetInterval\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_posManagerAddress\",\"type\":\"address\"}],\"name\":\"instantiate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConcerned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"log2ApproxTimes1M\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"produceBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canProduceBlock(uint256,address,uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector you want to interact with\",\"_user\":\"the address that is gonna get checked\",\"_weight\":\"number that will weight the random number, most likely will be the number of staked tokens\"}},\"getBlockCount(uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"number of blocks\"}},\"getDifficulty(uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"difficulty of current selection\"}},\"getDifficultyAdjustmentParameter(uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"difficulty adjustment parameter\"}},\"getMinDifficulty(uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"min difficulty of instance\"}},\"getSelectionBlockDuration(uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"number of etheereum blocks passed since last selection started\"}},\"getTargetInterval(uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector to be interact with\"},\"returns\":{\"_0\":\"target interval\"}},\"instantiate(uint256,uint256,uint32,uint32,address)\":{\"params\":{\"_difficultyAdjustmentParameter\":\"how quickly the difficulty gets updated according to the difference between time passed and target interval.\",\"_initialDifficulty\":\"starting difficulty\",\"_minDifficulty\":\"lower bound for difficulty parameter\",\"_posManagerAddress\":\"address of ProofOfStake that will use this instance\",\"_targetInterval\":\"how often we want produce noether blocks, in ethereum blocks\"}},\"log2ApproxTimes1M(uint256)\":{\"params\":{\"_num\":\"number to take log2 * 1M of\"}},\"produceBlock(uint256,address,uint256)\":{\"params\":{\"_index\":\"the index of the instance of block selector you want to interact with\",\"_user\":\"address that has the right to produce block\",\"_weight\":\"number that will weight the random number, will be the number of staked tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canProduceBlock(uint256,address,uint256)\":{\"notice\":\"Check if address is allowed to produce block\"},\"getBlockCount(uint256)\":{\"notice\":\"Returns the number of blocks\"},\"getDifficulty(uint256)\":{\"notice\":\"Returns current difficulty\"},\"getDifficultyAdjustmentParameter(uint256)\":{\"notice\":\"Returns difficulty adjustment parameter\"},\"getMinDifficulty(uint256)\":{\"notice\":\"Returns min difficulty\"},\"getSelectionBlockDuration(uint256)\":{\"notice\":\"Returns time since last selection started, in ethereum blocks\"},\"getTargetInterval(uint256)\":{\"notice\":\"Returns target interval\"},\"instantiate(uint256,uint256,uint32,uint32,address)\":{\"notice\":\"Instantiates a BlockSelector structure\"},\"log2ApproxTimes1M(uint256)\":{\"notice\":\"Approximates log2 * 1M\"},\"produceBlock(uint256,address,uint256)\":{\"notice\":\"Produces a block\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlockSelector.sol\":\"BlockSelector\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/CartesiMath.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title CartesiMath\\n/// @author Felipe Argento\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract CartesiMath {\\n    using SafeMath for uint256;\\n    mapping(uint256 => uint256) log2tableTimes1M;\\n\\n    constructor() {\\n        log2tableTimes1M[1] = 0;\\n        log2tableTimes1M[2] = 1000000;\\n        log2tableTimes1M[3] = 1584962;\\n        log2tableTimes1M[4] = 2000000;\\n        log2tableTimes1M[5] = 2321928;\\n        log2tableTimes1M[6] = 2584962;\\n        log2tableTimes1M[7] = 2807354;\\n        log2tableTimes1M[8] = 3000000;\\n        log2tableTimes1M[9] = 3169925;\\n        log2tableTimes1M[10] = 3321928;\\n        log2tableTimes1M[11] = 3459431;\\n        log2tableTimes1M[12] = 3584962;\\n        log2tableTimes1M[13] = 3700439;\\n        log2tableTimes1M[14] = 3807354;\\n        log2tableTimes1M[15] = 3906890;\\n        log2tableTimes1M[16] = 4000000;\\n        log2tableTimes1M[17] = 4087462;\\n        log2tableTimes1M[18] = 4169925;\\n        log2tableTimes1M[19] = 4247927;\\n        log2tableTimes1M[20] = 4321928;\\n        log2tableTimes1M[21] = 4392317;\\n        log2tableTimes1M[22] = 4459431;\\n        log2tableTimes1M[23] = 4523561;\\n        log2tableTimes1M[24] = 4584962;\\n        log2tableTimes1M[25] = 4643856;\\n        log2tableTimes1M[26] = 4700439;\\n        log2tableTimes1M[27] = 4754887;\\n        log2tableTimes1M[28] = 4807354;\\n        log2tableTimes1M[29] = 4857980;\\n        log2tableTimes1M[30] = 4906890;\\n        log2tableTimes1M[31] = 4954196;\\n        log2tableTimes1M[32] = 5000000;\\n        log2tableTimes1M[33] = 5044394;\\n        log2tableTimes1M[34] = 5087462;\\n        log2tableTimes1M[35] = 5129283;\\n        log2tableTimes1M[36] = 5169925;\\n        log2tableTimes1M[37] = 5209453;\\n        log2tableTimes1M[38] = 5247927;\\n        log2tableTimes1M[39] = 5285402;\\n        log2tableTimes1M[40] = 5321928;\\n        log2tableTimes1M[41] = 5357552;\\n        log2tableTimes1M[42] = 5392317;\\n        log2tableTimes1M[43] = 5426264;\\n        log2tableTimes1M[44] = 5459431;\\n        log2tableTimes1M[45] = 5491853;\\n        log2tableTimes1M[46] = 5523561;\\n        log2tableTimes1M[47] = 5554588;\\n        log2tableTimes1M[48] = 5584962;\\n        log2tableTimes1M[49] = 5614709;\\n        log2tableTimes1M[50] = 5643856;\\n        log2tableTimes1M[51] = 5672425;\\n        log2tableTimes1M[52] = 5700439;\\n        log2tableTimes1M[53] = 5727920;\\n        log2tableTimes1M[54] = 5754887;\\n        log2tableTimes1M[55] = 5781359;\\n        log2tableTimes1M[56] = 5807354;\\n        log2tableTimes1M[57] = 5832890;\\n        log2tableTimes1M[58] = 5857980;\\n        log2tableTimes1M[59] = 5882643;\\n        log2tableTimes1M[60] = 5906890;\\n        log2tableTimes1M[61] = 5930737;\\n        log2tableTimes1M[62] = 5954196;\\n        log2tableTimes1M[63] = 5977279;\\n        log2tableTimes1M[64] = 6000000;\\n        log2tableTimes1M[65] = 6022367;\\n        log2tableTimes1M[66] = 6044394;\\n        log2tableTimes1M[67] = 6066089;\\n        log2tableTimes1M[68] = 6087462;\\n        log2tableTimes1M[69] = 6108524;\\n        log2tableTimes1M[70] = 6129283;\\n        log2tableTimes1M[71] = 6149747;\\n        log2tableTimes1M[72] = 6169925;\\n        log2tableTimes1M[73] = 6189824;\\n        log2tableTimes1M[74] = 6209453;\\n        log2tableTimes1M[75] = 6228818;\\n        log2tableTimes1M[76] = 6247927;\\n        log2tableTimes1M[77] = 6266786;\\n        log2tableTimes1M[78] = 6285402;\\n        log2tableTimes1M[79] = 6303780;\\n        log2tableTimes1M[80] = 6321928;\\n        log2tableTimes1M[81] = 6339850;\\n        log2tableTimes1M[82] = 6357552;\\n        log2tableTimes1M[83] = 6375039;\\n        log2tableTimes1M[84] = 6392317;\\n        log2tableTimes1M[85] = 6409390;\\n        log2tableTimes1M[86] = 6426264;\\n        log2tableTimes1M[87] = 6442943;\\n        log2tableTimes1M[88] = 6459431;\\n        log2tableTimes1M[89] = 6475733;\\n        log2tableTimes1M[90] = 6491853;\\n        log2tableTimes1M[91] = 6507794;\\n        log2tableTimes1M[92] = 6523561;\\n        log2tableTimes1M[93] = 6539158;\\n        log2tableTimes1M[94] = 6554588;\\n        log2tableTimes1M[95] = 6569855;\\n        log2tableTimes1M[96] = 6584962;\\n        log2tableTimes1M[97] = 6599912;\\n        log2tableTimes1M[98] = 6614709;\\n        log2tableTimes1M[99] = 6629356;\\n        log2tableTimes1M[100] = 6643856;\\n        log2tableTimes1M[101] = 6658211;\\n        log2tableTimes1M[102] = 6672425;\\n        log2tableTimes1M[103] = 6686500;\\n        log2tableTimes1M[104] = 6700439;\\n        log2tableTimes1M[105] = 6714245;\\n        log2tableTimes1M[106] = 6727920;\\n        log2tableTimes1M[107] = 6741466;\\n        log2tableTimes1M[108] = 6754887;\\n        log2tableTimes1M[109] = 6768184;\\n        log2tableTimes1M[110] = 6781359;\\n        log2tableTimes1M[111] = 6794415;\\n        log2tableTimes1M[112] = 6807354;\\n        log2tableTimes1M[113] = 6820178;\\n        log2tableTimes1M[114] = 6832890;\\n        log2tableTimes1M[115] = 6845490;\\n        log2tableTimes1M[116] = 6857980;\\n        log2tableTimes1M[117] = 6870364;\\n        log2tableTimes1M[118] = 6882643;\\n        log2tableTimes1M[119] = 6894817;\\n        log2tableTimes1M[120] = 6906890;\\n        log2tableTimes1M[121] = 6918863;\\n        log2tableTimes1M[122] = 6930737;\\n        log2tableTimes1M[123] = 6942514;\\n        log2tableTimes1M[124] = 6954196;\\n        log2tableTimes1M[125] = 6965784;\\n        log2tableTimes1M[126] = 6977279;\\n        log2tableTimes1M[127] = 6988684;\\n        log2tableTimes1M[128] = 7000000;\\n    }\\n\\n    /// @notice Approximates log2 * 1M\\n    /// @param _num number to take log2 * 1M of\\n    function log2ApproxTimes1M(uint256 _num) public view returns (uint256) {\\n        require (_num > 0, \\\"Number cannot be zero\\\");\\n        uint256 leading = 0;\\n\\n        if (_num == 1) return 0;\\n\\n        while (_num > 128) {\\n           _num = _num >> 1;\\n           leading += 1;\\n       }\\n       return (leading.mul(uint256(1000000))).add(log2tableTimes1M[_num]);\\n    }\\n}\\n\",\"keccak256\":\"0x496a53dd1d169264fe58353fef5d283dfc8a78789757d32af69be41faaa97d6e\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Decorated.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\n\\ncontract Decorated {\\n    // This contract defines several modifiers but does not use\\n    // them - they will be used in derived contracts.\\n    modifier onlyBy(address user) {\\n        require(msg.sender == user, \\\"Cannot be called by user\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfter(uint256 time) {\\n        require(block.timestamp > time, \\\"Cannot be called now\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdbba019b8f7f93b212a5bbae402ee988321c4fa82ed2b4c9e55b4d7ddf35dcc3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Instantiator.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\ninterface Instantiator {\\n\\n    modifier onlyInstantiated(uint256 _index) virtual;\\n\\n    modifier onlyActive(uint256 _index) virtual;\\n\\n    modifier increasesNonce(uint256 _index) virtual;\\n\\n    function isActive(uint256 _index) external view returns (bool);\\n\\n    function getNonce(uint256 _index) external view returns (uint256);\\n\\n    function isConcerned(uint256 _index, address _user) external view returns (bool);\\n\\n    function getSubInstances(uint256 _index, address) external view returns (address[] memory _addresses, uint256[] memory _indices);\\n}\\n\",\"keccak256\":\"0x416e612dc09b10765de32ec06cf0a7ee4e050e16db8bf3b8ad832a6082b7dfd6\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/InstantiatorImpl.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Instantiator.sol\\\";\\n\\nabstract contract InstantiatorImpl is Instantiator {\\n    uint256 public currentIndex = 0;\\n\\n    mapping(uint256 => bool) internal active;\\n    mapping(uint256 => uint256) internal nonce;\\n\\n    modifier onlyInstantiated(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        _;\\n    }\\n\\n    modifier onlyActive(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        require(isActive(_index), \\\"Index inactive\\\");\\n        _;\\n    }\\n\\n    modifier increasesNonce(uint256 _index) override {\\n        nonce[_index]++;\\n        _;\\n    }\\n\\n    function isActive(uint256 _index) public override view returns (bool) {\\n        return (active[_index]);\\n    }\\n\\n    function getNonce(uint256 _index)\\n        public\\n        override\\n        view\\n        onlyActive(_index)\\n        returns (uint256 currentNonce)\\n    {\\n        return nonce[_index];\\n    }\\n\\n    function deactivate(uint256 _index) internal {\\n        active[_index] = false;\\n        nonce[_index] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8f8e29b807e5c55198206a370b4d8751cbd98a663e3f89faff274e2f9d7cae75\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"contracts/BlockSelector.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Block Selector\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"@cartesi/util/contracts/CartesiMath.sol\\\";\\nimport \\\"@cartesi/util/contracts/InstantiatorImpl.sol\\\";\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\n\\ncontract BlockSelector is InstantiatorImpl, Decorated, CartesiMath {\\n    using SafeMath for uint256;\\n\\n    uint256 constant C_256 = 256; // 256 blocks\\n    uint256 constant DIFFICULTY_BASE_MULTIPLIER = 256000000; //256 M\\n    uint256 constant ADJUSTMENT_BASE = 1000000; // 1M\\n\\n    struct BlockSelectorCtx {\\n        // @dev the order of variables are important for storage packing\\n        // 32 bytes constants\\n        uint256 minDifficulty; // lower bound for difficulty\\n        // 32 bytes var\\n        uint256 difficulty; // difficulty parameter defines how big the interval will be\\n\\n        // 20 bytes constants\\n        address posManagerAddress;\\n\\n        // 4 bytes constants\\n        uint32 difficultyAdjustmentParameter; // how fast the difficulty gets adjusted to reach the desired interval, number * 1000000\\n        uint32 targetInterval; // desired block selection interval in ethereum blocks\\n\\n        // 4 bytes var\\n        uint32 blockCount; // how many blocks have been created\\n        uint32 ethBlockCheckpoint; // ethereum block number when current selection started\\n    }\\n\\n    mapping(uint256 => BlockSelectorCtx) internal instance;\\n\\n    event BlockProduced(\\n        uint256 indexed index,\\n        address indexed producer,\\n        uint32 blockNumber,\\n        uint256 roundDuration,\\n        uint256 difficulty\\n    );\\n\\n    /// @notice Instantiates a BlockSelector structure\\n    /// @param _minDifficulty lower bound for difficulty parameter\\n    /// @param _initialDifficulty starting difficulty\\n    /// @param _difficultyAdjustmentParameter how quickly the difficulty gets updated\\n    /// according to the difference between time passed and target interval.\\n    /// @param _targetInterval how often we want produce noether blocks, in ethereum blocks\\n    /// @param _posManagerAddress address of ProofOfStake that will use this instance\\n    function instantiate(\\n        uint256 _minDifficulty,\\n        uint256 _initialDifficulty,\\n        uint32 _difficultyAdjustmentParameter,\\n        uint32 _targetInterval,\\n        address _posManagerAddress\\n    ) public returns (uint256)\\n    {\\n        instance[currentIndex].minDifficulty = _minDifficulty;\\n        instance[currentIndex].difficulty = _initialDifficulty;\\n        instance[currentIndex].difficultyAdjustmentParameter = _difficultyAdjustmentParameter;\\n        instance[currentIndex].targetInterval = _targetInterval;\\n        instance[currentIndex].posManagerAddress = _posManagerAddress;\\n\\n        instance[currentIndex].ethBlockCheckpoint = uint32(block.number); // first selection starts when the instance is created\\n\\n        active[currentIndex] = true;\\n        return currentIndex++;\\n    }\\n\\n    /// @notice Calculates the log of the random number between the goal and callers address\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user address to calculate log of random\\n    /// @return log of random number between goal and callers address * 1M\\n    function getLogOfRandom(uint256 _index, address _user) internal view returns (uint256) {\\n        // seed for goal takes a block in the future (+1) so it is harder to manipulate\\n        bytes32 currentGoal = blockhash(\\n            getSeed(uint256(instance[_index].ethBlockCheckpoint + 1), block.number)\\n        );\\n        bytes32 hashedAddress = keccak256(abi.encodePacked(_user));\\n        uint256 distance = uint256(keccak256(abi.encodePacked(hashedAddress, currentGoal)));\\n\\n        return CartesiMath.log2ApproxTimes1M(distance);\\n    }\\n\\n    /// @notice Produces a block\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user address that has the right to produce block\\n    /// @param _weight number that will weight the random number, will be the number of staked tokens\\n    function produceBlock(uint256 _index, address _user, uint256 _weight) public returns (bool) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        require(_weight > 0, \\\"Caller can't have zero staked tokens\\\");\\n        require(msg.sender == bsc.posManagerAddress, \\\"Function can only be called by pos address\\\");\\n\\n        if (canProduceBlock(_index, _user, _weight)) {\\n            emit BlockProduced(\\n                _index,\\n                _user,\\n                bsc.blockCount,\\n                getSelectionBlockDuration(_index),\\n                bsc.difficulty\\n            );\\n\\n            return _blockProduced(_index);\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Check if address is allowed to produce block\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    /// @param _user the address that is gonna get checked\\n    /// @param _weight number that will weight the random number, most likely will be the number of staked tokens\\n    function canProduceBlock(uint256 _index, address _user, uint256 _weight) public view returns (bool) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        // cannot produce if block selector goal hasnt been decided yet\\n        // goal is defined the block after selection was reset\\n        if (block.number <= bsc.ethBlockCheckpoint + 1) {\\n            return false;\\n        }\\n\\n        uint256 blockDuration = getSelectionBlockDuration(_index);\\n\\n        return (\\n            (_weight.mul(blockDuration)) > bsc.difficulty.mul((DIFFICULTY_BASE_MULTIPLIER - getLogOfRandom(_index, _user)))\\n        );\\n    }\\n\\n    /// @notice Block produced, declare producer and adjust difficulty\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    function _blockProduced(uint256 _index) private returns (bool) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        // adjust difficulty\\n        bsc.difficulty = getNewDifficulty(\\n            bsc.minDifficulty,\\n            bsc.difficulty,\\n            uint32((block.number).sub(uint256(bsc.ethBlockCheckpoint))),\\n            bsc.targetInterval,\\n            bsc.difficultyAdjustmentParameter\\n        );\\n\\n        _reset(_index);\\n        return true;\\n    }\\n\\n    /// @notice Reset instance, advancing round and choosing new goal\\n    /// @param _index the index of the instance of block selector you want to interact with\\n    function _reset(uint256 _index) private {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        bsc.blockCount++;\\n        bsc.ethBlockCheckpoint = uint32(block.number);\\n    }\\n\\n    function getSeed(\\n        uint256 _previousTarget,\\n        uint256 _currentBlock\\n    )\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        uint256 diff = _currentBlock.sub(_previousTarget);\\n        uint256 res = diff.div(C_256);\\n\\n        // if difference is multiple of 256 (256, 512, 1024)\\n        // preserve old target\\n        if (diff % C_256 == 0) {\\n            return _previousTarget.add((res - 1).mul(C_256));\\n        }\\n\\n        return _previousTarget.add(res.mul(C_256));\\n    }\\n\\n    /// @notice Calculates new difficulty parameter\\n    /// @param _minDiff minimum difficulty of instance\\n    /// @param _oldDiff is the difficulty of previous round\\n    /// @param _blocksPassed how many ethereum blocks have passed\\n    /// @param _targetInterval is how long a round is supposed to take\\n    /// @param _adjustmentParam is how fast the difficulty gets adjusted,\\n    ///         should be number * 1000000\\n    function getNewDifficulty(\\n        uint256 _minDiff,\\n        uint256 _oldDiff,\\n        uint32 _blocksPassed,\\n        uint32 _targetInterval,\\n        uint32 _adjustmentParam\\n    )\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        // @dev to save gas on evaluation, instead of returning the _oldDiff when the target\\n        // was exactly matched - we increase the difficulty.\\n        if (_blocksPassed <= _targetInterval) {\\n            return _oldDiff.add(_oldDiff.mul(_adjustmentParam).div(ADJUSTMENT_BASE) + 1);\\n        }\\n\\n        uint256 newDiff = _oldDiff.sub(_oldDiff.mul(_adjustmentParam).div(ADJUSTMENT_BASE) + 1);\\n\\n        return newDiff > _minDiff ? newDiff : _minDiff;\\n    }\\n\\n    /// @notice Returns the number of blocks\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return number of blocks\\n    function getBlockCount(uint256 _index) public view returns (uint32) {\\n        return instance[_index].blockCount;\\n    }\\n\\n    /// @notice Returns current difficulty\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return difficulty of current selection\\n    function getDifficulty(uint256 _index) public view returns (uint256) {\\n        return instance[_index].difficulty;\\n    }\\n\\n    /// @notice Returns min difficulty\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return min difficulty of instance\\n    function getMinDifficulty(uint256 _index) public view returns (uint256) {\\n        return instance[_index].minDifficulty;\\n    }\\n\\n    /// @notice Returns difficulty adjustment parameter\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return difficulty adjustment parameter\\n    function getDifficultyAdjustmentParameter(\\n        uint256 _index\\n    )\\n    public\\n    view\\n    returns (uint32)\\n    {\\n        return instance[_index].difficultyAdjustmentParameter;\\n    }\\n\\n    /// @notice Returns target interval\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return target interval\\n    function getTargetInterval(uint256 _index) public view returns (uint32) {\\n        return instance[_index].targetInterval;\\n    }\\n\\n    /// @notice Returns time since last selection started, in ethereum blocks\\n    /// @param _index the index of the instance of block selector to be interact with\\n    /// @return number of etheereum blocks passed since last selection started\\n    function getSelectionBlockDuration(uint256 _index) public view returns (uint256) {\\n        BlockSelectorCtx storage bsc = instance[_index];\\n\\n        return (block.number).sub(uint256(bsc.ethBlockCheckpoint));\\n    }\\n\\n    function getState(uint256 _index, address _user)\\n    public view returns (uint256[5] memory _uintValues) {\\n        BlockSelectorCtx storage i = instance[_index];\\n\\n        uint256[5] memory uintValues = [\\n            block.number,\\n            i.ethBlockCheckpoint + 1, // initial selection goal\\n            i.difficulty,\\n            getSelectionBlockDuration(_index), // blocks passed\\n            getLogOfRandom(_index, _user)\\n        ];\\n\\n        return uintValues;\\n    }\\n\\n    function isConcerned(uint256, address) public override pure returns (bool) {\\n        return false; // isConcerned is only for the main concern (PoS)\\n    }\\n\\n    function getSubInstances(uint256, address)\\n        public override pure returns (address[] memory _addresses,\\n            uint256[] memory _indices)\\n    {\\n        address[] memory a;\\n        uint256[] memory i;\\n\\n        a = new address[](0);\\n        i = new uint256[](0);\\n\\n        return (a, i);\\n    }\\n}\\n\",\"keccak256\":\"0x2df2a7a11c4e6fc32c001cc3f9b09b0bb774cfceef14522fdffe1edf35f15cc0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 927,
        "contract": "contracts/BlockSelector.sol:BlockSelector",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 931,
        "contract": "contracts/BlockSelector.sol:BlockSelector",
        "label": "active",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 935,
        "contract": "contracts/BlockSelector.sol:BlockSelector",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9,
        "contract": "contracts/BlockSelector.sol:BlockSelector",
        "label": "log2tableTimes1M",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1535,
        "contract": "contracts/BlockSelector.sol:BlockSelector",
        "label": "instance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(BlockSelectorCtx)1531_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(BlockSelectorCtx)1531_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BlockSelector.BlockSelectorCtx)",
        "numberOfBytes": "32",
        "value": "t_struct(BlockSelectorCtx)1531_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BlockSelectorCtx)1531_storage": {
        "encoding": "inplace",
        "label": "struct BlockSelector.BlockSelectorCtx",
        "members": [
          {
            "astId": 1518,
            "contract": "contracts/BlockSelector.sol:BlockSelector",
            "label": "minDifficulty",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1520,
            "contract": "contracts/BlockSelector.sol:BlockSelector",
            "label": "difficulty",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1522,
            "contract": "contracts/BlockSelector.sol:BlockSelector",
            "label": "posManagerAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1524,
            "contract": "contracts/BlockSelector.sol:BlockSelector",
            "label": "difficultyAdjustmentParameter",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1526,
            "contract": "contracts/BlockSelector.sol:BlockSelector",
            "label": "targetInterval",
            "offset": 24,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1528,
            "contract": "contracts/BlockSelector.sol:BlockSelector",
            "label": "blockCount",
            "offset": 28,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1530,
            "contract": "contracts/BlockSelector.sol:BlockSelector",
            "label": "ethBlockCheckpoint",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canProduceBlock(uint256,address,uint256)": {
        "notice": "Check if address is allowed to produce block"
      },
      "getBlockCount(uint256)": {
        "notice": "Returns the number of blocks"
      },
      "getDifficulty(uint256)": {
        "notice": "Returns current difficulty"
      },
      "getDifficultyAdjustmentParameter(uint256)": {
        "notice": "Returns difficulty adjustment parameter"
      },
      "getMinDifficulty(uint256)": {
        "notice": "Returns min difficulty"
      },
      "getSelectionBlockDuration(uint256)": {
        "notice": "Returns time since last selection started, in ethereum blocks"
      },
      "getTargetInterval(uint256)": {
        "notice": "Returns target interval"
      },
      "instantiate(uint256,uint256,uint32,uint32,address)": {
        "notice": "Instantiates a BlockSelector structure"
      },
      "log2ApproxTimes1M(uint256)": {
        "notice": "Approximates log2 * 1M"
      },
      "produceBlock(uint256,address,uint256)": {
        "notice": "Produces a block"
      }
    },
    "version": 1
  }
}