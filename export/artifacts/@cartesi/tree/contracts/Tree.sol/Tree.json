{
  "contractName": "Tree",
  "sourceName": "@cartesi/tree/contracts/Tree.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_parent",
          "type": "uint256"
        }
      ],
      "name": "VertexInserted",
      "type": "event"
    }
  ],
  "bytecode": "0x610a4161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c80636af5673e116100655780636af5673e146100ff5780636ca00e4c1461011e5780639d26337214610131578063ebcdb8721461015157600080fd5b806301b2a42d1461008c57806333fefb37146100b2578063694884b6146100c5575b600080fd5b61009f61009a366004610763565b610164565b6040519081526020015b60405180910390f35b61009f6100c0366004610785565b61017e565b6100ea6100d33660046107b1565b5463ffffffff808216926401000000009092041690565b604080519283526020830191909152016100a9565b61009f61010d3660046107b1565b54600160401b900463ffffffff1690565b61009f61012c366004610763565b610275565b81801561013d57600080fd5b5061009f61014c366004610763565b6102bb565b61009f61015f366004610785565b61040e565b60006101708383610275565b5463ffffffff169392505050565b8254600090600160401b900463ffffffff1683106101b75760405162461bcd60e51b81526004016101ae906107ca565b60405180910390fd5b600083815260018501602052604090208054640100000000900463ffffffff1683106102255760405162461bcd60e51b815260206004820152601960248201527f6f666673657420657863656564732063616368652073697a650000000000000060448201526064016101ae565b600061023260088561082d565b90506000610241600886610841565b90506000610250826020610855565b600093845260019094016020525050604090205463ffffffff911c1690509392505050565b8154600090600160401b900463ffffffff1682106102a55760405162461bcd60e51b81526004016101ae906107ca565b5060009081526001919091016020526040902090565b8154600090600160401b900463ffffffff16808460086102da83610874565b825463ffffffff9182166101009390930a9283029190920219909116179055506000818152600185016020526040902081156103825781841061035f5760405162461bcd60e51b815260206004820152601e60248201527f706172656e7420696e646578206578636565647320747265652073697a65000060448201526064016101ae565b600084815260018601602052604090205463ffffffff166103808282610546565b505b8054855463ffffffff91821691640100000000909104168111156103d157855467ffffffffffffffff191664010000000063ffffffff8381169190910263ffffffff1916919091179084161786555b6040518581527ffe0c8c4e3d6360493265394a5a45cb3affdf2119a8b04640ea666dbd217e4f2f9060200160405180910390a15090949350505050565b8254600090600160401b900463ffffffff16831061043e5760405162461bcd60e51b81526004016101ae906107ca565b600083815260018501602052604090205463ffffffff168211156104a45760405162461bcd60e51b815260206004820152601b60248201527f736561726368206465707468203e20766572746578206465707468000000000060448201526064016101ae565b825b600081815260018601602052604090205463ffffffff16831461053e5760008181526001868101602052604082208054909264010000000090910463ffffffff16918491906104f59084610897565b90505b828110156105355761050b89838361017e565b600081815260018b01602052604090205490955063ffffffff1687111561053557600019016104f8565b505050506104a6565b949350505050565b600061055b6105568360016108ae565b61063f565b905060005b8151811015610606576000805b6008811080156105865750835161058482856108ae565b105b156105d057610596816020610855565b846105a183866108ae565b815181106105b1576105b16108c6565b6020026020010151901b82179150806105c9906108dc565b905061056d565b816001870160006105e260088761082d565b81526020810191909152604001600020556105fd81846108ae565b92505050610560565b6106118360016108ae565b8454925163ffffffff9081166401000000000267ffffffffffffffff19909416911617919091179092555050565b6060600061064e600184610897565b9050600160005b60048110156106ca576000604051806101200160405280610100815260200161090c6101009139610687836008610855565b85901c60ff168151811061069d5761069d6108c6565b016020015160f81c90506106b181846108ae565b9250806008146106c157506106ca565b50600101610655565b5060008167ffffffffffffffff8111156106e6576106e66108f5565b60405190808252806020026020018201604052801561070f578160200160208202803683370190505b50905060005b8281101561075a5783828281518110610730576107306108c6565b60209081029190910101526107468160016108ae565b63ffffffff901b9390931692600101610715565b50949350505050565b6000806040838503121561077657600080fd5b50508035926020909101359150565b60008060006060848603121561079a57600080fd5b505081359360208301359350604090920135919050565b6000602082840312156107c357600080fd5b5035919050565b6020808252601e908201527f76657274657820696e646578206578636565647320747265652073697a650000604082015260600190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008261083c5761083c610801565b500490565b60008261085057610850610801565b500690565b600081600019048311821515161561086f5761086f610817565b500290565b600063ffffffff80831681810361088d5761088d610817565b6001019392505050565b6000828210156108a9576108a9610817565b500390565b600082198211156108c1576108c1610817565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600182016108ee576108ee610817565b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fd66acfe2a9afb3acaf7b480f180e9abd06f781cc19d04002016d7122e224f7d64736f6c634300080e0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c80636af5673e116100655780636af5673e146100ff5780636ca00e4c1461011e5780639d26337214610131578063ebcdb8721461015157600080fd5b806301b2a42d1461008c57806333fefb37146100b2578063694884b6146100c5575b600080fd5b61009f61009a366004610763565b610164565b6040519081526020015b60405180910390f35b61009f6100c0366004610785565b61017e565b6100ea6100d33660046107b1565b5463ffffffff808216926401000000009092041690565b604080519283526020830191909152016100a9565b61009f61010d3660046107b1565b54600160401b900463ffffffff1690565b61009f61012c366004610763565b610275565b81801561013d57600080fd5b5061009f61014c366004610763565b6102bb565b61009f61015f366004610785565b61040e565b60006101708383610275565b5463ffffffff169392505050565b8254600090600160401b900463ffffffff1683106101b75760405162461bcd60e51b81526004016101ae906107ca565b60405180910390fd5b600083815260018501602052604090208054640100000000900463ffffffff1683106102255760405162461bcd60e51b815260206004820152601960248201527f6f666673657420657863656564732063616368652073697a650000000000000060448201526064016101ae565b600061023260088561082d565b90506000610241600886610841565b90506000610250826020610855565b600093845260019094016020525050604090205463ffffffff911c1690509392505050565b8154600090600160401b900463ffffffff1682106102a55760405162461bcd60e51b81526004016101ae906107ca565b5060009081526001919091016020526040902090565b8154600090600160401b900463ffffffff16808460086102da83610874565b825463ffffffff9182166101009390930a9283029190920219909116179055506000818152600185016020526040902081156103825781841061035f5760405162461bcd60e51b815260206004820152601e60248201527f706172656e7420696e646578206578636565647320747265652073697a65000060448201526064016101ae565b600084815260018601602052604090205463ffffffff166103808282610546565b505b8054855463ffffffff91821691640100000000909104168111156103d157855467ffffffffffffffff191664010000000063ffffffff8381169190910263ffffffff1916919091179084161786555b6040518581527ffe0c8c4e3d6360493265394a5a45cb3affdf2119a8b04640ea666dbd217e4f2f9060200160405180910390a15090949350505050565b8254600090600160401b900463ffffffff16831061043e5760405162461bcd60e51b81526004016101ae906107ca565b600083815260018501602052604090205463ffffffff168211156104a45760405162461bcd60e51b815260206004820152601b60248201527f736561726368206465707468203e20766572746578206465707468000000000060448201526064016101ae565b825b600081815260018601602052604090205463ffffffff16831461053e5760008181526001868101602052604082208054909264010000000090910463ffffffff16918491906104f59084610897565b90505b828110156105355761050b89838361017e565b600081815260018b01602052604090205490955063ffffffff1687111561053557600019016104f8565b505050506104a6565b949350505050565b600061055b6105568360016108ae565b61063f565b905060005b8151811015610606576000805b6008811080156105865750835161058482856108ae565b105b156105d057610596816020610855565b846105a183866108ae565b815181106105b1576105b16108c6565b6020026020010151901b82179150806105c9906108dc565b905061056d565b816001870160006105e260088761082d565b81526020810191909152604001600020556105fd81846108ae565b92505050610560565b6106118360016108ae565b8454925163ffffffff9081166401000000000267ffffffffffffffff19909416911617919091179092555050565b6060600061064e600184610897565b9050600160005b60048110156106ca576000604051806101200160405280610100815260200161090c6101009139610687836008610855565b85901c60ff168151811061069d5761069d6108c6565b016020015160f81c90506106b181846108ae565b9250806008146106c157506106ca565b50600101610655565b5060008167ffffffffffffffff8111156106e6576106e66108f5565b60405190808252806020026020018201604052801561070f578160200160208202803683370190505b50905060005b8281101561075a5783828281518110610730576107306108c6565b60209081029190910101526107468160016108ae565b63ffffffff901b9390931692600101610715565b50949350505050565b6000806040838503121561077657600080fd5b50508035926020909101359150565b60008060006060848603121561079a57600080fd5b505081359360208301359350604090920135919050565b6000602082840312156107c357600080fd5b5035919050565b6020808252601e908201527f76657274657820696e646578206578636565647320747265652073697a650000604082015260600190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008261083c5761083c610801565b500490565b60008261085057610850610801565b500690565b600081600019048311821515161561086f5761086f610817565b500290565b600063ffffffff80831681810361088d5761088d610817565b6001019392505050565b6000828210156108a9576108a9610817565b500390565b600082198211156108c1576108c1610817565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600182016108ee576108ee610817565b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fd66acfe2a9afb3acaf7b480f180e9abd06f781cc19d04002016d7122e224f7d64736f6c634300080e0033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAncestor(Tree.TreeCtx storage,uint256,uint256)": {
        "params": {
          "_ancestorOffset": "the offset of the ancestor in ancestor cache",
          "_tree": "pointer to the tree storage",
          "_vertex": "the index of the vertex in the vertices map (tree)"
        },
        "returns": {
          "_0": "index of ancestor vertex in the tree"
        }
      },
      "getAncestorAtDepth(Tree.TreeCtx storage,uint256,uint256)": {
        "params": {
          "_depth": "the depth of the ancestor",
          "_tree": "pointer to the tree storage",
          "_vertex": "the index of the vertex in the vertices map (tree)"
        },
        "returns": {
          "_0": "index of ancestor at depth of _vertex"
        }
      },
      "getDeepest(Tree.TreeCtx storage)": {
        "params": {
          "_tree": "pointer to the tree storage"
        },
        "returns": {
          "_0": "index number and depth of the deepest vertex"
        }
      },
      "getDepth(Tree.TreeCtx storage,uint256)": {
        "params": {
          "_tree": "pointer to the tree storage",
          "_vertex": "the index of the vertex in the vertices map (tree)"
        }
      },
      "getTreeSize(Tree.TreeCtx storage)": {
        "params": {
          "_tree": "pointer to the tree storage"
        }
      },
      "getVertex(Tree.TreeCtx storage,uint256)": {
        "params": {
          "_tree": "pointer to the tree storage",
          "_vertex": "the index of the vertex in the vertices map (tree)"
        }
      },
      "insertVertex(Tree.TreeCtx storage,uint256)": {
        "details": "the tree can hold up to UINT32_MAX vertices, if the insertVertex is called when tree is full, the transaction will be reverted",
        "params": {
          "_parent": "the index of parent vertex in the vertices map (tree)",
          "_tree": "pointer to the tree storage"
        },
        "returns": {
          "_0": "index of the inserted vertex"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAncestor(Tree.TreeCtx storage,uint256,uint256)": {
        "notice": "Get an ancestor of a vertex from its ancestor cache by offset"
      },
      "getAncestorAtDepth(Tree.TreeCtx storage,uint256,uint256)": {
        "notice": "Search an ancestor of a vertex in the tree at a certain depth"
      },
      "getDeepest(Tree.TreeCtx storage)": {
        "notice": "Get current tree size"
      },
      "getDepth(Tree.TreeCtx storage,uint256)": {
        "notice": "Get depth of vertex"
      },
      "getTreeSize(Tree.TreeCtx storage)": {
        "notice": "Get current tree size"
      },
      "getVertex(Tree.TreeCtx storage,uint256)": {
        "notice": "Get vertex from the tree"
      },
      "insertVertex(Tree.TreeCtx storage,uint256)": {
        "notice": "Insert a vertex to the tree"
      }
    },
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "525000",
        "executionCost": "593",
        "totalCost": "525593"
      },
      "external": {
        "getAncestor(Tree.TreeCtx storage,uint256,uint256)": "7129",
        "getAncestorAtDepth(Tree.TreeCtx storage,uint256,uint256)": "infinite",
        "getDeepest(Tree.TreeCtx storage)": "2454",
        "getDepth(Tree.TreeCtx storage,uint256)": "4664",
        "getTreeSize(Tree.TreeCtx storage)": "2365",
        "getVertex(Tree.TreeCtx storage,uint256)": "2534",
        "insertVertex(Tree.TreeCtx storage,uint256)": "infinite"
      },
      "internal": {
        "batchSetAncestors(struct Tree.Vertex storage pointer,uint256)": "infinite",
        "getRequiredDepths(uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "getAncestor(Tree.TreeCtx storage,uint256,uint256)": "33fefb37",
      "getAncestorAtDepth(Tree.TreeCtx storage,uint256,uint256)": "ebcdb872",
      "getDeepest(Tree.TreeCtx storage)": "694884b6",
      "getDepth(Tree.TreeCtx storage,uint256)": "01b2a42d",
      "getTreeSize(Tree.TreeCtx storage)": "6af5673e",
      "getVertex(Tree.TreeCtx storage,uint256)": "6ca00e4c",
      "insertVertex(Tree.TreeCtx storage,uint256)": "9d263372"
    }
  }
}